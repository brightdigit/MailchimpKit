import Foundation
import Prch

public extension Campaigns {
  /**
   Send test email

   Send a test email.
   */
  enum PostCampaignsIdActionsTest {
    public static let service = Service<Response>(id: "postCampaignsIdActionsTest", tag: "campaigns", method: "POST", path: "/campaigns/{campaign_id}/actions/test", hasBody: true, securityRequirements: [SecurityRequirement(type: "basicAuth", scopes: [])])

    /** Choose the type of test email to send. */
    public enum SendType: String, Codable, Equatable, CaseIterable {
      case html
      case plaintext
    }

    public struct Request: BodyRequest {
      /** Send a test email. */
      public struct Body: Model {
        /** Choose the type of test email to send. */
        public enum SendType: String, Codable, Equatable, CaseIterable {
          case html
          case plaintext
        }

        /** Choose the type of test email to send. */
        public var sendType: SendType

        /** An array of email addresses to send the test email to. */
        public var testEmails: [String]

        public init(sendType: SendType, testEmails: [String]) {
          self.sendType = sendType
          self.testEmails = testEmails
        }

        public init(from decoder: Decoder) throws {
          let container = try decoder.container(keyedBy: StringCodingKey.self)

          sendType = try container.decode("send_type")
          testEmails = try container.decodeArray("test_emails")
        }

        public func encode(to encoder: Encoder) throws {
          var container = encoder.container(keyedBy: StringCodingKey.self)

          try container.encode(sendType, forKey: "send_type")
          try container.encode(testEmails, forKey: "test_emails")
        }
      }

      public struct Options {
        /** The unique id for the campaign. */
        public var campaignId: String

        public init(campaignId: String) {
          self.campaignId = campaignId
        }
      }

      public var options: Options

      public var body: Body

      public init(body: Body, options: Options, encoder _: RequestEncoder? = nil) {
        self.body = body
        self.options = options
      }

      public typealias ResponseType = Response

      public var service: Service<Response> {
        PostCampaignsIdActionsTest.service
      }

      /// convenience initialiser so an Option doesn't have to be created
      public init(campaignId: String, body: Body) {
        let options = Options(campaignId: campaignId)
        self.init(body: body, options: options)
      }

      public var path: String {
        service.path.replacingOccurrences(of: "{" + "campaign_id" + "}", with: "\(options.campaignId)")
      }
    }

    public enum Response: Prch.Response {
      public var response: ClientResult<Void, DefaultResponse> {
        switch self {
        case let .defaultResponse(statusCode: statusCode, response):
          return .defaultResponse(statusCode, response)

        case .status204:
          return .success(())
        }
      }

      public typealias APIType = Mailchimp.API
      /** An error generated by the Mailchimp API. Conforms to IETF draft 'draft-nottingham-http-problem-06'. */

      public typealias SuccessType = Void
      public typealias FailureType = DefaultResponse

      /** Empty Response */
      case status204

      /** An error generated by the Mailchimp API. */
      case defaultResponse(statusCode: Int, DefaultResponse)

      public var statusCode: Int {
        switch self {
        case .status204: return 204
        case let .defaultResponse(statusCode, _): return statusCode
        }
      }

      public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
        switch statusCode {
        case 204: self = .status204
        default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
        }
      }
    }
  }
}
