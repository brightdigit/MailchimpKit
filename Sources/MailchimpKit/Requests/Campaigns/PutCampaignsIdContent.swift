//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Campaigns {

    /**
    Set campaign content

    Set the content for a campaign.
    */
    public enum PutCampaignsIdContent {

        public static let service = APIService<Response>(id: "putCampaignsIdContent", tag: "campaigns", method: "PUT", path: "/campaigns/{campaign_id}/content", hasBody: true, securityRequirements: [SecurityRequirement(type: "basicAuth", scopes: [])])

        public final class Request: APIRequest<Response> {

            /** The HTML and plain-text content for a campaign */
            public class Body: APIModel {

                /** Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/). */
                public var archive: Archive?

                /** The raw HTML for the campaign. */
                public var html: String?

                /** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
                public var plainText: String?

                /** Use this template to generate the HTML content of the campaign */
                public var template: Template?

                /** When importing a campaign, the URL where the HTML lives. */
                public var url: String?

                /** Content options for [Multivariate Campaigns](https://mailchimp.com/help/about-multivariate-campaigns/). Each content option must provide HTML content and may optionally provide plain text. For campaigns not testing content, only one object should be provided. */
                public var variateContents: [VariateContents]?

                /** Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/). */
                public class Archive: APIModel {

                    /** The type of encoded file. Defaults to zip. */
                    public enum ArchiveType: String, Codable, Equatable, CaseIterable {
                        case zip = "zip"
                        case tarGz = "tar.gz"
                        case tarBz2 = "tar.bz2"
                        case tar = "tar"
                        case tgz = "tgz"
                        case tbz = "tbz"
                    }

                    /** The base64-encoded representation of the archive file. */
                    public var archiveContent: String

                    /** The type of encoded file. Defaults to zip. */
                    public var archiveType: ArchiveType?

                    public init(archiveContent: String, archiveType: ArchiveType? = nil) {
                        self.archiveContent = archiveContent
                        self.archiveType = archiveType
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        archiveContent = try container.decode("archive_content")
                        archiveType = try container.decodeIfPresent("archive_type")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encode(archiveContent, forKey: "archive_content")
                        try container.encodeIfPresent(archiveType, forKey: "archive_type")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Archive else { return false }
                      guard self.archiveContent == object.archiveContent else { return false }
                      guard self.archiveType == object.archiveType else { return false }
                      return true
                    }

                    public static func == (lhs: Archive, rhs: Archive) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                /** Use this template to generate the HTML content of the campaign */
                public class Template: APIModel {

                    /** The id of the template to use. */
                    public var id: Int

                    /** Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template. */
                    public var sections: [String: Any]?

                    public init(id: Int, sections: [String: Any]? = nil) {
                        self.id = id
                        self.sections = sections
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        id = try container.decode("id")
                        sections = try container.decodeAnyIfPresent("sections")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encode(id, forKey: "id")
                        try container.encodeAnyIfPresent(sections, forKey: "sections")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Template else { return false }
                      guard self.id == object.id else { return false }
                      guard NSDictionary(dictionary: self.sections ?? [:]).isEqual(to: object.sections ?? [:]) else { return false }
                      return true
                    }

                    public static func == (lhs: Template, rhs: Template) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                /** The HTML and plain-text content for a campaign */
                public class VariateContents: APIModel {

                    /** The label used to identify the content option. */
                    public var contentLabel: String

                    /** Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/). */
                    public var archive: Archive?

                    /** The raw HTML for the campaign. */
                    public var html: String?

                    /** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
                    public var plainText: String?

                    /** Use this template to generate the HTML content for the campaign. */
                    public var template: Template?

                    /** When importing a campaign, the URL for the HTML. */
                    public var url: String?

                    /** Available when uploading an archive to create campaign content. The archive should include all campaign content and images. [Learn more](https://mailchimp.com/help/import-a-custom-html-template/). */
                    public class Archive: APIModel {

                        /** The type of encoded file. Defaults to zip. */
                        public enum ArchiveType: String, Codable, Equatable, CaseIterable {
                            case zip = "zip"
                            case tarGz = "tar.gz"
                            case tarBz2 = "tar.bz2"
                            case tar = "tar"
                            case tgz = "tgz"
                            case tbz = "tbz"
                        }

                        /** The base64-encoded representation of the archive file. */
                        public var archiveContent: String

                        /** The type of encoded file. Defaults to zip. */
                        public var archiveType: ArchiveType?

                        public init(archiveContent: String, archiveType: ArchiveType? = nil) {
                            self.archiveContent = archiveContent
                            self.archiveType = archiveType
                        }

                        public required init(from decoder: Decoder) throws {
                            let container = try decoder.container(keyedBy: StringCodingKey.self)

                            archiveContent = try container.decode("archive_content")
                            archiveType = try container.decodeIfPresent("archive_type")
                        }

                        public func encode(to encoder: Encoder) throws {
                            var container = encoder.container(keyedBy: StringCodingKey.self)

                            try container.encode(archiveContent, forKey: "archive_content")
                            try container.encodeIfPresent(archiveType, forKey: "archive_type")
                        }

                        public func isEqual(to object: Any?) -> Bool {
                          guard let object = object as? Archive else { return false }
                          guard self.archiveContent == object.archiveContent else { return false }
                          guard self.archiveType == object.archiveType else { return false }
                          return true
                        }

                        public static func == (lhs: Archive, rhs: Archive) -> Bool {
                            return lhs.isEqual(to: rhs)
                        }
                    }

                    /** Use this template to generate the HTML content for the campaign. */
                    public class Template: APIModel {

                        /** The id of the template to use. */
                        public var id: Int

                        /** Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template. */
                        public var sections: [String: Any]?

                        public init(id: Int, sections: [String: Any]? = nil) {
                            self.id = id
                            self.sections = sections
                        }

                        public required init(from decoder: Decoder) throws {
                            let container = try decoder.container(keyedBy: StringCodingKey.self)

                            id = try container.decode("id")
                            sections = try container.decodeAnyIfPresent("sections")
                        }

                        public func encode(to encoder: Encoder) throws {
                            var container = encoder.container(keyedBy: StringCodingKey.self)

                            try container.encode(id, forKey: "id")
                            try container.encodeAnyIfPresent(sections, forKey: "sections")
                        }

                        public func isEqual(to object: Any?) -> Bool {
                          guard let object = object as? Template else { return false }
                          guard self.id == object.id else { return false }
                          guard NSDictionary(dictionary: self.sections ?? [:]).isEqual(to: object.sections ?? [:]) else { return false }
                          return true
                        }

                        public static func == (lhs: Template, rhs: Template) -> Bool {
                            return lhs.isEqual(to: rhs)
                        }
                    }

                    public init(contentLabel: String, archive: Archive? = nil, html: String? = nil, plainText: String? = nil, template: Template? = nil, url: String? = nil) {
                        self.contentLabel = contentLabel
                        self.archive = archive
                        self.html = html
                        self.plainText = plainText
                        self.template = template
                        self.url = url
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        contentLabel = try container.decode("content_label")
                        archive = try container.decodeIfPresent("archive")
                        html = try container.decodeIfPresent("html")
                        plainText = try container.decodeIfPresent("plain_text")
                        template = try container.decodeIfPresent("template")
                        url = try container.decodeIfPresent("url")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encode(contentLabel, forKey: "content_label")
                        try container.encodeIfPresent(archive, forKey: "archive")
                        try container.encodeIfPresent(html, forKey: "html")
                        try container.encodeIfPresent(plainText, forKey: "plain_text")
                        try container.encodeIfPresent(template, forKey: "template")
                        try container.encodeIfPresent(url, forKey: "url")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? VariateContents else { return false }
                      guard self.contentLabel == object.contentLabel else { return false }
                      guard self.archive == object.archive else { return false }
                      guard self.html == object.html else { return false }
                      guard self.plainText == object.plainText else { return false }
                      guard self.template == object.template else { return false }
                      guard self.url == object.url else { return false }
                      return true
                    }

                    public static func == (lhs: VariateContents, rhs: VariateContents) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(archive: Archive? = nil, html: String? = nil, plainText: String? = nil, template: Template? = nil, url: String? = nil, variateContents: [VariateContents]? = nil) {
                    self.archive = archive
                    self.html = html
                    self.plainText = plainText
                    self.template = template
                    self.url = url
                    self.variateContents = variateContents
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    archive = try container.decodeIfPresent("archive")
                    html = try container.decodeIfPresent("html")
                    plainText = try container.decodeIfPresent("plain_text")
                    template = try container.decodeIfPresent("template")
                    url = try container.decodeIfPresent("url")
                    variateContents = try container.decodeArrayIfPresent("variate_contents")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(archive, forKey: "archive")
                    try container.encodeIfPresent(html, forKey: "html")
                    try container.encodeIfPresent(plainText, forKey: "plain_text")
                    try container.encodeIfPresent(template, forKey: "template")
                    try container.encodeIfPresent(url, forKey: "url")
                    try container.encodeIfPresent(variateContents, forKey: "variate_contents")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.archive == object.archive else { return false }
                  guard self.html == object.html else { return false }
                  guard self.plainText == object.plainText else { return false }
                  guard self.template == object.template else { return false }
                  guard self.url == object.url else { return false }
                  guard self.variateContents == object.variateContents else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The unique id for the campaign. */
                public var campaignId: String

                public init(campaignId: String) {
                    self.campaignId = campaignId
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: PutCampaignsIdContent.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(campaignId: String, body: Body) {
                let options = Options(campaignId: campaignId)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "campaign_id" + "}", with: "\(self.options.campaignId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** The HTML and plain-text content for a campaign. */
            public class Status200: APIModel {

                /** A list of link types and descriptions for the API schema documents. */
                public var links: [Links]?

                /** The Archive HTML for the campaign. */
                public var archiveHtml: String?

                /** The raw HTML for the campaign. */
                public var html: String?

                /** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
                public var plainText: String?

                /** Content options for multivariate campaigns. */
                public var variateContents: [VariateContents]?

                /** This object represents a link from the resource where it is found to another resource or action that may be performed. */
                public class Links: APIModel {

                    /** The HTTP method that should be used when accessing the URL defined in 'href'. */
                    public enum Method: String, Codable, Equatable, CaseIterable {
                        case get = "GET"
                        case post = "POST"
                        case put = "PUT"
                        case patch = "PATCH"
                        case delete = "DELETE"
                        case options = "OPTIONS"
                        case head = "HEAD"
                    }

                    /** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
                    public var href: String?

                    /** The HTTP method that should be used when accessing the URL defined in 'href'. */
                    public var method: Method?

                    /** As with an HTML 'rel' attribute, this describes the type of link. */
                    public var rel: String?

                    /** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
                    public var schema: String?

                    /** For GETs, this is a URL representing the schema that the response should conform to. */
                    public var targetSchema: String?

                    public init(href: String? = nil, method: Method? = nil, rel: String? = nil, schema: String? = nil, targetSchema: String? = nil) {
                        self.href = href
                        self.method = method
                        self.rel = rel
                        self.schema = schema
                        self.targetSchema = targetSchema
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        href = try container.decodeIfPresent("href")
                        method = try container.decodeIfPresent("method")
                        rel = try container.decodeIfPresent("rel")
                        schema = try container.decodeIfPresent("schema")
                        targetSchema = try container.decodeIfPresent("targetSchema")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeIfPresent(href, forKey: "href")
                        try container.encodeIfPresent(method, forKey: "method")
                        try container.encodeIfPresent(rel, forKey: "rel")
                        try container.encodeIfPresent(schema, forKey: "schema")
                        try container.encodeIfPresent(targetSchema, forKey: "targetSchema")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Links else { return false }
                      guard self.href == object.href else { return false }
                      guard self.method == object.method else { return false }
                      guard self.rel == object.rel else { return false }
                      guard self.schema == object.schema else { return false }
                      guard self.targetSchema == object.targetSchema else { return false }
                      return true
                    }

                    public static func == (lhs: Links, rhs: Links) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                /** The HTML and plain-text content for a campaign. */
                public class VariateContents: APIModel {

                    /** Label used to identify the content option. */
                    public var contentLabel: String?

                    /** The raw HTML for the campaign. */
                    public var html: String?

                    /** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
                    public var plainText: String?

                    public init(contentLabel: String? = nil, html: String? = nil, plainText: String? = nil) {
                        self.contentLabel = contentLabel
                        self.html = html
                        self.plainText = plainText
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        contentLabel = try container.decodeIfPresent("content_label")
                        html = try container.decodeIfPresent("html")
                        plainText = try container.decodeIfPresent("plain_text")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeIfPresent(contentLabel, forKey: "content_label")
                        try container.encodeIfPresent(html, forKey: "html")
                        try container.encodeIfPresent(plainText, forKey: "plain_text")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? VariateContents else { return false }
                      guard self.contentLabel == object.contentLabel else { return false }
                      guard self.html == object.html else { return false }
                      guard self.plainText == object.plainText else { return false }
                      return true
                    }

                    public static func == (lhs: VariateContents, rhs: VariateContents) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(links: [Links]? = nil, archiveHtml: String? = nil, html: String? = nil, plainText: String? = nil, variateContents: [VariateContents]? = nil) {
                    self.links = links
                    self.archiveHtml = archiveHtml
                    self.html = html
                    self.plainText = plainText
                    self.variateContents = variateContents
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    links = try container.decodeArrayIfPresent("_links")
                    archiveHtml = try container.decodeIfPresent("archive_html")
                    html = try container.decodeIfPresent("html")
                    plainText = try container.decodeIfPresent("plain_text")
                    variateContents = try container.decodeArrayIfPresent("variate_contents")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(links, forKey: "_links")
                    try container.encodeIfPresent(archiveHtml, forKey: "archive_html")
                    try container.encodeIfPresent(html, forKey: "html")
                    try container.encodeIfPresent(plainText, forKey: "plain_text")
                    try container.encodeIfPresent(variateContents, forKey: "variate_contents")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.links == object.links else { return false }
                  guard self.archiveHtml == object.archiveHtml else { return false }
                  guard self.html == object.html else { return false }
                  guard self.plainText == object.plainText else { return false }
                  guard self.variateContents == object.variateContents else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** An error generated by the Mailchimp API. Conforms to IETF draft 'draft-nottingham-http-problem-06'. */
            public class DefaultResponse: APIModel {

                /** A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors). */
                public var detail: String

                /** A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support. */
                public var instance: String

                /** The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem. */
                public var status: Int

                /** A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization. */
                public var title: String

                /** An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type. */
                public var type: String

                public init(detail: String, instance: String, status: Int, title: String, type: String) {
                    self.detail = detail
                    self.instance = instance
                    self.status = status
                    self.title = title
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    detail = try container.decode("detail")
                    instance = try container.decode("instance")
                    status = try container.decode("status")
                    title = try container.decode("title")
                    type = try container.decode("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(detail, forKey: "detail")
                    try container.encode(instance, forKey: "instance")
                    try container.encode(status, forKey: "status")
                    try container.encode(title, forKey: "title")
                    try container.encode(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.detail == object.detail else { return false }
                  guard self.instance == object.instance else { return false }
                  guard self.status == object.status else { return false }
                  guard self.title == object.title else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200
            case status200(Status200)

            /** An error generated by the Mailchimp API. */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
