//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension API.Lists {

    /**
    Add segment

    Create a new segment in a specific list.
    */
    public enum PostListsIdSegments {

        public static let service = APIService<Response>(id: "postListsIdSegments", tag: "lists", method: "POST", path: "/lists/{list_id}/segments", hasBody: true, securityRequirements: [SecurityRequirement(type: "basicAuth", scopes: [])])

        public final class Request: APIRequest<Response> {

            /** Information about a specific list segment. */
            public class Body: APIModel {

                /** The name of the segment. */
                public var name: String

                /** The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions. */
                public var options: Options?

                /** An array of emails to be used for a static segment. Any emails provided that are not present on the list will be ignored. Passing an empty array will create a static segment without any subscribers. This field cannot be provided with the options field. */
                public var staticSegment: [String]?

                /** The [conditions of the segment](https://mailchimp.com/help/save-and-manage-segments/). Static and fuzzy segments don't have conditions. */
                public class Options: APIModel {

                    /** Match type. */
                    public enum Match: String, Codable, Equatable, CaseIterable {
                        case any = "any"
                        case all = "all"
                    }

                    /** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
                    public var conditions: [[String: Any]]?

                    /** Match type. */
                    public var match: Match?

                    public init(conditions: [[String: Any]]? = nil, match: Match? = nil) {
                        self.conditions = conditions
                        self.match = match
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        conditions = try container.decodeAnyIfPresent("conditions")
                        match = try container.decodeIfPresent("match")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeAnyIfPresent(conditions, forKey: "conditions")
                        try container.encodeIfPresent(match, forKey: "match")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Options else { return false }
                      guard self.conditions == object.conditions else { return false }
                      guard self.match == object.match else { return false }
                      return true
                    }

                    public static func == (lhs: Options, rhs: Options) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(name: String, options: Options? = nil, staticSegment: [String]? = nil) {
                    self.name = name
                    self.options = options
                    self.staticSegment = staticSegment
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    name = try container.decode("name")
                    options = try container.decodeIfPresent("options")
                    staticSegment = try container.decodeArrayIfPresent("static_segment")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(name, forKey: "name")
                    try container.encodeIfPresent(options, forKey: "options")
                    try container.encodeIfPresent(staticSegment, forKey: "static_segment")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.name == object.name else { return false }
                  guard self.options == object.options else { return false }
                  guard self.staticSegment == object.staticSegment else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The unique ID for the list. */
                public var listId: String

                public init(listId: String) {
                    self.listId = listId
                }
            }

            public var options: Options

            public var body: Body

            public init(body: Body, options: Options, encoder: RequestEncoder? = nil) {
                self.body = body
                self.options = options
                super.init(service: PostListsIdSegments.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(listId: String, body: Body) {
                let options = Options(listId: listId)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "list_id" + "}", with: "\(self.options.listId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {

            /** Information about a specific segment. */
            public class Status200: APIModel {

                /** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
                public enum `Type`: String, Codable, Equatable, CaseIterable {
                    case saved = "saved"
                    case `static` = "static"
                    case fuzzy = "fuzzy"
                }

                /** A list of link types and descriptions for the API schema documents. */
                public var links: [Links]?

                /** The date and time the segment was created in ISO 8601 format. */
                public var createdAt: DateTime?

                /** The unique id for the segment. */
                public var id: Int?

                /** The list id. */
                public var listId: String?

                /** The number of active subscribers currently included in the segment. */
                public var memberCount: Int?

                /** The name of the segment. */
                public var name: String?

                /** The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions. */
                public var options: Options?

                /** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
                public var type: `Type`?

                /** The date and time the segment was last updated in ISO 8601 format. */
                public var updatedAt: DateTime?

                /** This object represents a link from the resource where it is found to another resource or action that may be performed. */
                public class Links: APIModel {

                    /** The HTTP method that should be used when accessing the URL defined in 'href'. */
                    public enum Method: String, Codable, Equatable, CaseIterable {
                        case get = "GET"
                        case post = "POST"
                        case put = "PUT"
                        case patch = "PATCH"
                        case delete = "DELETE"
                        case options = "OPTIONS"
                        case head = "HEAD"
                    }

                    /** This property contains a fully-qualified URL that can be called to retrieve the linked resource or perform the linked action. */
                    public var href: String?

                    /** The HTTP method that should be used when accessing the URL defined in 'href'. */
                    public var method: Method?

                    /** As with an HTML 'rel' attribute, this describes the type of link. */
                    public var rel: String?

                    /** For HTTP methods that can receive bodies (POST and PUT), this is a URL representing the schema that the body should conform to. */
                    public var schema: String?

                    /** For GETs, this is a URL representing the schema that the response should conform to. */
                    public var targetSchema: String?

                    public init(href: String? = nil, method: Method? = nil, rel: String? = nil, schema: String? = nil, targetSchema: String? = nil) {
                        self.href = href
                        self.method = method
                        self.rel = rel
                        self.schema = schema
                        self.targetSchema = targetSchema
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        href = try container.decodeIfPresent("href")
                        method = try container.decodeIfPresent("method")
                        rel = try container.decodeIfPresent("rel")
                        schema = try container.decodeIfPresent("schema")
                        targetSchema = try container.decodeIfPresent("targetSchema")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeIfPresent(href, forKey: "href")
                        try container.encodeIfPresent(method, forKey: "method")
                        try container.encodeIfPresent(rel, forKey: "rel")
                        try container.encodeIfPresent(schema, forKey: "schema")
                        try container.encodeIfPresent(targetSchema, forKey: "targetSchema")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Links else { return false }
                      guard self.href == object.href else { return false }
                      guard self.method == object.method else { return false }
                      guard self.rel == object.rel else { return false }
                      guard self.schema == object.schema else { return false }
                      guard self.targetSchema == object.targetSchema else { return false }
                      return true
                    }

                    public static func == (lhs: Links, rhs: Links) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                /** The conditions of the segment. Static segments (tags) and fuzzy segments don't have conditions. */
                public class Options: APIModel {

                    /** Match type. */
                    public enum Match: String, Codable, Equatable, CaseIterable {
                        case any = "any"
                        case all = "all"
                    }

                    /** Segment match conditions. There are multiple possible types, see the [condition types documentation](https://mailchimp.com/developer/marketing/docs/alternative-schemas/#segment-condition-schemas). */
                    public var conditions: [[String: Any]]?

                    /** Match type. */
                    public var match: Match?

                    public init(conditions: [[String: Any]]? = nil, match: Match? = nil) {
                        self.conditions = conditions
                        self.match = match
                    }

                    public required init(from decoder: Decoder) throws {
                        let container = try decoder.container(keyedBy: StringCodingKey.self)

                        conditions = try container.decodeAnyIfPresent("conditions")
                        match = try container.decodeIfPresent("match")
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.container(keyedBy: StringCodingKey.self)

                        try container.encodeAnyIfPresent(conditions, forKey: "conditions")
                        try container.encodeIfPresent(match, forKey: "match")
                    }

                    public func isEqual(to object: Any?) -> Bool {
                      guard let object = object as? Options else { return false }
                      guard self.conditions == object.conditions else { return false }
                      guard self.match == object.match else { return false }
                      return true
                    }

                    public static func == (lhs: Options, rhs: Options) -> Bool {
                        return lhs.isEqual(to: rhs)
                    }
                }

                public init(links: [Links]? = nil, createdAt: DateTime? = nil, id: Int? = nil, listId: String? = nil, memberCount: Int? = nil, name: String? = nil, options: Options? = nil, type: `Type`? = nil, updatedAt: DateTime? = nil) {
                    self.links = links
                    self.createdAt = createdAt
                    self.id = id
                    self.listId = listId
                    self.memberCount = memberCount
                    self.name = name
                    self.options = options
                    self.type = type
                    self.updatedAt = updatedAt
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    links = try container.decodeArrayIfPresent("_links")
                    createdAt = try container.decodeIfPresent("created_at")
                    id = try container.decodeIfPresent("id")
                    listId = try container.decodeIfPresent("list_id")
                    memberCount = try container.decodeIfPresent("member_count")
                    name = try container.decodeIfPresent("name")
                    options = try container.decodeIfPresent("options")
                    type = try container.decodeIfPresent("type")
                    updatedAt = try container.decodeIfPresent("updated_at")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(links, forKey: "_links")
                    try container.encodeIfPresent(createdAt, forKey: "created_at")
                    try container.encodeIfPresent(id, forKey: "id")
                    try container.encodeIfPresent(listId, forKey: "list_id")
                    try container.encodeIfPresent(memberCount, forKey: "member_count")
                    try container.encodeIfPresent(name, forKey: "name")
                    try container.encodeIfPresent(options, forKey: "options")
                    try container.encodeIfPresent(type, forKey: "type")
                    try container.encodeIfPresent(updatedAt, forKey: "updated_at")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Status200 else { return false }
                  guard self.links == object.links else { return false }
                  guard self.createdAt == object.createdAt else { return false }
                  guard self.id == object.id else { return false }
                  guard self.listId == object.listId else { return false }
                  guard self.memberCount == object.memberCount else { return false }
                  guard self.name == object.name else { return false }
                  guard self.options == object.options else { return false }
                  guard self.type == object.type else { return false }
                  guard self.updatedAt == object.updatedAt else { return false }
                  return true
                }

                public static func == (lhs: Status200, rhs: Status200) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            /** An error generated by the Mailchimp API. Conforms to IETF draft 'draft-nottingham-http-problem-06'. */
            public class DefaultResponse: APIModel {

                /** A human-readable explanation specific to this occurrence of the problem. [Learn more about errors](/developer/guides/get-started-with-mailchimp-api-3/#Errors). */
                public var detail: String

                /** A string that identifies this specific occurrence of the problem. Please provide this ID when contacting support. */
                public var instance: String

                /** The HTTP status code (RFC2616, Section 6) generated by the origin server for this occurrence of the problem. */
                public var status: Int

                /** A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization. */
                public var title: String

                /** An absolute URI that identifies the problem type. When dereferenced, it should provide human-readable documentation for the problem type. */
                public var type: String

                public init(detail: String, instance: String, status: Int, title: String, type: String) {
                    self.detail = detail
                    self.instance = instance
                    self.status = status
                    self.title = title
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    detail = try container.decode("detail")
                    instance = try container.decode("instance")
                    status = try container.decode("status")
                    title = try container.decode("title")
                    type = try container.decode("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(detail, forKey: "detail")
                    try container.encode(instance, forKey: "instance")
                    try container.encode(status, forKey: "status")
                    try container.encode(title, forKey: "title")
                    try container.encode(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DefaultResponse else { return false }
                  guard self.detail == object.detail else { return false }
                  guard self.instance == object.instance else { return false }
                  guard self.status == object.status else { return false }
                  guard self.title == object.title else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: DefaultResponse, rhs: DefaultResponse) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }
            public typealias SuccessType = Status200
            case status200(Status200)

            /** An error generated by the Mailchimp API. */
            case defaultResponse(statusCode: Int, DefaultResponse)

            public var success: Status200? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: DefaultResponse? {
                switch self {
                case .defaultResponse(_, let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Status200, DefaultResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .defaultResponse(_, let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .defaultResponse(let statusCode, _): return statusCode
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .defaultResponse: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Status200.self, from: data))
                default: self = try .defaultResponse(statusCode: statusCode, decoder.decode(DefaultResponse.self, from: data))
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
