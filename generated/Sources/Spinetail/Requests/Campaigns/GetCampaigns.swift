//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import PrchModel

extension Campaigns {

    /**
    List campaigns

    Get all campaigns in an account.
    */
    public struct GetCampaigns : ServiceCall {

        public static let pathTemplate = "/campaigns"

        public var method : RequestMethod {
            .GET
        }


        /** A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation. */
        public var fields: [String]?

        /** A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation. */
        public var excludeFields: [String]?

        /** The number of records to return. Default value is 10. Maximum value is 1000 */
        public var count: Int?

        /** Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0. */
        public var offset: Int?

        /** The campaign type. */
        public var type: `Type`?

        /** The status of the campaign. */
        public var status: Status?

        /** Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. */
        public var beforeSendTime: DateTime?

        /** Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. */
        public var sinceSendTime: DateTime?

        /** Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. */
        public var beforeCreateTime: DateTime?

        /** Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00. */
        public var sinceCreateTime: DateTime?

        /** The unique id for the list. */
        public var listId: String?

        /** The unique folder id. */
        public var folderId: String?

        /** Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list memberâ€™s email address. */
        public var memberId: String?

        /** Returns files sorted by the specified field. */
        public var sortField: SortField?

        /** Determines the order direction for sorted results. */
        public var sortDir: SortDir?

        //public static let service = APIService<Response>(id: "getCampaigns", tag: "campaigns", method: "GET", path: "/campaigns", hasBody: false, securityRequirements: [SecurityRequirement(type: "basicAuth", scopes: [])])

        /** The campaign type. */
        public enum `Type`: String, Codable, Equatable, CaseIterable {
            case regular = "regular"
            case plaintext = "plaintext"
            case absplit = "absplit"
            case rss = "rss"
            case variate = "variate"
        }

        /** The status of the campaign. */
        public enum Status: String, Codable, Equatable, CaseIterable {
            case save = "save"
            case paused = "paused"
            case schedule = "schedule"
            case sending = "sending"
            case sent = "sent"
        }

        /** Returns files sorted by the specified field. */
        public enum SortField: String, Codable, Equatable, CaseIterable {
            case createTime = "create_time"
            case sendTime = "send_time"
        }

        /** Determines the order direction for sorted results. */
        public enum SortDir: String, Codable, Equatable, CaseIterable {
            case asc = "ASC"
            case desc = "DESC"
        }

        public typealias SuccessType = GetCampaigns200Response
    }
}
