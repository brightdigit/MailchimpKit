//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Stats for Campaign A. */
public struct CampaignA: Codable, Equatable, Content {

    /** Abuse reports for Campaign A. */
    public var abuseReports: Int?

    /** Bounces for Campaign A. */
    public var bounces: Int?

    /** Forwards for Campaign A. */
    public var forwards: Int?

    /** Opens from forwards for Campaign A. */
    public var forwardsOpens: Int?

    /** The last open for Campaign A. */
    public var lastOpen: String?

    /** Opens for Campaign A. */
    public var opens: Int?

    /** Recipient Clicks for Campaign A. */
    public var recipientClicks: Int?

    /** Unique opens for Campaign A. */
    public var uniqueOpens: Int?

    /** Unsubscribes for Campaign A. */
    public var unsubs: Int?

    public init(abuseReports: Int? = nil, bounces: Int? = nil, forwards: Int? = nil, forwardsOpens: Int? = nil, lastOpen: String? = nil, opens: Int? = nil, recipientClicks: Int? = nil, uniqueOpens: Int? = nil, unsubs: Int? = nil) {
        self.abuseReports = abuseReports
        self.bounces = bounces
        self.forwards = forwards
        self.forwardsOpens = forwardsOpens
        self.lastOpen = lastOpen
        self.opens = opens
        self.recipientClicks = recipientClicks
        self.uniqueOpens = uniqueOpens
        self.unsubs = unsubs
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        abuseReports = try container.decodeIfPresent("abuse_reports")
        bounces = try container.decodeIfPresent("bounces")
        forwards = try container.decodeIfPresent("forwards")
        forwardsOpens = try container.decodeIfPresent("forwards_opens")
        lastOpen = try container.decodeIfPresent("last_open")
        opens = try container.decodeIfPresent("opens")
        recipientClicks = try container.decodeIfPresent("recipient_clicks")
        uniqueOpens = try container.decodeIfPresent("unique_opens")
        unsubs = try container.decodeIfPresent("unsubs")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(abuseReports, forKey: "abuse_reports")
        try container.encodeIfPresent(bounces, forKey: "bounces")
        try container.encodeIfPresent(forwards, forKey: "forwards")
        try container.encodeIfPresent(forwardsOpens, forKey: "forwards_opens")
        try container.encodeIfPresent(lastOpen, forKey: "last_open")
        try container.encodeIfPresent(opens, forKey: "opens")
        try container.encodeIfPresent(recipientClicks, forKey: "recipient_clicks")
        try container.encodeIfPresent(uniqueOpens, forKey: "unique_opens")
        try container.encodeIfPresent(unsubs, forKey: "unsubs")
    }

}
