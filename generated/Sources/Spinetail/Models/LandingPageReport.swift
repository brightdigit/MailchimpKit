//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A summary of an individual landing page's settings and content. */
public struct LandingPageReport: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The number of clicks to this landing pages. */
    public var clicks: Int?

    /** The percentage of people who visited your landing page and were added to your list. */
    public var conversionRate: Double?

    public var ecommerce: LandingPageReportEcommerce?

    /** A string that uniquely identifies this landing page. */
    public var id: String?

    /** The list id connected to this landing page. */
    public var listId: String?

    /** List Name */
    public var listName: String?

    /** The name of this landing page the user will see. */
    public var name: String?

    /** The time this landing page was published. */
    public var publishedAt: DateTime?

    /** A list of tags associated to the landing page. */
    public var signupTags: [Tag]?

    /** The status of the landing page. */
    public var status: String?

    /** The number of subscribes to this landing pages. */
    public var subscribes: Int?

    public var timeseries: LandingPageReportTimeseries?

    /** The name of the landing page the user's customers will see. */
    public var title: String?

    /** The number of unique visits to this landing pages. */
    public var uniqueVisits: Int?

    /** The time this landing page was unpublished. */
    public var unpublishedAt: DateTime?

    /** The landing page url. */
    public var url: String?

    /** The number of visits to this landing pages. */
    public var visits: Int?

    /** The ID used in the Mailchimp web application. */
    public var webId: Int?

    public init(links: [ResourceLink]? = nil, clicks: Int? = nil, conversionRate: Double? = nil, ecommerce: LandingPageReportEcommerce? = nil, id: String? = nil, listId: String? = nil, listName: String? = nil, name: String? = nil, publishedAt: DateTime? = nil, signupTags: [Tag]? = nil, status: String? = nil, subscribes: Int? = nil, timeseries: LandingPageReportTimeseries? = nil, title: String? = nil, uniqueVisits: Int? = nil, unpublishedAt: DateTime? = nil, url: String? = nil, visits: Int? = nil, webId: Int? = nil) {
        self.links = links
        self.clicks = clicks
        self.conversionRate = conversionRate
        self.ecommerce = ecommerce
        self.id = id
        self.listId = listId
        self.listName = listName
        self.name = name
        self.publishedAt = publishedAt
        self.signupTags = signupTags
        self.status = status
        self.subscribes = subscribes
        self.timeseries = timeseries
        self.title = title
        self.uniqueVisits = uniqueVisits
        self.unpublishedAt = unpublishedAt
        self.url = url
        self.visits = visits
        self.webId = webId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        clicks = try container.decodeIfPresent("clicks")
        conversionRate = try container.decodeIfPresent("conversion_rate")
        ecommerce = try container.decodeIfPresent("ecommerce")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        listName = try container.decodeIfPresent("list_name")
        name = try container.decodeIfPresent("name")
        publishedAt = try container.decodeIfPresent("published_at")
        signupTags = try container.decodeArrayIfPresent("signup_tags")
        status = try container.decodeIfPresent("status")
        subscribes = try container.decodeIfPresent("subscribes")
        timeseries = try container.decodeIfPresent("timeseries")
        title = try container.decodeIfPresent("title")
        uniqueVisits = try container.decodeIfPresent("unique_visits")
        unpublishedAt = try container.decodeIfPresent("unpublished_at")
        url = try container.decodeIfPresent("url")
        visits = try container.decodeIfPresent("visits")
        webId = try container.decodeIfPresent("web_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(clicks, forKey: "clicks")
        try container.encodeIfPresent(conversionRate, forKey: "conversion_rate")
        try container.encodeIfPresent(ecommerce, forKey: "ecommerce")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(listName, forKey: "list_name")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(publishedAt, forKey: "published_at")
        try container.encodeIfPresent(signupTags, forKey: "signup_tags")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(subscribes, forKey: "subscribes")
        try container.encodeIfPresent(timeseries, forKey: "timeseries")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(uniqueVisits, forKey: "unique_visits")
        try container.encodeIfPresent(unpublishedAt, forKey: "unpublished_at")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(visits, forKey: "visits")
        try container.encodeIfPresent(webId, forKey: "web_id")
    }

}
