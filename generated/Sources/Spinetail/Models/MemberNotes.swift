//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A specific note for a specific member. */
public struct MemberNotes: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** As Mailchimp evolves beyond email, you may eventually have contacts without email addresses. While the `email_id` is the MD5 hash of their email address, this `contact_id` is agnostic of contactâ€™s inclusion of an email address. */
    public var contactId: String?

    /** The date and time the note was created in ISO 8601 format. */
    public var createdAt: DateTime?

    /** The author of the note. */
    public var createdBy: String?

    /** The MD5 hash of the lowercase version of the list member's email address. */
    public var emailId: String?

    /** The note id. */
    public var id: Int?

    /** The unique id for the list. */
    public var listId: String?

    /** The content of the note. */
    public var note: String?

    /** The date and time the note was last updated in ISO 8601 format. */
    public var updatedAt: DateTime?

    public init(links: [ResourceLink]? = nil, contactId: String? = nil, createdAt: DateTime? = nil, createdBy: String? = nil, emailId: String? = nil, id: Int? = nil, listId: String? = nil, note: String? = nil, updatedAt: DateTime? = nil) {
        self.links = links
        self.contactId = contactId
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.emailId = emailId
        self.id = id
        self.listId = listId
        self.note = note
        self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        contactId = try container.decodeIfPresent("contact_id")
        createdAt = try container.decodeIfPresent("created_at")
        createdBy = try container.decodeIfPresent("created_by")
        emailId = try container.decodeIfPresent("email_id")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        note = try container.decodeIfPresent("note")
        updatedAt = try container.decodeIfPresent("updated_at")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(contactId, forKey: "contact_id")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(createdBy, forKey: "created_by")
        try container.encodeIfPresent(emailId, forKey: "email_id")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(note, forKey: "note")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

}
