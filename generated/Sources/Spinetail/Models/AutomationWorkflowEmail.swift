//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A summary of an individual Automation workflow email. */
public struct AutomationWorkflowEmail: Codable, Equatable, Content {

    /** The current status of the campaign. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case save = "save"
        case paused = "paused"
        case sending = "sending"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The link to the campaign's archive version in ISO 8601 format. */
    public var archiveURL: String?

    /** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
    public var contentType: String?

    /** The date and time the campaign was created in ISO 8601 format. */
    public var createTime: DateTime?

    public var delay: AutomationDelay?

    /** The total number of emails sent for this campaign. */
    public var emailsSent: Int?

    /** Determines if the campaign contains the *|BRAND:LOGO|* merge tag. */
    public var hasLogoMergeTag: Bool?

    /** A string that uniquely identifies the Automation email. */
    public var id: String?

    /** Determines if the automation email needs its blocks refreshed by opening the web-based campaign editor. */
    public var needsBlockRefresh: Bool?

    /** The position of an Automation email in a workflow. */
    public var position: Int?

    public var recipients: List2?

    public var reportSummary: CampaignReportSummary1?

    /**  The date and time a campaign was sent in ISO 8601 format */
    public var sendTime: DateTime?

    public var settings: CampaignSettings?

    public var socialCard: CampaignSocialCard?

    /** The date and time the campaign was started in ISO 8601 format. */
    public var startTime: DateTime?

    /** The current status of the campaign. */
    public var status: Status?

    public var tracking: CampaignTrackingOptions?

    public var triggerSettings: AutomationTrigger?

    /** The ID used in the Mailchimp web application. View this automation in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
    public var webId: Int?

    /** A string that uniquely identifies an Automation workflow. */
    public var workflowId: String?

    public init(links: [ResourceLink]? = nil, archiveURL: String? = nil, contentType: String? = nil, createTime: DateTime? = nil, delay: AutomationDelay? = nil, emailsSent: Int? = nil, hasLogoMergeTag: Bool? = nil, id: String? = nil, needsBlockRefresh: Bool? = nil, position: Int? = nil, recipients: List2? = nil, reportSummary: CampaignReportSummary1? = nil, sendTime: DateTime? = nil, settings: CampaignSettings? = nil, socialCard: CampaignSocialCard? = nil, startTime: DateTime? = nil, status: Status? = nil, tracking: CampaignTrackingOptions? = nil, triggerSettings: AutomationTrigger? = nil, webId: Int? = nil, workflowId: String? = nil) {
        self.links = links
        self.archiveURL = archiveURL
        self.contentType = contentType
        self.createTime = createTime
        self.delay = delay
        self.emailsSent = emailsSent
        self.hasLogoMergeTag = hasLogoMergeTag
        self.id = id
        self.needsBlockRefresh = needsBlockRefresh
        self.position = position
        self.recipients = recipients
        self.reportSummary = reportSummary
        self.sendTime = sendTime
        self.settings = settings
        self.socialCard = socialCard
        self.startTime = startTime
        self.status = status
        self.tracking = tracking
        self.triggerSettings = triggerSettings
        self.webId = webId
        self.workflowId = workflowId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        archiveURL = try container.decodeIfPresent("archive_url")
        contentType = try container.decodeIfPresent("content_type")
        createTime = try container.decodeIfPresent("create_time")
        delay = try container.decodeIfPresent("delay")
        emailsSent = try container.decodeIfPresent("emails_sent")
        hasLogoMergeTag = try container.decodeIfPresent("has_logo_merge_tag")
        id = try container.decodeIfPresent("id")
        needsBlockRefresh = try container.decodeIfPresent("needs_block_refresh")
        position = try container.decodeIfPresent("position")
        recipients = try container.decodeIfPresent("recipients")
        reportSummary = try container.decodeIfPresent("report_summary")
        sendTime = try container.decodeIfPresent("send_time")
        settings = try container.decodeIfPresent("settings")
        socialCard = try container.decodeIfPresent("social_card")
        startTime = try container.decodeIfPresent("start_time")
        status = try container.decodeIfPresent("status")
        tracking = try container.decodeIfPresent("tracking")
        triggerSettings = try container.decodeIfPresent("trigger_settings")
        webId = try container.decodeIfPresent("web_id")
        workflowId = try container.decodeIfPresent("workflow_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(archiveURL, forKey: "archive_url")
        try container.encodeIfPresent(contentType, forKey: "content_type")
        try container.encodeIfPresent(createTime, forKey: "create_time")
        try container.encodeIfPresent(delay, forKey: "delay")
        try container.encodeIfPresent(emailsSent, forKey: "emails_sent")
        try container.encodeIfPresent(hasLogoMergeTag, forKey: "has_logo_merge_tag")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(needsBlockRefresh, forKey: "needs_block_refresh")
        try container.encodeIfPresent(position, forKey: "position")
        try container.encodeIfPresent(recipients, forKey: "recipients")
        try container.encodeIfPresent(reportSummary, forKey: "report_summary")
        try container.encodeIfPresent(sendTime, forKey: "send_time")
        try container.encodeIfPresent(settings, forKey: "settings")
        try container.encodeIfPresent(socialCard, forKey: "social_card")
        try container.encodeIfPresent(startTime, forKey: "start_time")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(tracking, forKey: "tracking")
        try container.encodeIfPresent(triggerSettings, forKey: "trigger_settings")
        try container.encodeIfPresent(webId, forKey: "web_id")
        try container.encodeIfPresent(workflowId, forKey: "workflow_id")
    }

}
