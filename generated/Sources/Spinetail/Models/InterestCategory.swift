//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Interest categories organize interests, which are used to group subscribers based on their preferences. These correspond to Group Titles the application. */
public struct InterestCategory: Codable, Equatable, Content {

    /** Determines how this category’s interests appear on signup forms. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case checkboxes = "checkboxes"
        case dropdown = "dropdown"
        case radio = "radio"
        case hidden = "hidden"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The order that the categories are displayed in the list. Lower numbers display first. */
    public var displayOrder: Int?

    /** The id for the interest category. */
    public var id: String?

    /** The unique list id for the category. */
    public var listId: String?

    /** The text description of this category. This field appears on signup forms and is often phrased as a question. */
    public var title: String?

    /** Determines how this category’s interests appear on signup forms. */
    public var type: `Type`?

    public init(links: [ResourceLink]? = nil, displayOrder: Int? = nil, id: String? = nil, listId: String? = nil, title: String? = nil, type: `Type`? = nil) {
        self.links = links
        self.displayOrder = displayOrder
        self.id = id
        self.listId = listId
        self.title = title
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        displayOrder = try container.decodeIfPresent("display_order")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        title = try container.decodeIfPresent("title")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(displayOrder, forKey: "display_order")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
