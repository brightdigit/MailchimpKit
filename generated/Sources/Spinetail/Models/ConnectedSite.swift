//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific connected site. */
public struct ConnectedSite: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The date and time the connected site was created in ISO 8601 format. */
    public var createdAt: DateTime?

    /** The connected site domain. */
    public var domain: String?

    /** The unique identifier for the site. */
    public var foreignId: String?

    /** The platform of the connected site. */
    public var platform: String?

    public var siteScript: Script?

    /** The unique identifier for the ecommerce store that's associated with the connected site (if any). The store_id for a specific connected site can't change. */
    public var storeId: String?

    /** The date and time the connected site was last updated in ISO 8601 format. */
    public var updatedAt: DateTime?

    public init(links: [ResourceLink]? = nil, createdAt: DateTime? = nil, domain: String? = nil, foreignId: String? = nil, platform: String? = nil, siteScript: Script? = nil, storeId: String? = nil, updatedAt: DateTime? = nil) {
        self.links = links
        self.createdAt = createdAt
        self.domain = domain
        self.foreignId = foreignId
        self.platform = platform
        self.siteScript = siteScript
        self.storeId = storeId
        self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        createdAt = try container.decodeIfPresent("created_at")
        domain = try container.decodeIfPresent("domain")
        foreignId = try container.decodeIfPresent("foreign_id")
        platform = try container.decodeIfPresent("platform")
        siteScript = try container.decodeIfPresent("site_script")
        storeId = try container.decodeIfPresent("store_id")
        updatedAt = try container.decodeIfPresent("updated_at")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(domain, forKey: "domain")
        try container.encodeIfPresent(foreignId, forKey: "foreign_id")
        try container.encodeIfPresent(platform, forKey: "platform")
        try container.encodeIfPresent(siteScript, forKey: "site_script")
        try container.encodeIfPresent(storeId, forKey: "store_id")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

}
