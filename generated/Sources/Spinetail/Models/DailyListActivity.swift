//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** One day's worth of list activity. Doesn't include Automation activity. */
public struct DailyListActivity: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The date for the activity summary. */
    public var day: String?

    /** The total number of emails sent on the date for the activity summary. */
    public var emailsSent: Int?

    /** The number of hard bounces. */
    public var hardBounce: Int?

    /** The number of subscribers who may have been added outside of the [double opt-in process](https://mailchimp.com/help/about-double-opt-in/), such as imports or API activity. */
    public var otherAdds: Int?

    /** The number of subscribers who may have been removed outside of unsubscribing or reporting an email as spam (for example, deleted subscribers). */
    public var otherRemoves: Int?

    /** The number of clicks. */
    public var recipientClicks: Int?

    /** The number of soft bounces */
    public var softBounce: Int?

    /** The number of subscribes. */
    public var subs: Int?

    /** The number of unique opens. */
    public var uniqueOpens: Int?

    /** The number of unsubscribes. */
    public var unsubs: Int?

    public init(links: [ResourceLink]? = nil, day: String? = nil, emailsSent: Int? = nil, hardBounce: Int? = nil, otherAdds: Int? = nil, otherRemoves: Int? = nil, recipientClicks: Int? = nil, softBounce: Int? = nil, subs: Int? = nil, uniqueOpens: Int? = nil, unsubs: Int? = nil) {
        self.links = links
        self.day = day
        self.emailsSent = emailsSent
        self.hardBounce = hardBounce
        self.otherAdds = otherAdds
        self.otherRemoves = otherRemoves
        self.recipientClicks = recipientClicks
        self.softBounce = softBounce
        self.subs = subs
        self.uniqueOpens = uniqueOpens
        self.unsubs = unsubs
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        day = try container.decodeIfPresent("day")
        emailsSent = try container.decodeIfPresent("emails_sent")
        hardBounce = try container.decodeIfPresent("hard_bounce")
        otherAdds = try container.decodeIfPresent("other_adds")
        otherRemoves = try container.decodeIfPresent("other_removes")
        recipientClicks = try container.decodeIfPresent("recipient_clicks")
        softBounce = try container.decodeIfPresent("soft_bounce")
        subs = try container.decodeIfPresent("subs")
        uniqueOpens = try container.decodeIfPresent("unique_opens")
        unsubs = try container.decodeIfPresent("unsubs")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(day, forKey: "day")
        try container.encodeIfPresent(emailsSent, forKey: "emails_sent")
        try container.encodeIfPresent(hardBounce, forKey: "hard_bounce")
        try container.encodeIfPresent(otherAdds, forKey: "other_adds")
        try container.encodeIfPresent(otherRemoves, forKey: "other_removes")
        try container.encodeIfPresent(recipientClicks, forKey: "recipient_clicks")
        try container.encodeIfPresent(softBounce, forKey: "soft_bounce")
        try container.encodeIfPresent(subs, forKey: "subs")
        try container.encodeIfPresent(uniqueOpens, forKey: "unique_opens")
        try container.encodeIfPresent(unsubs, forKey: "unsubs")
    }

}
