//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A single email domain's performance */
public struct EmailDomain: Codable, Equatable, Content {

    /** The number of bounces at a domain. */
    public var bounces: Int?

    /** The percentage of total bounces from this domain. */
    public var bouncesPct: Double?

    /** The number of clicks for a domain. */
    public var clicks: Int?

    /** The percentage of total clicks from this domain. */
    public var clicksPct: Double?

    /** The number of successful deliveries for a domain. */
    public var delivered: Int?

    /** The name of the domain (gmail.com, hotmail.com, yahoo.com). */
    public var domain: String?

    /** The percentage of total emails that went to this domain. */
    public var emailsPct: Double?

    /** The number of emails sent to that specific domain. */
    public var emailsSent: Int?

    /** The number of opens for a domain. */
    public var opens: Int?

    /** The percentage of total opens from this domain. */
    public var opensPct: Double?

    /** The total number of unsubscribes for a domain. */
    public var unsubs: Int?

    /** The percentage of total unsubscribes from this domain. */
    public var unsubsPct: Double?

    public init(bounces: Int? = nil, bouncesPct: Double? = nil, clicks: Int? = nil, clicksPct: Double? = nil, delivered: Int? = nil, domain: String? = nil, emailsPct: Double? = nil, emailsSent: Int? = nil, opens: Int? = nil, opensPct: Double? = nil, unsubs: Int? = nil, unsubsPct: Double? = nil) {
        self.bounces = bounces
        self.bouncesPct = bouncesPct
        self.clicks = clicks
        self.clicksPct = clicksPct
        self.delivered = delivered
        self.domain = domain
        self.emailsPct = emailsPct
        self.emailsSent = emailsSent
        self.opens = opens
        self.opensPct = opensPct
        self.unsubs = unsubs
        self.unsubsPct = unsubsPct
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bounces = try container.decodeIfPresent("bounces")
        bouncesPct = try container.decodeIfPresent("bounces_pct")
        clicks = try container.decodeIfPresent("clicks")
        clicksPct = try container.decodeIfPresent("clicks_pct")
        delivered = try container.decodeIfPresent("delivered")
        domain = try container.decodeIfPresent("domain")
        emailsPct = try container.decodeIfPresent("emails_pct")
        emailsSent = try container.decodeIfPresent("emails_sent")
        opens = try container.decodeIfPresent("opens")
        opensPct = try container.decodeIfPresent("opens_pct")
        unsubs = try container.decodeIfPresent("unsubs")
        unsubsPct = try container.decodeIfPresent("unsubs_pct")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bounces, forKey: "bounces")
        try container.encodeIfPresent(bouncesPct, forKey: "bounces_pct")
        try container.encodeIfPresent(clicks, forKey: "clicks")
        try container.encodeIfPresent(clicksPct, forKey: "clicks_pct")
        try container.encodeIfPresent(delivered, forKey: "delivered")
        try container.encodeIfPresent(domain, forKey: "domain")
        try container.encodeIfPresent(emailsPct, forKey: "emails_pct")
        try container.encodeIfPresent(emailsSent, forKey: "emails_sent")
        try container.encodeIfPresent(opens, forKey: "opens")
        try container.encodeIfPresent(opensPct, forKey: "opens_pct")
        try container.encodeIfPresent(unsubs, forKey: "unsubs")
        try container.encodeIfPresent(unsubsPct, forKey: "unsubs_pct")
    }

}
