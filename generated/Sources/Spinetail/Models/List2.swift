//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** List settings for the campaign. */
public struct List2: Codable, Equatable, Content {

    /** The unique list id. */
    public var listId: String?

    /** The status of the list used, namely if it's deleted or disabled. */
    public var listIsActive: Bool?

    /** The name of the list. */
    public var listName: String?

    /** Count of the recipients on the associated list. Formatted as an integer. */
    public var recipientCount: Int?

    public var segmentOpts: SegmentOptions1?

    /** A description of the [segment](https://mailchimp.com/help/getting-started-with-groups/) used for the campaign. Formatted as a string marked up with HTML. */
    public var segmentText: String?

    public init(listId: String? = nil, listIsActive: Bool? = nil, listName: String? = nil, recipientCount: Int? = nil, segmentOpts: SegmentOptions1? = nil, segmentText: String? = nil) {
        self.listId = listId
        self.listIsActive = listIsActive
        self.listName = listName
        self.recipientCount = recipientCount
        self.segmentOpts = segmentOpts
        self.segmentText = segmentText
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        listId = try container.decodeIfPresent("list_id")
        listIsActive = try container.decodeIfPresent("list_is_active")
        listName = try container.decodeIfPresent("list_name")
        recipientCount = try container.decodeIfPresent("recipient_count")
        segmentOpts = try container.decodeIfPresent("segment_opts")
        segmentText = try container.decodeIfPresent("segment_text")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(listIsActive, forKey: "list_is_active")
        try container.encodeIfPresent(listName, forKey: "list_name")
        try container.encodeIfPresent(recipientCount, forKey: "recipient_count")
        try container.encodeIfPresent(segmentOpts, forKey: "segment_opts")
        try container.encodeIfPresent(segmentText, forKey: "segment_text")
    }

}
