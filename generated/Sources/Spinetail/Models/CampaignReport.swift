//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Report details about a sent campaign. */
public struct CampaignReport: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    public var abSplit: ABSplitStats?

    /** The number of abuse reports generated for this campaign. */
    public var abuseReports: Int?

    public var bounces: Bounces?

    /** The title of the campaign. */
    public var campaignTitle: String?

    public var clicks: Clicks?

    public var deliveryStatus: CampaignDeliveryStatus?

    public var ecommerce: ECommerceReport1?

    /** The total number of emails sent for this campaign. */
    public var emailsSent: Int?

    public var facebookLikes: FacebookLikes?

    public var forwards: Forwards?

    /** A string that uniquely identifies this campaign. */
    public var id: String?

    public var industryStats: IndustryStats1?

    /** The unique list id. */
    public var listId: String?

    /** The status of the list used, namely if it's deleted or disabled. */
    public var listIsActive: Bool?

    /** The name of the list. */
    public var listName: String?

    public var listStats: ListStats?

    public var opens: Opens?

    /** The preview text for the campaign. */
    public var previewText: String?

    /** For RSS campaigns, the date and time of the last send in ISO 8601 format. */
    public var rssLastSend: DateTime?

    /** The date and time a campaign was sent in ISO 8601 format. */
    public var sendTime: DateTime?

    public var shareReport: ShareReport?

    /** The subject line for the campaign. */
    public var subjectLine: String?

    /** An hourly breakdown of the performance of the campaign over the first 24 hours. */
    public var timeseries: [TimeseriesInner]?

    /** An hourly breakdown of sends, opens, and clicks if a campaign is sent using timewarp. */
    public var timewarp: [TimewarpStatsInner]?

    /** The type of campaign (regular, plain-text, ab_split, rss, automation, variate, or auto). */
    public var type: String?

    /** The total number of unsubscribed members for this campaign. */
    public var unsubscribed: Int?

    public init(links: [ResourceLink]? = nil, abSplit: ABSplitStats? = nil, abuseReports: Int? = nil, bounces: Bounces? = nil, campaignTitle: String? = nil, clicks: Clicks? = nil, deliveryStatus: CampaignDeliveryStatus? = nil, ecommerce: ECommerceReport1? = nil, emailsSent: Int? = nil, facebookLikes: FacebookLikes? = nil, forwards: Forwards? = nil, id: String? = nil, industryStats: IndustryStats1? = nil, listId: String? = nil, listIsActive: Bool? = nil, listName: String? = nil, listStats: ListStats? = nil, opens: Opens? = nil, previewText: String? = nil, rssLastSend: DateTime? = nil, sendTime: DateTime? = nil, shareReport: ShareReport? = nil, subjectLine: String? = nil, timeseries: [TimeseriesInner]? = nil, timewarp: [TimewarpStatsInner]? = nil, type: String? = nil, unsubscribed: Int? = nil) {
        self.links = links
        self.abSplit = abSplit
        self.abuseReports = abuseReports
        self.bounces = bounces
        self.campaignTitle = campaignTitle
        self.clicks = clicks
        self.deliveryStatus = deliveryStatus
        self.ecommerce = ecommerce
        self.emailsSent = emailsSent
        self.facebookLikes = facebookLikes
        self.forwards = forwards
        self.id = id
        self.industryStats = industryStats
        self.listId = listId
        self.listIsActive = listIsActive
        self.listName = listName
        self.listStats = listStats
        self.opens = opens
        self.previewText = previewText
        self.rssLastSend = rssLastSend
        self.sendTime = sendTime
        self.shareReport = shareReport
        self.subjectLine = subjectLine
        self.timeseries = timeseries
        self.timewarp = timewarp
        self.type = type
        self.unsubscribed = unsubscribed
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        abSplit = try container.decodeIfPresent("ab_split")
        abuseReports = try container.decodeIfPresent("abuse_reports")
        bounces = try container.decodeIfPresent("bounces")
        campaignTitle = try container.decodeIfPresent("campaign_title")
        clicks = try container.decodeIfPresent("clicks")
        deliveryStatus = try container.decodeIfPresent("delivery_status")
        ecommerce = try container.decodeIfPresent("ecommerce")
        emailsSent = try container.decodeIfPresent("emails_sent")
        facebookLikes = try container.decodeIfPresent("facebook_likes")
        forwards = try container.decodeIfPresent("forwards")
        id = try container.decodeIfPresent("id")
        industryStats = try container.decodeIfPresent("industry_stats")
        listId = try container.decodeIfPresent("list_id")
        listIsActive = try container.decodeIfPresent("list_is_active")
        listName = try container.decodeIfPresent("list_name")
        listStats = try container.decodeIfPresent("list_stats")
        opens = try container.decodeIfPresent("opens")
        previewText = try container.decodeIfPresent("preview_text")
        rssLastSend = try container.decodeIfPresent("rss_last_send")
        sendTime = try container.decodeIfPresent("send_time")
        shareReport = try container.decodeIfPresent("share_report")
        subjectLine = try container.decodeIfPresent("subject_line")
        timeseries = try container.decodeArrayIfPresent("timeseries")
        timewarp = try container.decodeArrayIfPresent("timewarp")
        type = try container.decodeIfPresent("type")
        unsubscribed = try container.decodeIfPresent("unsubscribed")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(abSplit, forKey: "ab_split")
        try container.encodeIfPresent(abuseReports, forKey: "abuse_reports")
        try container.encodeIfPresent(bounces, forKey: "bounces")
        try container.encodeIfPresent(campaignTitle, forKey: "campaign_title")
        try container.encodeIfPresent(clicks, forKey: "clicks")
        try container.encodeIfPresent(deliveryStatus, forKey: "delivery_status")
        try container.encodeIfPresent(ecommerce, forKey: "ecommerce")
        try container.encodeIfPresent(emailsSent, forKey: "emails_sent")
        try container.encodeIfPresent(facebookLikes, forKey: "facebook_likes")
        try container.encodeIfPresent(forwards, forKey: "forwards")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(industryStats, forKey: "industry_stats")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(listIsActive, forKey: "list_is_active")
        try container.encodeIfPresent(listName, forKey: "list_name")
        try container.encodeIfPresent(listStats, forKey: "list_stats")
        try container.encodeIfPresent(opens, forKey: "opens")
        try container.encodeIfPresent(previewText, forKey: "preview_text")
        try container.encodeIfPresent(rssLastSend, forKey: "rss_last_send")
        try container.encodeIfPresent(sendTime, forKey: "send_time")
        try container.encodeIfPresent(shareReport, forKey: "share_report")
        try container.encodeIfPresent(subjectLine, forKey: "subject_line")
        try container.encodeIfPresent(timeseries, forKey: "timeseries")
        try container.encodeIfPresent(timewarp, forKey: "timewarp")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(unsubscribed, forKey: "unsubscribed")
    }

}
