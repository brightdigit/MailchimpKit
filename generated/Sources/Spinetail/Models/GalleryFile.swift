//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** An individual file listed in the File Manager. */
public struct GalleryFile: Codable, Equatable, Content {

    /** The type of file in the File Manager. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case image = "image"
        case file = "file"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The date and time a file was added to the File Manager in ISO 8601 format. */
    public var createdAt: DateTime?

    /** The username of the profile that uploaded the file. */
    public var createdBy: String?

    /** The id of the folder. */
    public var folderId: Int?

    /** The url of the full-size file. */
    public var fullSizeURL: URL?

    /** The height of an image. */
    public var height: Int?

    /** The unique id of the file. */
    public var id: Int?

    /** The name of the file. */
    public var name: String?

    /** The size of the file in bytes. */
    public var size: Int?

    /** The url of the thumbnail preview. */
    public var thumbnailURL: URL?

    /** The type of file in the File Manager. */
    public var type: `Type`?

    /** The width of the image. */
    public var width: Int?

    public init(links: [ResourceLink]? = nil, createdAt: DateTime? = nil, createdBy: String? = nil, folderId: Int? = nil, fullSizeURL: URL? = nil, height: Int? = nil, id: Int? = nil, name: String? = nil, size: Int? = nil, thumbnailURL: URL? = nil, type: `Type`? = nil, width: Int? = nil) {
        self.links = links
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.folderId = folderId
        self.fullSizeURL = fullSizeURL
        self.height = height
        self.id = id
        self.name = name
        self.size = size
        self.thumbnailURL = thumbnailURL
        self.type = type
        self.width = width
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        createdAt = try container.decodeIfPresent("created_at")
        createdBy = try container.decodeIfPresent("created_by")
        folderId = try container.decodeIfPresent("folder_id")
        fullSizeURL = try container.decodeIfPresent("full_size_url")
        height = try container.decodeIfPresent("height")
        id = try container.decodeIfPresent("id")
        name = try container.decodeIfPresent("name")
        size = try container.decodeIfPresent("size")
        thumbnailURL = try container.decodeIfPresent("thumbnail_url")
        type = try container.decodeIfPresent("type")
        width = try container.decodeIfPresent("width")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(createdBy, forKey: "created_by")
        try container.encodeIfPresent(folderId, forKey: "folder_id")
        try container.encodeIfPresent(fullSizeURL, forKey: "full_size_url")
        try container.encodeIfPresent(height, forKey: "height")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(size, forKey: "size")
        try container.encodeIfPresent(thumbnailURL, forKey: "thumbnail_url")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(width, forKey: "width")
    }

}
