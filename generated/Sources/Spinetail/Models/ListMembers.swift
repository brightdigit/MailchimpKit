//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed. */
public struct ListMembers: Codable, Equatable, Content {

    /** Subscriber's current status. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case subscribed = "subscribed"
        case unsubscribed = "unsubscribed"
        case cleaned = "cleaned"
        case pending = "pending"
        case transactional = "transactional"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** Email address for a subscriber. */
    public var emailAddress: String?

    /** The list member's email client. */
    public var emailClient: String?

    /** Type of email this member asked to get ('html' or 'text'). */
    public var emailType: String?

    /** The MD5 hash of the lowercase version of the list member's email address. */
    public var id: String?

    /** The key of this object's properties is the ID of the interest in question. */
    public var interests: [String: Bool]?

    /** The IP address the subscriber used to confirm their opt-in status. */
    public var ipOpt: String?

    /** IP address the subscriber signed up from. */
    public var ipSignup: String?

    /** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
    public var language: String?

    /** The date and time the member's info was last changed in ISO 8601 format. */
    public var lastChanged: DateTime?

    public var lastNote: Notes?

    /** The list id. */
    public var listId: String?

    public var location: Location1?

    /** Star rating for this member, between 1 and 5. */
    public var memberRating: Int?

    /** An individual merge var and value for a member. */
    public var mergeFields: [String: [String: Any]]?

    public var stats: SubscriberStats?

    /** Subscriber's current status. */
    public var status: Status?

    /** The tags applied to this member. */
    public var tags: [TagsInner]?

    /** The number of tags applied to this member. */
    public var tagsCount: Int?

    /** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
    public var timestampOpt: DateTime?

    /** The date and time the subscriber signed up for the list in ISO 8601 format. */
    public var timestampSignup: DateTime?

    /** An identifier for the address across all of Mailchimp. */
    public var uniqueEmailId: String?

    /** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
    public var vip: Bool?

    public init(links: [ResourceLink]? = nil, emailAddress: String? = nil, emailClient: String? = nil, emailType: String? = nil, id: String? = nil, interests: [String: Bool]? = nil, ipOpt: String? = nil, ipSignup: String? = nil, language: String? = nil, lastChanged: DateTime? = nil, lastNote: Notes? = nil, listId: String? = nil, location: Location1? = nil, memberRating: Int? = nil, mergeFields: [String: [String: Any]]? = nil, stats: SubscriberStats? = nil, status: Status? = nil, tags: [TagsInner]? = nil, tagsCount: Int? = nil, timestampOpt: DateTime? = nil, timestampSignup: DateTime? = nil, uniqueEmailId: String? = nil, vip: Bool? = nil) {
        self.links = links
        self.emailAddress = emailAddress
        self.emailClient = emailClient
        self.emailType = emailType
        self.id = id
        self.interests = interests
        self.ipOpt = ipOpt
        self.ipSignup = ipSignup
        self.language = language
        self.lastChanged = lastChanged
        self.lastNote = lastNote
        self.listId = listId
        self.location = location
        self.memberRating = memberRating
        self.mergeFields = mergeFields
        self.stats = stats
        self.status = status
        self.tags = tags
        self.tagsCount = tagsCount
        self.timestampOpt = timestampOpt
        self.timestampSignup = timestampSignup
        self.uniqueEmailId = uniqueEmailId
        self.vip = vip
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        emailAddress = try container.decodeIfPresent("email_address")
        emailClient = try container.decodeIfPresent("email_client")
        emailType = try container.decodeIfPresent("email_type")
        id = try container.decodeIfPresent("id")
        interests = try container.decodeIfPresent("interests")
        ipOpt = try container.decodeIfPresent("ip_opt")
        ipSignup = try container.decodeIfPresent("ip_signup")
        language = try container.decodeIfPresent("language")
        lastChanged = try container.decodeIfPresent("last_changed")
        lastNote = try container.decodeIfPresent("last_note")
        listId = try container.decodeIfPresent("list_id")
        location = try container.decodeIfPresent("location")
        memberRating = try container.decodeIfPresent("member_rating")
        mergeFields = try container.decodeAnyIfPresent("merge_fields")
        stats = try container.decodeIfPresent("stats")
        status = try container.decodeIfPresent("status")
        tags = try container.decodeArrayIfPresent("tags")
        tagsCount = try container.decodeIfPresent("tags_count")
        timestampOpt = try container.decodeIfPresent("timestamp_opt")
        timestampSignup = try container.decodeIfPresent("timestamp_signup")
        uniqueEmailId = try container.decodeIfPresent("unique_email_id")
        vip = try container.decodeIfPresent("vip")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(emailAddress, forKey: "email_address")
        try container.encodeIfPresent(emailClient, forKey: "email_client")
        try container.encodeIfPresent(emailType, forKey: "email_type")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(interests, forKey: "interests")
        try container.encodeIfPresent(ipOpt, forKey: "ip_opt")
        try container.encodeIfPresent(ipSignup, forKey: "ip_signup")
        try container.encodeIfPresent(language, forKey: "language")
        try container.encodeIfPresent(lastChanged, forKey: "last_changed")
        try container.encodeIfPresent(lastNote, forKey: "last_note")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(memberRating, forKey: "member_rating")
        try container.encodeAnyIfPresent(mergeFields, forKey: "merge_fields")
        try container.encodeIfPresent(stats, forKey: "stats")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(tags, forKey: "tags")
        try container.encodeIfPresent(tagsCount, forKey: "tags_count")
        try container.encodeIfPresent(timestampOpt, forKey: "timestamp_opt")
        try container.encodeIfPresent(timestampSignup, forKey: "timestamp_signup")
        try container.encodeIfPresent(uniqueEmailId, forKey: "unique_email_id")
        try container.encodeIfPresent(vip, forKey: "vip")
    }

}
