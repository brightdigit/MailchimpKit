//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct GetAllFacebookAds200ResponseFacebookAdsInnerAllOfReportSummary: Codable, Equatable, Content {

    public var clickRate: Double?

    public var clicks: Int?

    public var conversionRate: Double?

    public var ecommerce: GetAllFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryEcommerce?

    public var engagements: Int?

    public var impressions: Double?

    public var openRate: Double?

    public var opens: Int?

    public var reach: Int?

    public var subscriberClicks: Int?

    public var subscribes: Int?

    public var totalSent: Int?

    public var uniqueOpens: Int?

    public var uniqueVisits: Int?

    public var visits: Int?

    public init(clickRate: Double? = nil, clicks: Int? = nil, conversionRate: Double? = nil, ecommerce: GetAllFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryEcommerce? = nil, engagements: Int? = nil, impressions: Double? = nil, openRate: Double? = nil, opens: Int? = nil, reach: Int? = nil, subscriberClicks: Int? = nil, subscribes: Int? = nil, totalSent: Int? = nil, uniqueOpens: Int? = nil, uniqueVisits: Int? = nil, visits: Int? = nil) {
        self.clickRate = clickRate
        self.clicks = clicks
        self.conversionRate = conversionRate
        self.ecommerce = ecommerce
        self.engagements = engagements
        self.impressions = impressions
        self.openRate = openRate
        self.opens = opens
        self.reach = reach
        self.subscriberClicks = subscriberClicks
        self.subscribes = subscribes
        self.totalSent = totalSent
        self.uniqueOpens = uniqueOpens
        self.uniqueVisits = uniqueVisits
        self.visits = visits
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        clickRate = try container.decodeIfPresent("click_rate")
        clicks = try container.decodeIfPresent("clicks")
        conversionRate = try container.decodeIfPresent("conversion_rate")
        ecommerce = try container.decodeIfPresent("ecommerce")
        engagements = try container.decodeIfPresent("engagements")
        impressions = try container.decodeIfPresent("impressions")
        openRate = try container.decodeIfPresent("open_rate")
        opens = try container.decodeIfPresent("opens")
        reach = try container.decodeIfPresent("reach")
        subscriberClicks = try container.decodeIfPresent("subscriber_clicks")
        subscribes = try container.decodeIfPresent("subscribes")
        totalSent = try container.decodeIfPresent("total_sent")
        uniqueOpens = try container.decodeIfPresent("unique_opens")
        uniqueVisits = try container.decodeIfPresent("unique_visits")
        visits = try container.decodeIfPresent("visits")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(clickRate, forKey: "click_rate")
        try container.encodeIfPresent(clicks, forKey: "clicks")
        try container.encodeIfPresent(conversionRate, forKey: "conversion_rate")
        try container.encodeIfPresent(ecommerce, forKey: "ecommerce")
        try container.encodeIfPresent(engagements, forKey: "engagements")
        try container.encodeIfPresent(impressions, forKey: "impressions")
        try container.encodeIfPresent(openRate, forKey: "open_rate")
        try container.encodeIfPresent(opens, forKey: "opens")
        try container.encodeIfPresent(reach, forKey: "reach")
        try container.encodeIfPresent(subscriberClicks, forKey: "subscriber_clicks")
        try container.encodeIfPresent(subscribes, forKey: "subscribes")
        try container.encodeIfPresent(totalSent, forKey: "total_sent")
        try container.encodeIfPresent(uniqueOpens, forKey: "unique_opens")
        try container.encodeIfPresent(uniqueVisits, forKey: "unique_visits")
        try container.encodeIfPresent(visits, forKey: "visits")
    }

}
