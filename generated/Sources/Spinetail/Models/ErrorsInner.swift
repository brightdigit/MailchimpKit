//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct ErrorsInner: Codable, Equatable, Content {

    /** A unique code that identifies this specifc error. */
    public enum ErrorCode: String, Codable, Equatable, CaseIterable {
        case errorContactExists = "ERROR_CONTACT_EXISTS"
        case errorGeneric = "ERROR_GENERIC"
    }

    /** The email address that could not be added or updated. */
    public var emailAddress: String?

    /** The error message indicating why the email address could not be added or updated. */
    public var error: String?

    /** A unique code that identifies this specifc error. */
    public var errorCode: ErrorCode?

    /** If the error is field-related, information about which field is at issue. */
    public var field: String?

    /** Message indicating how to resolve a field-related error. */
    public var fieldMessage: String?

    public init(emailAddress: String? = nil, error: String? = nil, errorCode: ErrorCode? = nil, field: String? = nil, fieldMessage: String? = nil) {
        self.emailAddress = emailAddress
        self.error = error
        self.errorCode = errorCode
        self.field = field
        self.fieldMessage = fieldMessage
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        emailAddress = try container.decodeIfPresent("email_address")
        error = try container.decodeIfPresent("error")
        errorCode = try container.decodeIfPresent("error_code")
        field = try container.decodeIfPresent("field")
        fieldMessage = try container.decodeIfPresent("field_message")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(emailAddress, forKey: "email_address")
        try container.encodeIfPresent(error, forKey: "error")
        try container.encodeIfPresent(errorCode, forKey: "error_code")
        try container.encodeIfPresent(field, forKey: "field")
        try container.encodeIfPresent(fieldMessage, forKey: "field_message")
    }

}
