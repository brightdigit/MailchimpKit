//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about the contact. */
public struct Contact: Codable, Equatable, Content {

    /** The contact's current status. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case subscribed = "Subscribed"
        case unsubscribed = "Unsubscribed"
        case nonSubscribed = "Non-Subscribed"
        case cleaned = "Cleaned"
        case archived = "Archived"
    }

    /** URL for the contact's avatar or profile image. */
    public var avatarURL: String?

    /** Indicates whether a contact consents to 1:1 messaging. */
    public var consentsToOneToOneMessaging: Bool?

    /** The ID of this contact. */
    public var contactId: String?

    /** The contact's email address. */
    public var email: String?

    /** The MD5 hash of the lowercase version of the list member's email address. */
    public var emailId: String?

    /** The contact's full name. */
    public var fullName: String?

    /** The contact's current status. */
    public var status: Status?

    public init(avatarURL: String? = nil, consentsToOneToOneMessaging: Bool? = nil, contactId: String? = nil, email: String? = nil, emailId: String? = nil, fullName: String? = nil, status: Status? = nil) {
        self.avatarURL = avatarURL
        self.consentsToOneToOneMessaging = consentsToOneToOneMessaging
        self.contactId = contactId
        self.email = email
        self.emailId = emailId
        self.fullName = fullName
        self.status = status
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        avatarURL = try container.decodeIfPresent("avatar_url")
        consentsToOneToOneMessaging = try container.decodeIfPresent("consents_to_one_to_one_messaging")
        contactId = try container.decodeIfPresent("contact_id")
        email = try container.decodeIfPresent("email")
        emailId = try container.decodeIfPresent("email_id")
        fullName = try container.decodeIfPresent("full_name")
        status = try container.decodeIfPresent("status")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(avatarURL, forKey: "avatar_url")
        try container.encodeIfPresent(consentsToOneToOneMessaging, forKey: "consents_to_one_to_one_messaging")
        try container.encodeIfPresent(contactId, forKey: "contact_id")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(emailId, forKey: "email_id")
        try container.encodeIfPresent(fullName, forKey: "full_name")
        try container.encodeIfPresent(status, forKey: "status")
    }

}
