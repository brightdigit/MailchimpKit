//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific list. */
public struct SubscriberList: Codable, Equatable, Content {

    /** Legacy - visibility settings are no longer used */
    public enum Visibility: String, Codable, Equatable, CaseIterable {
        case pub = "pub"
        case prv = "prv"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The list's [Email Beamer](https://mailchimp.com/help/use-email-beamer-to-create-a-campaign/) address. */
    public var beamerAddress: String?

    public var campaignDefaults: CampaignDefaults?

    public var contact: ListContact?

    /** The date and time that this list was created in ISO 8601 format. */
    public var dateCreated: DateTime?

    /** Whether or not to require the subscriber to confirm subscription via email. */
    public var doubleOptin: Bool?

    /** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
    public var emailTypeOption: Bool?

    /** Whether or not this list has a welcome automation connected. Welcome Automations: welcomeSeries, singleWelcome, emailFollowup. */
    public var hasWelcome: Bool?

    /** A string that uniquely identifies this list. */
    public var id: String?

    /** An auto-generated activity score for the list (0-5). */
    public var listRating: Int?

    /** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
    public var marketingPermissions: Bool?

    /** Any list-specific modules installed for this list. */
    public var modules: [String]?

    /** The name of the list. */
    public var name: String?

    /** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
    public var notifyOnSubscribe: String?

    /** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
    public var notifyOnUnsubscribe: String?

    /** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
    public var permissionReminder: String?

    public var stats: Statistics?

    /** The full version of this list's subscribe form (host will vary). */
    public var subscribeURLLong: String?

    /** Our [url shortened](https://mailchimp.com/help/share-your-signup-form/) version of this list's subscribe form. */
    public var subscribeURLShort: String?

    /** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
    public var useArchiveBar: Bool?

    /** Legacy - visibility settings are no longer used */
    public var visibility: Visibility?

    /** The ID used in the Mailchimp web application. View this list in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/members/?id={web_id}`. */
    public var webId: Int?

    public init(links: [ResourceLink]? = nil, beamerAddress: String? = nil, campaignDefaults: CampaignDefaults? = nil, contact: ListContact? = nil, dateCreated: DateTime? = nil, doubleOptin: Bool? = nil, emailTypeOption: Bool? = nil, hasWelcome: Bool? = nil, id: String? = nil, listRating: Int? = nil, marketingPermissions: Bool? = nil, modules: [String]? = nil, name: String? = nil, notifyOnSubscribe: String? = nil, notifyOnUnsubscribe: String? = nil, permissionReminder: String? = nil, stats: Statistics? = nil, subscribeURLLong: String? = nil, subscribeURLShort: String? = nil, useArchiveBar: Bool? = nil, visibility: Visibility? = nil, webId: Int? = nil) {
        self.links = links
        self.beamerAddress = beamerAddress
        self.campaignDefaults = campaignDefaults
        self.contact = contact
        self.dateCreated = dateCreated
        self.doubleOptin = doubleOptin
        self.emailTypeOption = emailTypeOption
        self.hasWelcome = hasWelcome
        self.id = id
        self.listRating = listRating
        self.marketingPermissions = marketingPermissions
        self.modules = modules
        self.name = name
        self.notifyOnSubscribe = notifyOnSubscribe
        self.notifyOnUnsubscribe = notifyOnUnsubscribe
        self.permissionReminder = permissionReminder
        self.stats = stats
        self.subscribeURLLong = subscribeURLLong
        self.subscribeURLShort = subscribeURLShort
        self.useArchiveBar = useArchiveBar
        self.visibility = visibility
        self.webId = webId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        beamerAddress = try container.decodeIfPresent("beamer_address")
        campaignDefaults = try container.decodeIfPresent("campaign_defaults")
        contact = try container.decodeIfPresent("contact")
        dateCreated = try container.decodeIfPresent("date_created")
        doubleOptin = try container.decodeIfPresent("double_optin")
        emailTypeOption = try container.decodeIfPresent("email_type_option")
        hasWelcome = try container.decodeIfPresent("has_welcome")
        id = try container.decodeIfPresent("id")
        listRating = try container.decodeIfPresent("list_rating")
        marketingPermissions = try container.decodeIfPresent("marketing_permissions")
        modules = try container.decodeArrayIfPresent("modules")
        name = try container.decodeIfPresent("name")
        notifyOnSubscribe = try container.decodeIfPresent("notify_on_subscribe")
        notifyOnUnsubscribe = try container.decodeIfPresent("notify_on_unsubscribe")
        permissionReminder = try container.decodeIfPresent("permission_reminder")
        stats = try container.decodeIfPresent("stats")
        subscribeURLLong = try container.decodeIfPresent("subscribe_url_long")
        subscribeURLShort = try container.decodeIfPresent("subscribe_url_short")
        useArchiveBar = try container.decodeIfPresent("use_archive_bar")
        visibility = try container.decodeIfPresent("visibility")
        webId = try container.decodeIfPresent("web_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(beamerAddress, forKey: "beamer_address")
        try container.encodeIfPresent(campaignDefaults, forKey: "campaign_defaults")
        try container.encodeIfPresent(contact, forKey: "contact")
        try container.encodeIfPresent(dateCreated, forKey: "date_created")
        try container.encodeIfPresent(doubleOptin, forKey: "double_optin")
        try container.encodeIfPresent(emailTypeOption, forKey: "email_type_option")
        try container.encodeIfPresent(hasWelcome, forKey: "has_welcome")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listRating, forKey: "list_rating")
        try container.encodeIfPresent(marketingPermissions, forKey: "marketing_permissions")
        try container.encodeIfPresent(modules, forKey: "modules")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(notifyOnSubscribe, forKey: "notify_on_subscribe")
        try container.encodeIfPresent(notifyOnUnsubscribe, forKey: "notify_on_unsubscribe")
        try container.encodeIfPresent(permissionReminder, forKey: "permission_reminder")
        try container.encodeIfPresent(stats, forKey: "stats")
        try container.encodeIfPresent(subscribeURLLong, forKey: "subscribe_url_long")
        try container.encodeIfPresent(subscribeURLShort, forKey: "subscribe_url_short")
        try container.encodeIfPresent(useArchiveBar, forKey: "use_archive_bar")
        try container.encodeIfPresent(visibility, forKey: "visibility")
        try container.encodeIfPresent(webId, forKey: "web_id")
    }

}
