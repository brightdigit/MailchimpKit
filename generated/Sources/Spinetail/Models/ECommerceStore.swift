//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** An individual store in an account. */
public struct ECommerceStore: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    public var address: Address1?

    public var automations: Automations?

    public var connectedSite: ConnectedSite2?

    /** The date and time the store was created in ISO 8601 format. */
    public var createdAt: DateTime?

    /** The three-letter ISO 4217 code for the currency that the store accepts. */
    public var currencyCode: String?

    /** The store domain.  The store domain must be unique within a user account. */
    public var domain: String?

    /** The email address for the store. */
    public var emailAddress: String?

    /** The unique identifier for the store. */
    public var id: String?

    /** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
    public var isSyncing: Bool?

    /** The unique identifier for the list that's associated with the store. The `list_id` for a specific store can't change. */
    public var listId: String?

    /** The status of the list connected to the store, namely if it's deleted or disabled. */
    public var listIsActive: Bool?

    /** The currency format for the store. For example: `$`, `Â£`, etc. */
    public var moneyFormat: String?

    /** The name of the store. */
    public var name: String?

    /** The store phone number. */
    public var phone: String?

    /** The e-commerce platform of the store. */
    public var platform: String?

    /** The primary locale for the store. For example: `en`, `de`, etc. */
    public var primaryLocale: String?

    /** The timezone for the store. */
    public var timezone: String?

    /** The date and time the store was last updated in ISO 8601 format. */
    public var updatedAt: DateTime?

    public init(links: [ResourceLink]? = nil, address: Address1? = nil, automations: Automations? = nil, connectedSite: ConnectedSite2? = nil, createdAt: DateTime? = nil, currencyCode: String? = nil, domain: String? = nil, emailAddress: String? = nil, id: String? = nil, isSyncing: Bool? = nil, listId: String? = nil, listIsActive: Bool? = nil, moneyFormat: String? = nil, name: String? = nil, phone: String? = nil, platform: String? = nil, primaryLocale: String? = nil, timezone: String? = nil, updatedAt: DateTime? = nil) {
        self.links = links
        self.address = address
        self.automations = automations
        self.connectedSite = connectedSite
        self.createdAt = createdAt
        self.currencyCode = currencyCode
        self.domain = domain
        self.emailAddress = emailAddress
        self.id = id
        self.isSyncing = isSyncing
        self.listId = listId
        self.listIsActive = listIsActive
        self.moneyFormat = moneyFormat
        self.name = name
        self.phone = phone
        self.platform = platform
        self.primaryLocale = primaryLocale
        self.timezone = timezone
        self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        address = try container.decodeIfPresent("address")
        automations = try container.decodeIfPresent("automations")
        connectedSite = try container.decodeIfPresent("connected_site")
        createdAt = try container.decodeIfPresent("created_at")
        currencyCode = try container.decodeIfPresent("currency_code")
        domain = try container.decodeIfPresent("domain")
        emailAddress = try container.decodeIfPresent("email_address")
        id = try container.decodeIfPresent("id")
        isSyncing = try container.decodeIfPresent("is_syncing")
        listId = try container.decodeIfPresent("list_id")
        listIsActive = try container.decodeIfPresent("list_is_active")
        moneyFormat = try container.decodeIfPresent("money_format")
        name = try container.decodeIfPresent("name")
        phone = try container.decodeIfPresent("phone")
        platform = try container.decodeIfPresent("platform")
        primaryLocale = try container.decodeIfPresent("primary_locale")
        timezone = try container.decodeIfPresent("timezone")
        updatedAt = try container.decodeIfPresent("updated_at")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(automations, forKey: "automations")
        try container.encodeIfPresent(connectedSite, forKey: "connected_site")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(currencyCode, forKey: "currency_code")
        try container.encodeIfPresent(domain, forKey: "domain")
        try container.encodeIfPresent(emailAddress, forKey: "email_address")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(isSyncing, forKey: "is_syncing")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(listIsActive, forKey: "list_is_active")
        try container.encodeIfPresent(moneyFormat, forKey: "money_format")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(phone, forKey: "phone")
        try container.encodeIfPresent(platform, forKey: "platform")
        try container.encodeIfPresent(primaryLocale, forKey: "primary_locale")
        try container.encodeIfPresent(timezone, forKey: "timezone")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

}
