//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A summary of an individual campaign's settings and content. */
public struct Campaign3: Codable, Equatable, Content {

    /** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case regular = "regular"
        case plaintext = "plaintext"
        case absplit = "absplit"
        case rss = "rss"
        case variate = "variate"
    }

    /** The current status of the campaign. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case save = "save"
        case paused = "paused"
        case schedule = "schedule"
        case sending = "sending"
        case sent = "sent"
        case canceled = "canceled"
        case canceling = "canceling"
        case archived = "archived"
    }

    /** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
    public var type: `Type`

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    public var abSplitOpts: ABTestingOptions?

    /** The link to the campaign's archive version. */
    public var archiveURL: String?

    /** How the campaign's content is put together ('template', 'drag_and_drop', 'html', 'url'). */
    public var contentType: String?

    /** The date and time the campaign was created in ISO 8601 format. */
    public var createTime: DateTime?

    public var deliveryStatus: CampaignDeliveryStatus?

    /** The total number of emails sent for this campaign. */
    public var emailsSent: Int?

    /** A string that uniquely identifies this campaign. */
    public var id: String?

    /** The original link to the campaign's archive version. */
    public var longArchiveURL: String?

    /** Determines if the campaign needs its blocks refreshed by opening the web-based campaign editor. Deprecated and will always return false. */
    public var needsBlockRefresh: Bool?

    /** If this campaign is the child of another campaign, this identifies the parent campaign. For Example, for RSS or Automation children. */
    public var parentCampaignId: String?

    public var recipients: List6?

    public var reportSummary: CampaignReportSummary3?

    /** Determines if the campaign qualifies to be resent to non-openers. */
    public var resendable: Bool?

    public var rssOpts: RSSOptions3?

    /** The date and time a campaign was sent in ISO 8601 format. */
    public var sendTime: DateTime?

    public var settings: CampaignSettings5?

    public var socialCard: CampaignSocialCard?

    /** The current status of the campaign. */
    public var status: Status?

    public var tracking: CampaignTrackingOptions1?

    public var variateSettings: ABTestOptions2?

    /** The ID used in the Mailchimp web application. View this campaign in your Mailchimp account at `https://{dc}.admin.mailchimp.com/campaigns/show/?id={web_id}`. */
    public var webId: Int?

    public init(type: `Type`, links: [ResourceLink]? = nil, abSplitOpts: ABTestingOptions? = nil, archiveURL: String? = nil, contentType: String? = nil, createTime: DateTime? = nil, deliveryStatus: CampaignDeliveryStatus? = nil, emailsSent: Int? = nil, id: String? = nil, longArchiveURL: String? = nil, needsBlockRefresh: Bool? = nil, parentCampaignId: String? = nil, recipients: List6? = nil, reportSummary: CampaignReportSummary3? = nil, resendable: Bool? = nil, rssOpts: RSSOptions3? = nil, sendTime: DateTime? = nil, settings: CampaignSettings5? = nil, socialCard: CampaignSocialCard? = nil, status: Status? = nil, tracking: CampaignTrackingOptions1? = nil, variateSettings: ABTestOptions2? = nil, webId: Int? = nil) {
        self.type = type
        self.links = links
        self.abSplitOpts = abSplitOpts
        self.archiveURL = archiveURL
        self.contentType = contentType
        self.createTime = createTime
        self.deliveryStatus = deliveryStatus
        self.emailsSent = emailsSent
        self.id = id
        self.longArchiveURL = longArchiveURL
        self.needsBlockRefresh = needsBlockRefresh
        self.parentCampaignId = parentCampaignId
        self.recipients = recipients
        self.reportSummary = reportSummary
        self.resendable = resendable
        self.rssOpts = rssOpts
        self.sendTime = sendTime
        self.settings = settings
        self.socialCard = socialCard
        self.status = status
        self.tracking = tracking
        self.variateSettings = variateSettings
        self.webId = webId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        type = try container.decode("type")
        links = try container.decodeArrayIfPresent("_links")
        abSplitOpts = try container.decodeIfPresent("ab_split_opts")
        archiveURL = try container.decodeIfPresent("archive_url")
        contentType = try container.decodeIfPresent("content_type")
        createTime = try container.decodeIfPresent("create_time")
        deliveryStatus = try container.decodeIfPresent("delivery_status")
        emailsSent = try container.decodeIfPresent("emails_sent")
        id = try container.decodeIfPresent("id")
        longArchiveURL = try container.decodeIfPresent("long_archive_url")
        needsBlockRefresh = try container.decodeIfPresent("needs_block_refresh")
        parentCampaignId = try container.decodeIfPresent("parent_campaign_id")
        recipients = try container.decodeIfPresent("recipients")
        reportSummary = try container.decodeIfPresent("report_summary")
        resendable = try container.decodeIfPresent("resendable")
        rssOpts = try container.decodeIfPresent("rss_opts")
        sendTime = try container.decodeIfPresent("send_time")
        settings = try container.decodeIfPresent("settings")
        socialCard = try container.decodeIfPresent("social_card")
        status = try container.decodeIfPresent("status")
        tracking = try container.decodeIfPresent("tracking")
        variateSettings = try container.decodeIfPresent("variate_settings")
        webId = try container.decodeIfPresent("web_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(abSplitOpts, forKey: "ab_split_opts")
        try container.encodeIfPresent(archiveURL, forKey: "archive_url")
        try container.encodeIfPresent(contentType, forKey: "content_type")
        try container.encodeIfPresent(createTime, forKey: "create_time")
        try container.encodeIfPresent(deliveryStatus, forKey: "delivery_status")
        try container.encodeIfPresent(emailsSent, forKey: "emails_sent")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(longArchiveURL, forKey: "long_archive_url")
        try container.encodeIfPresent(needsBlockRefresh, forKey: "needs_block_refresh")
        try container.encodeIfPresent(parentCampaignId, forKey: "parent_campaign_id")
        try container.encodeIfPresent(recipients, forKey: "recipients")
        try container.encodeIfPresent(reportSummary, forKey: "report_summary")
        try container.encodeIfPresent(resendable, forKey: "resendable")
        try container.encodeIfPresent(rssOpts, forKey: "rss_opts")
        try container.encodeIfPresent(sendTime, forKey: "send_time")
        try container.encodeIfPresent(settings, forKey: "settings")
        try container.encodeIfPresent(socialCard, forKey: "social_card")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(tracking, forKey: "tracking")
        try container.encodeIfPresent(variateSettings, forKey: "variate_settings")
        try container.encodeIfPresent(webId, forKey: "web_id")
    }

}
