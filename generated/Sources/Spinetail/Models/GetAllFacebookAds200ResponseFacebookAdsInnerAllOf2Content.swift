//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Content: Codable, Equatable, Content {

    public var attachments: [GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2ContentAttachmentsInner]?

    public var callToAction: String?

    public var description: String?

    public var imageURL: String?

    public var linkURL: String?

    public var message: String?

    public var title: String?

    public init(attachments: [GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2ContentAttachmentsInner]? = nil, callToAction: String? = nil, description: String? = nil, imageURL: String? = nil, linkURL: String? = nil, message: String? = nil, title: String? = nil) {
        self.attachments = attachments
        self.callToAction = callToAction
        self.description = description
        self.imageURL = imageURL
        self.linkURL = linkURL
        self.message = message
        self.title = title
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attachments = try container.decodeArrayIfPresent("attachments")
        callToAction = try container.decodeIfPresent("call_to_action")
        description = try container.decodeIfPresent("description")
        imageURL = try container.decodeIfPresent("image_url")
        linkURL = try container.decodeIfPresent("link_url")
        message = try container.decodeIfPresent("message")
        title = try container.decodeIfPresent("title")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attachments, forKey: "attachments")
        try container.encodeIfPresent(callToAction, forKey: "call_to_action")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(imageURL, forKey: "image_url")
        try container.encodeIfPresent(linkURL, forKey: "link_url")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(title, forKey: "title")
    }

}
