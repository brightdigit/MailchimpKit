//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Batch add/remove List members to/from static segment */
public struct BatchAddRemoveListMembersToFromStaticSegment: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The total number of items matching the query, irrespective of pagination. */
    public var errorCount: Int?

    /** An array of objects, each representing an array of email addresses that could not be added to the segment or removed and an error message providing more details. */
    public var errors: [ErrorsInner1]?

    /** An array of objects, each representing a new member that was added to the static segment. */
    public var membersAdded: [ListMembers]?

    /** An array of objects, each representing an existing list member that got deleted from the static segment. */
    public var membersRemoved: [ListMembers]?

    /** The total number of items matching the query, irrespective of pagination. */
    public var totalAdded: Int?

    /** The total number of items matching the query, irrespective of pagination. */
    public var totalRemoved: Int?

    public init(links: [ResourceLink]? = nil, errorCount: Int? = nil, errors: [ErrorsInner1]? = nil, membersAdded: [ListMembers]? = nil, membersRemoved: [ListMembers]? = nil, totalAdded: Int? = nil, totalRemoved: Int? = nil) {
        self.links = links
        self.errorCount = errorCount
        self.errors = errors
        self.membersAdded = membersAdded
        self.membersRemoved = membersRemoved
        self.totalAdded = totalAdded
        self.totalRemoved = totalRemoved
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        errorCount = try container.decodeIfPresent("error_count")
        errors = try container.decodeArrayIfPresent("errors")
        membersAdded = try container.decodeArrayIfPresent("members_added")
        membersRemoved = try container.decodeArrayIfPresent("members_removed")
        totalAdded = try container.decodeIfPresent("total_added")
        totalRemoved = try container.decodeIfPresent("total_removed")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(errorCount, forKey: "error_count")
        try container.encodeIfPresent(errors, forKey: "errors")
        try container.encodeIfPresent(membersAdded, forKey: "members_added")
        try container.encodeIfPresent(membersRemoved, forKey: "members_removed")
        try container.encodeIfPresent(totalAdded, forKey: "total_added")
        try container.encodeIfPresent(totalRemoved, forKey: "total_removed")
    }

}
