//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The store address. */
public struct Address1: Codable, Equatable, Content {

    /** The store's mailing address. */
    public var address1: String?

    /** An additional field for the store's mailing address. */
    public var address2: String?

    /** The city the store is located in. */
    public var city: String?

    /** The store's country. */
    public var country: String?

    /** The two-letter code for to the store's country. */
    public var countryCode: String?

    /** The latitude of the store location. */
    public var latitude: Double?

    /** The longitude of the store location. */
    public var longitude: Double?

    /** The store's postal or zip code. */
    public var postalCode: String?

    /** The store's state name or normalized province. */
    public var province: String?

    /** The two-letter code for the store's province or state. */
    public var provinceCode: String?

    public init(address1: String? = nil, address2: String? = nil, city: String? = nil, country: String? = nil, countryCode: String? = nil, latitude: Double? = nil, longitude: Double? = nil, postalCode: String? = nil, province: String? = nil, provinceCode: String? = nil) {
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.country = country
        self.countryCode = countryCode
        self.latitude = latitude
        self.longitude = longitude
        self.postalCode = postalCode
        self.province = province
        self.provinceCode = provinceCode
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        address1 = try container.decodeIfPresent("address1")
        address2 = try container.decodeIfPresent("address2")
        city = try container.decodeIfPresent("city")
        country = try container.decodeIfPresent("country")
        countryCode = try container.decodeIfPresent("country_code")
        latitude = try container.decodeIfPresent("latitude")
        longitude = try container.decodeIfPresent("longitude")
        postalCode = try container.decodeIfPresent("postal_code")
        province = try container.decodeIfPresent("province")
        provinceCode = try container.decodeIfPresent("province_code")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(address1, forKey: "address1")
        try container.encodeIfPresent(address2, forKey: "address2")
        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(country, forKey: "country")
        try container.encodeIfPresent(countryCode, forKey: "country_code")
        try container.encodeIfPresent(latitude, forKey: "latitude")
        try container.encodeIfPresent(longitude, forKey: "longitude")
        try container.encodeIfPresent(postalCode, forKey: "postal_code")
        try container.encodeIfPresent(province, forKey: "province")
        try container.encodeIfPresent(provinceCode, forKey: "province_code")
    }

}
