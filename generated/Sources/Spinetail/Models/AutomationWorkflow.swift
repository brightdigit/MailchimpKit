//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A summary of an individual Automation workflow's settings and content. */
public struct AutomationWorkflow: Codable, Equatable, Content {

    /** The current status of the Automation. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case save = "save"
        case paused = "paused"
        case sending = "sending"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The date and time the Automation was created in ISO 8601 format. */
    public var createTime: DateTime?

    /** The total number of emails sent for the Automation. */
    public var emailsSent: Int?

    /** A string that identifies the Automation. */
    public var id: String?

    public var recipients: List?

    public var reportSummary: CampaignReportSummary?

    public var settings: AutomationCampaignSettings?

    /** The date and time the Automation was started in ISO 8601 format. */
    public var startTime: DateTime?

    /** The current status of the Automation. */
    public var status: Status?

    public var tracking: AutomationTrackingOptions?

    public var triggerSettings: AutomationTrigger?

    public init(links: [ResourceLink]? = nil, createTime: DateTime? = nil, emailsSent: Int? = nil, id: String? = nil, recipients: List? = nil, reportSummary: CampaignReportSummary? = nil, settings: AutomationCampaignSettings? = nil, startTime: DateTime? = nil, status: Status? = nil, tracking: AutomationTrackingOptions? = nil, triggerSettings: AutomationTrigger? = nil) {
        self.links = links
        self.createTime = createTime
        self.emailsSent = emailsSent
        self.id = id
        self.recipients = recipients
        self.reportSummary = reportSummary
        self.settings = settings
        self.startTime = startTime
        self.status = status
        self.tracking = tracking
        self.triggerSettings = triggerSettings
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        createTime = try container.decodeIfPresent("create_time")
        emailsSent = try container.decodeIfPresent("emails_sent")
        id = try container.decodeIfPresent("id")
        recipients = try container.decodeIfPresent("recipients")
        reportSummary = try container.decodeIfPresent("report_summary")
        settings = try container.decodeIfPresent("settings")
        startTime = try container.decodeIfPresent("start_time")
        status = try container.decodeIfPresent("status")
        tracking = try container.decodeIfPresent("tracking")
        triggerSettings = try container.decodeIfPresent("trigger_settings")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(createTime, forKey: "create_time")
        try container.encodeIfPresent(emailsSent, forKey: "emails_sent")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(recipients, forKey: "recipients")
        try container.encodeIfPresent(reportSummary, forKey: "report_summary")
        try container.encodeIfPresent(settings, forKey: "settings")
        try container.encodeIfPresent(startTime, forKey: "start_time")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(tracking, forKey: "tracking")
        try container.encodeIfPresent(triggerSettings, forKey: "trigger_settings")
    }

}
