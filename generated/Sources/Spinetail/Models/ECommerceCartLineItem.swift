//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific cart line item. */
public struct ECommerceCartLineItem: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** A unique identifier for the cart line item. */
    public var id: String?

    /** The price of a cart line item. */
    public var price: Double?

    /** A unique identifier for the product associated with the cart line item. */
    public var productId: String?

    /** The name of the product for the cart line item. */
    public var productTitle: String?

    /** A unique identifier for the product variant associated with the cart line item. */
    public var productVariantId: String?

    /** The name of the product variant for the cart line item. */
    public var productVariantTitle: String?

    /** The quantity of a cart line item. */
    public var quantity: Int?

    public init(links: [ResourceLink]? = nil, id: String? = nil, price: Double? = nil, productId: String? = nil, productTitle: String? = nil, productVariantId: String? = nil, productVariantTitle: String? = nil, quantity: Int? = nil) {
        self.links = links
        self.id = id
        self.price = price
        self.productId = productId
        self.productTitle = productTitle
        self.productVariantId = productVariantId
        self.productVariantTitle = productVariantTitle
        self.quantity = quantity
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        id = try container.decodeIfPresent("id")
        price = try container.decodeIfPresent("price")
        productId = try container.decodeIfPresent("product_id")
        productTitle = try container.decodeIfPresent("product_title")
        productVariantId = try container.decodeIfPresent("product_variant_id")
        productVariantTitle = try container.decodeIfPresent("product_variant_title")
        quantity = try container.decodeIfPresent("quantity")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(productId, forKey: "product_id")
        try container.encodeIfPresent(productTitle, forKey: "product_title")
        try container.encodeIfPresent(productVariantId, forKey: "product_variant_id")
        try container.encodeIfPresent(productVariantTitle, forKey: "product_variant_title")
        try container.encodeIfPresent(quantity, forKey: "quantity")
    }

}
