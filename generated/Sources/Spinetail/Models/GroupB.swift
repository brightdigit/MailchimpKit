//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Stats for Group B. */
public struct GroupB: Codable, Equatable, Content {

    /** The percentage of total clicks for Group B. */
    public var clickPercentageb: Double?

    /** The total number of clicks for Group B. */
    public var totalClicksb: Int?

    /** The percentage of unique clicks for Group B. */
    public var uniqueClickPercentageb: Double?

    /** The number of unique clicks for Group B. */
    public var uniqueClicksb: Int?

    public init(clickPercentageb: Double? = nil, totalClicksb: Int? = nil, uniqueClickPercentageb: Double? = nil, uniqueClicksb: Int? = nil) {
        self.clickPercentageb = clickPercentageb
        self.totalClicksb = totalClicksb
        self.uniqueClickPercentageb = uniqueClickPercentageb
        self.uniqueClicksb = uniqueClicksb
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        clickPercentageb = try container.decodeIfPresent("click_percentage_b")
        totalClicksb = try container.decodeIfPresent("total_clicks_b")
        uniqueClickPercentageb = try container.decodeIfPresent("unique_click_percentage_b")
        uniqueClicksb = try container.decodeIfPresent("unique_clicks_b")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(clickPercentageb, forKey: "click_percentage_b")
        try container.encodeIfPresent(totalClicksb, forKey: "total_clicks_b")
        try container.encodeIfPresent(uniqueClickPercentageb, forKey: "unique_click_percentage_b")
        try container.encodeIfPresent(uniqueClicksb, forKey: "unique_clicks_b")
    }

}
