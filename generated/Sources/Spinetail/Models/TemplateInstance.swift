//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific template. */
public struct TemplateInstance: Codable, Equatable, Content {

    /** How the template's content is put together. */
    public enum ContentType: String, Codable, Equatable, CaseIterable {
        case template = "template"
        case multichannel = "multichannel"
        case html = "html"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** User templates are not 'deleted,' but rather marked as 'inactive.' Returns whether the template is still active. */
    public var active: Bool?

    /** If available, the category the template is listed in. */
    public var category: String?

    /** How the template's content is put together. */
    public var contentType: ContentType?

    /** The login name for template's creator. */
    public var createdBy: String?

    /** The date and time the template was created in ISO 8601 format. */
    public var dateCreated: DateTime?

    /** The date and time the template was edited in ISO 8601 format. */
    public var dateEdited: DateTime?

    /** Whether the template uses the drag and drop editor. */
    public var dragAndDrop: Bool?

    /** The login name who last edited the template. */
    public var editedBy: String?

    /** The id of the folder the template is currently in. */
    public var folderId: String?

    /** The individual id for the template. */
    public var id: Int?

    /** The name of the template. */
    public var name: String?

    /** Whether the template contains media queries to make it responsive. */
    public var responsive: Bool?

    /** The URL used for [template sharing](https://mailchimp.com/help/share-a-template/). */
    public var shareURL: String?

    /** If available, the URL for a thumbnail of the template. */
    public var thumbnail: String?

    /** The type of template (user, base, or gallery). */
    public var type: String?

    public init(links: [ResourceLink]? = nil, active: Bool? = nil, category: String? = nil, contentType: ContentType? = nil, createdBy: String? = nil, dateCreated: DateTime? = nil, dateEdited: DateTime? = nil, dragAndDrop: Bool? = nil, editedBy: String? = nil, folderId: String? = nil, id: Int? = nil, name: String? = nil, responsive: Bool? = nil, shareURL: String? = nil, thumbnail: String? = nil, type: String? = nil) {
        self.links = links
        self.active = active
        self.category = category
        self.contentType = contentType
        self.createdBy = createdBy
        self.dateCreated = dateCreated
        self.dateEdited = dateEdited
        self.dragAndDrop = dragAndDrop
        self.editedBy = editedBy
        self.folderId = folderId
        self.id = id
        self.name = name
        self.responsive = responsive
        self.shareURL = shareURL
        self.thumbnail = thumbnail
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        active = try container.decodeIfPresent("active")
        category = try container.decodeIfPresent("category")
        contentType = try container.decodeIfPresent("content_type")
        createdBy = try container.decodeIfPresent("created_by")
        dateCreated = try container.decodeIfPresent("date_created")
        dateEdited = try container.decodeIfPresent("date_edited")
        dragAndDrop = try container.decodeIfPresent("drag_and_drop")
        editedBy = try container.decodeIfPresent("edited_by")
        folderId = try container.decodeIfPresent("folder_id")
        id = try container.decodeIfPresent("id")
        name = try container.decodeIfPresent("name")
        responsive = try container.decodeIfPresent("responsive")
        shareURL = try container.decodeIfPresent("share_url")
        thumbnail = try container.decodeIfPresent("thumbnail")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(active, forKey: "active")
        try container.encodeIfPresent(category, forKey: "category")
        try container.encodeIfPresent(contentType, forKey: "content_type")
        try container.encodeIfPresent(createdBy, forKey: "created_by")
        try container.encodeIfPresent(dateCreated, forKey: "date_created")
        try container.encodeIfPresent(dateEdited, forKey: "date_edited")
        try container.encodeIfPresent(dragAndDrop, forKey: "drag_and_drop")
        try container.encodeIfPresent(editedBy, forKey: "edited_by")
        try container.encodeIfPresent(folderId, forKey: "folder_id")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(responsive, forKey: "responsive")
        try container.encodeIfPresent(shareURL, forKey: "share_url")
        try container.encodeIfPresent(thumbnail, forKey: "thumbnail")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
