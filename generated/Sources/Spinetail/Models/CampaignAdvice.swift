//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Campaign feedback details. */
public struct CampaignAdvice: Codable, Equatable, Content {

    /** The sentiment type for a feedback message. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case negative = "negative"
        case positive = "positive"
        case neutral = "neutral"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The advice message. */
    public var message: String?

    /** The sentiment type for a feedback message. */
    public var type: `Type`?

    public init(links: [ResourceLink]? = nil, message: String? = nil, type: `Type`? = nil) {
        self.links = links
        self.message = message
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        message = try container.decodeIfPresent("message")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
