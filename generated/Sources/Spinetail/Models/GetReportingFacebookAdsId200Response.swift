//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct GetReportingFacebookAdsId200Response: Codable, Equatable, Content {

    /** Campaign, Ad, or Page status */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case save = "save"
        case paused = "paused"
        case schedule = "schedule"
        case sending = "sending"
        case sent = "sent"
        case canceled = "canceled"
        case canceling = "canceling"
        case active = "active"
        case disconnected = "disconnected"
        case somepaused = "somepaused"
        case draft = "draft"
        case completed = "completed"
        case partialRejected = "partialRejected"
        case pending = "pending"
        case rejected = "rejected"
        case published = "published"
        case unpublished = "unpublished"
    }

    /** Supported Campaign, Ad, Page type */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case regular = "regular"
        case plaintext = "plaintext"
        case rss = "rss"
        case reconfirm = "reconfirm"
        case variate = "variate"
        case absplit = "absplit"
        case automation = "automation"
        case facebook = "facebook"
        case google = "google"
        case autoresponder = "autoresponder"
        case transactional = "transactional"
        case page = "page"
        case website = "website"
        case survey = "survey"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    public var audience: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Audience?

    public var audienceActivity: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfAudienceActivity?

    public var budget: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Budget?

    public var canceledAt: DateTime?

    public var channel: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Channel?

    public var createTime: DateTime?

    public var emailSourceName: String?

    public var endTime: DateTime?

    public var hasSegment: Bool?

    /** Unique ID of an Outreach */
    public var id: String?

    /** Title or name of an Outreach */
    public var name: String?

    public var needsAttention: Bool?

    public var pausedAt: DateTime?

    public var publishedTime: DateTime?

    public var recipients: List10?

    public var reportSummary: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummary?

    /** Outreach report availability */
    public var showReport: Bool?

    public var startTime: DateTime?

    /** Campaign, Ad, or Page status */
    public var status: Status?

    /** The URL of the thumbnail for this outreach */
    public var thumbnail: String?

    /** Supported Campaign, Ad, Page type */
    public var type: `Type`?

    public var updatedAt: DateTime?

    public var wasCanceledByFacebook: Bool?

    /** Web ID */
    public var webId: Int?

    public init(links: [ResourceLink]? = nil, audience: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Audience? = nil, audienceActivity: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfAudienceActivity? = nil, budget: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Budget? = nil, canceledAt: DateTime? = nil, channel: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Channel? = nil, createTime: DateTime? = nil, emailSourceName: String? = nil, endTime: DateTime? = nil, hasSegment: Bool? = nil, id: String? = nil, name: String? = nil, needsAttention: Bool? = nil, pausedAt: DateTime? = nil, publishedTime: DateTime? = nil, recipients: List10? = nil, reportSummary: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummary? = nil, showReport: Bool? = nil, startTime: DateTime? = nil, status: Status? = nil, thumbnail: String? = nil, type: `Type`? = nil, updatedAt: DateTime? = nil, wasCanceledByFacebook: Bool? = nil, webId: Int? = nil) {
        self.links = links
        self.audience = audience
        self.audienceActivity = audienceActivity
        self.budget = budget
        self.canceledAt = canceledAt
        self.channel = channel
        self.createTime = createTime
        self.emailSourceName = emailSourceName
        self.endTime = endTime
        self.hasSegment = hasSegment
        self.id = id
        self.name = name
        self.needsAttention = needsAttention
        self.pausedAt = pausedAt
        self.publishedTime = publishedTime
        self.recipients = recipients
        self.reportSummary = reportSummary
        self.showReport = showReport
        self.startTime = startTime
        self.status = status
        self.thumbnail = thumbnail
        self.type = type
        self.updatedAt = updatedAt
        self.wasCanceledByFacebook = wasCanceledByFacebook
        self.webId = webId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        audience = try container.decodeIfPresent("audience")
        audienceActivity = try container.decodeIfPresent("audience_activity")
        budget = try container.decodeIfPresent("budget")
        canceledAt = try container.decodeIfPresent("canceled_at")
        channel = try container.decodeIfPresent("channel")
        createTime = try container.decodeIfPresent("create_time")
        emailSourceName = try container.decodeIfPresent("email_source_name")
        endTime = try container.decodeIfPresent("end_time")
        hasSegment = try container.decodeIfPresent("has_segment")
        id = try container.decodeIfPresent("id")
        name = try container.decodeIfPresent("name")
        needsAttention = try container.decodeIfPresent("needs_attention")
        pausedAt = try container.decodeIfPresent("paused_at")
        publishedTime = try container.decodeIfPresent("published_time")
        recipients = try container.decodeIfPresent("recipients")
        reportSummary = try container.decodeIfPresent("report_summary")
        showReport = try container.decodeIfPresent("show_report")
        startTime = try container.decodeIfPresent("start_time")
        status = try container.decodeIfPresent("status")
        thumbnail = try container.decodeIfPresent("thumbnail")
        type = try container.decodeIfPresent("type")
        updatedAt = try container.decodeIfPresent("updated_at")
        wasCanceledByFacebook = try container.decodeIfPresent("was_canceled_by_facebook")
        webId = try container.decodeIfPresent("web_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(audience, forKey: "audience")
        try container.encodeIfPresent(audienceActivity, forKey: "audience_activity")
        try container.encodeIfPresent(budget, forKey: "budget")
        try container.encodeIfPresent(canceledAt, forKey: "canceled_at")
        try container.encodeIfPresent(channel, forKey: "channel")
        try container.encodeIfPresent(createTime, forKey: "create_time")
        try container.encodeIfPresent(emailSourceName, forKey: "email_source_name")
        try container.encodeIfPresent(endTime, forKey: "end_time")
        try container.encodeIfPresent(hasSegment, forKey: "has_segment")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(needsAttention, forKey: "needs_attention")
        try container.encodeIfPresent(pausedAt, forKey: "paused_at")
        try container.encodeIfPresent(publishedTime, forKey: "published_time")
        try container.encodeIfPresent(recipients, forKey: "recipients")
        try container.encodeIfPresent(reportSummary, forKey: "report_summary")
        try container.encodeIfPresent(showReport, forKey: "show_report")
        try container.encodeIfPresent(startTime, forKey: "start_time")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(thumbnail, forKey: "thumbnail")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
        try container.encodeIfPresent(wasCanceledByFacebook, forKey: "was_canceled_by_facebook")
        try container.encodeIfPresent(webId, forKey: "web_id")
    }

}
