//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Options for customizing your signup form header. */
public struct SignupFormHeaderOptions: Codable, Equatable, Content {

    /** Image alignment. */
    public enum ImageAlign: String, Codable, Equatable, CaseIterable {
        case none = "none"
        case left = "left"
        case center = "center"
        case right = "right"
    }

    /** Image border style. */
    public enum ImageBorderStyle: String, Codable, Equatable, CaseIterable {
        case none = "none"
        case solid = "solid"
        case dotted = "dotted"
        case dashed = "dashed"
        case double = "double"
        case groove = "groove"
        case outset = "outset"
        case inset = "inset"
        case ridge = "ridge"
    }

    /** Image link target. */
    public enum ImageTarget: String, Codable, Equatable, CaseIterable {
        case blank = "_blank"
        case null = "null"
    }

    /** Image alignment. */
    public var imageAlign: ImageAlign?

    /** Alt text for the image. */
    public var imageAlt: String?

    /** Image border color. */
    public var imageBorderColor: String?

    /** Image border style. */
    public var imageBorderStyle: ImageBorderStyle?

    /** Image border width. */
    public var imageBorderWidth: String?

    /** Image height, in pixels. */
    public var imageHeight: String?

    /** The URL that the header image will link to. */
    public var imageLink: String?

    /** Image link target. */
    public var imageTarget: ImageTarget?

    /** Header image URL. */
    public var imageURL: String?

    /** Image width, in pixels. */
    public var imageWidth: String?

    /** Header text. */
    public var text: String?

    public init(imageAlign: ImageAlign? = nil, imageAlt: String? = nil, imageBorderColor: String? = nil, imageBorderStyle: ImageBorderStyle? = nil, imageBorderWidth: String? = nil, imageHeight: String? = nil, imageLink: String? = nil, imageTarget: ImageTarget? = nil, imageURL: String? = nil, imageWidth: String? = nil, text: String? = nil) {
        self.imageAlign = imageAlign
        self.imageAlt = imageAlt
        self.imageBorderColor = imageBorderColor
        self.imageBorderStyle = imageBorderStyle
        self.imageBorderWidth = imageBorderWidth
        self.imageHeight = imageHeight
        self.imageLink = imageLink
        self.imageTarget = imageTarget
        self.imageURL = imageURL
        self.imageWidth = imageWidth
        self.text = text
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        imageAlign = try container.decodeIfPresent("image_align")
        imageAlt = try container.decodeIfPresent("image_alt")
        imageBorderColor = try container.decodeIfPresent("image_border_color")
        imageBorderStyle = try container.decodeIfPresent("image_border_style")
        imageBorderWidth = try container.decodeIfPresent("image_border_width")
        imageHeight = try container.decodeIfPresent("image_height")
        imageLink = try container.decodeIfPresent("image_link")
        imageTarget = try container.decodeIfPresent("image_target")
        imageURL = try container.decodeIfPresent("image_url")
        imageWidth = try container.decodeIfPresent("image_width")
        text = try container.decodeIfPresent("text")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(imageAlign, forKey: "image_align")
        try container.encodeIfPresent(imageAlt, forKey: "image_alt")
        try container.encodeIfPresent(imageBorderColor, forKey: "image_border_color")
        try container.encodeIfPresent(imageBorderStyle, forKey: "image_border_style")
        try container.encodeIfPresent(imageBorderWidth, forKey: "image_border_width")
        try container.encodeIfPresent(imageHeight, forKey: "image_height")
        try container.encodeIfPresent(imageLink, forKey: "image_link")
        try container.encodeIfPresent(imageTarget, forKey: "image_target")
        try container.encodeIfPresent(imageURL, forKey: "image_url")
        try container.encodeIfPresent(imageWidth, forKey: "image_width")
        try container.encodeIfPresent(text, forKey: "text")
    }

}
