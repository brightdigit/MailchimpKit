//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The report for a survey. */
public struct SurveyReport: Codable, Equatable, Content {

    /** The survey's status. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case published = "published"
        case unpublished = "unpublished"
    }

    /** The date and time the survey was created in ISO 8601 format. */
    public var createdAt: DateTime?

    /** A string that uniquely identifies this survey. */
    public var id: String?

    /** The ID of the list connected to this survey. */
    public var listId: String?

    /** The name of the list connected to this survey. */
    public var listName: String?

    /** The date and time the survey was published in ISO 8601 format. */
    public var publishedAt: DateTime?

    /** The survey's status. */
    public var status: Status?

    /** The title of the survey. */
    public var title: String?

    /** The total number of responses to this survey. */
    public var totalResponses: Int?

    /** The date and time the survey was last updated in ISO 8601 format. */
    public var updatedAt: DateTime?

    /** The URL for the survey. */
    public var url: String?

    /** The ID used in the Mailchimp web application. View this survey report in your Mailchimp account at `https://{dc}.admin.mailchimp.com/lists/surveys/results?survey_id={web_id}`. */
    public var webId: Int?

    public init(createdAt: DateTime? = nil, id: String? = nil, listId: String? = nil, listName: String? = nil, publishedAt: DateTime? = nil, status: Status? = nil, title: String? = nil, totalResponses: Int? = nil, updatedAt: DateTime? = nil, url: String? = nil, webId: Int? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.listId = listId
        self.listName = listName
        self.publishedAt = publishedAt
        self.status = status
        self.title = title
        self.totalResponses = totalResponses
        self.updatedAt = updatedAt
        self.url = url
        self.webId = webId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        createdAt = try container.decodeIfPresent("created_at")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        listName = try container.decodeIfPresent("list_name")
        publishedAt = try container.decodeIfPresent("published_at")
        status = try container.decodeIfPresent("status")
        title = try container.decodeIfPresent("title")
        totalResponses = try container.decodeIfPresent("total_responses")
        updatedAt = try container.decodeIfPresent("updated_at")
        url = try container.decodeIfPresent("url")
        webId = try container.decodeIfPresent("web_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(listName, forKey: "list_name")
        try container.encodeIfPresent(publishedAt, forKey: "published_at")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(totalResponses, forKey: "total_responses")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(webId, forKey: "web_id")
    }

}
