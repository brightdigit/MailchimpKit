//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific list. */
public struct SubscriberList2: Codable, Equatable, Content {

    public var campaignDefaults: CampaignDefaults1

    public var contact: ListContact2

    /** Whether the list supports [multiple formats for emails](https://mailchimp.com/help/change-audience-name-defaults/). When set to `true`, subscribers can choose whether they want to receive HTML or plain-text emails. When set to `false`, subscribers will receive HTML emails, with a plain-text alternative backup. */
    public var emailTypeOption: Bool

    /** The name of the list. */
    public var name: String

    /** The [permission reminder](https://mailchimp.com/help/edit-the-permission-reminder/) for the list. */
    public var permissionReminder: String

    /** Whether or not to require the subscriber to confirm subscription via email. */
    public var doubleOptin: Bool?

    /** Whether or not the list has marketing permissions (eg. GDPR) enabled. */
    public var marketingPermissions: Bool?

    /** The email address to send [subscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
    public var notifyOnSubscribe: String?

    /** The email address to send [unsubscribe notifications](https://mailchimp.com/help/change-subscribe-and-unsubscribe-notifications/) to. */
    public var notifyOnUnsubscribe: String?

    /** Whether campaigns for this list use the [Archive Bar](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) in archives by default. */
    public var useArchiveBar: Bool?

    public init(campaignDefaults: CampaignDefaults1, contact: ListContact2, emailTypeOption: Bool, name: String, permissionReminder: String, doubleOptin: Bool? = nil, marketingPermissions: Bool? = nil, notifyOnSubscribe: String? = nil, notifyOnUnsubscribe: String? = nil, useArchiveBar: Bool? = nil) {
        self.campaignDefaults = campaignDefaults
        self.contact = contact
        self.emailTypeOption = emailTypeOption
        self.name = name
        self.permissionReminder = permissionReminder
        self.doubleOptin = doubleOptin
        self.marketingPermissions = marketingPermissions
        self.notifyOnSubscribe = notifyOnSubscribe
        self.notifyOnUnsubscribe = notifyOnUnsubscribe
        self.useArchiveBar = useArchiveBar
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        campaignDefaults = try container.decode("campaign_defaults")
        contact = try container.decode("contact")
        emailTypeOption = try container.decode("email_type_option")
        name = try container.decode("name")
        permissionReminder = try container.decode("permission_reminder")
        doubleOptin = try container.decodeIfPresent("double_optin")
        marketingPermissions = try container.decodeIfPresent("marketing_permissions")
        notifyOnSubscribe = try container.decodeIfPresent("notify_on_subscribe")
        notifyOnUnsubscribe = try container.decodeIfPresent("notify_on_unsubscribe")
        useArchiveBar = try container.decodeIfPresent("use_archive_bar")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(campaignDefaults, forKey: "campaign_defaults")
        try container.encode(contact, forKey: "contact")
        try container.encode(emailTypeOption, forKey: "email_type_option")
        try container.encode(name, forKey: "name")
        try container.encode(permissionReminder, forKey: "permission_reminder")
        try container.encodeIfPresent(doubleOptin, forKey: "double_optin")
        try container.encodeIfPresent(marketingPermissions, forKey: "marketing_permissions")
        try container.encodeIfPresent(notifyOnSubscribe, forKey: "notify_on_subscribe")
        try container.encodeIfPresent(notifyOnUnsubscribe, forKey: "notify_on_unsubscribe")
        try container.encodeIfPresent(useArchiveBar, forKey: "use_archive_bar")
    }

}
