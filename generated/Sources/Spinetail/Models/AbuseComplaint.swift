//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Details of abuse complaints for a specific list. An abuse complaint occurs when your recipient clicks to 'report spam' in their email program. */
public struct AbuseComplaint: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The campaign id for the abuse report */
    public var campaignId: String?

    /** Date for the abuse report */
    public var date: String?

    /** Email address for a subscriber. */
    public var emailAddress: String?

    /** The MD5 hash of the lowercase version of the list member's email address. */
    public var emailId: String?

    /** The id for the abuse report */
    public var id: Int?

    /** The list id for the abuse report. */
    public var listId: String?

    /** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
    public var mergeFields: [String: [String: Any]]?

    /** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
    public var vip: Bool?

    public init(links: [ResourceLink]? = nil, campaignId: String? = nil, date: String? = nil, emailAddress: String? = nil, emailId: String? = nil, id: Int? = nil, listId: String? = nil, mergeFields: [String: [String: Any]]? = nil, vip: Bool? = nil) {
        self.links = links
        self.campaignId = campaignId
        self.date = date
        self.emailAddress = emailAddress
        self.emailId = emailId
        self.id = id
        self.listId = listId
        self.mergeFields = mergeFields
        self.vip = vip
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        campaignId = try container.decodeIfPresent("campaign_id")
        date = try container.decodeIfPresent("date")
        emailAddress = try container.decodeIfPresent("email_address")
        emailId = try container.decodeIfPresent("email_id")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        mergeFields = try container.decodeAnyIfPresent("merge_fields")
        vip = try container.decodeIfPresent("vip")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(campaignId, forKey: "campaign_id")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(emailAddress, forKey: "email_address")
        try container.encodeIfPresent(emailId, forKey: "email_id")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeAnyIfPresent(mergeFields, forKey: "merge_fields")
        try container.encodeIfPresent(vip, forKey: "vip")
    }

}
