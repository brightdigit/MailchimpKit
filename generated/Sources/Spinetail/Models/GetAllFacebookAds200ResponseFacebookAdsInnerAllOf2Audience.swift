//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Audience settings */
public struct GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Audience: Codable, Equatable, Content {

    /** List or Facebook based audience */
    public enum SourceType: String, Codable, Equatable, CaseIterable {
        case facebook = "facebook"
        case list = "list"
    }

    /** Type of the audience */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case customAudience = "Custom Audience"
        case lookalikeAudience = "Lookalike Audience"
        case interestBasedAudience = "Interest-based Audience"
    }

    public var emailSource: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2AudienceEmailSource?

    /** To include list contacts as part of audience */
    public var includeSourceInTarget: Bool?

    /** To find similar audience in given country */
    public var lookalikeCountryCode: String?

    /** List or Facebook based audience */
    public var sourceType: SourceType?

    public var targetingSpecs: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2AudienceTargetingSpecs?

    /** Type of the audience */
    public var type: `Type`?

    public init(emailSource: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2AudienceEmailSource? = nil, includeSourceInTarget: Bool? = nil, lookalikeCountryCode: String? = nil, sourceType: SourceType? = nil, targetingSpecs: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2AudienceTargetingSpecs? = nil, type: `Type`? = nil) {
        self.emailSource = emailSource
        self.includeSourceInTarget = includeSourceInTarget
        self.lookalikeCountryCode = lookalikeCountryCode
        self.sourceType = sourceType
        self.targetingSpecs = targetingSpecs
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        emailSource = try container.decodeIfPresent("email_source")
        includeSourceInTarget = try container.decodeIfPresent("include_source_in_target")
        lookalikeCountryCode = try container.decodeIfPresent("lookalike_country_code")
        sourceType = try container.decodeIfPresent("source_type")
        targetingSpecs = try container.decodeIfPresent("targeting_specs")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(emailSource, forKey: "email_source")
        try container.encodeIfPresent(includeSourceInTarget, forKey: "include_source_in_target")
        try container.encodeIfPresent(lookalikeCountryCode, forKey: "lookalike_country_code")
        try container.encodeIfPresent(sourceType, forKey: "source_type")
        try container.encodeIfPresent(targetingSpecs, forKey: "targeting_specs")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
