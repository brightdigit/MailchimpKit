//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** An individual store in an account. */
public struct ECommerceStore2: Codable, Equatable, Content {

    public var address: Address1?

    /** The three-letter ISO 4217 code for the currency that the store accepts. */
    public var currencyCode: String?

    /** The store domain. */
    public var domain: String?

    /** The email address for the store. */
    public var emailAddress: String?

    /** Whether to disable automations because the store is currently [syncing](https://mailchimp.com/developer/marketing/docs/e-commerce/#pausing-store-automations). */
    public var isSyncing: Bool?

    /** The currency format for the store. For example: `$`, `Â£`, etc. */
    public var moneyFormat: String?

    /** The name of the store. */
    public var name: String?

    /** The store phone number. */
    public var phone: String?

    /** The e-commerce platform of the store. */
    public var platform: String?

    /** The primary locale for the store. For example: `en`, `de`, etc. */
    public var primaryLocale: String?

    /** The timezone for the store. */
    public var timezone: String?

    public init(address: Address1? = nil, currencyCode: String? = nil, domain: String? = nil, emailAddress: String? = nil, isSyncing: Bool? = nil, moneyFormat: String? = nil, name: String? = nil, phone: String? = nil, platform: String? = nil, primaryLocale: String? = nil, timezone: String? = nil) {
        self.address = address
        self.currencyCode = currencyCode
        self.domain = domain
        self.emailAddress = emailAddress
        self.isSyncing = isSyncing
        self.moneyFormat = moneyFormat
        self.name = name
        self.phone = phone
        self.platform = platform
        self.primaryLocale = primaryLocale
        self.timezone = timezone
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        address = try container.decodeIfPresent("address")
        currencyCode = try container.decodeIfPresent("currency_code")
        domain = try container.decodeIfPresent("domain")
        emailAddress = try container.decodeIfPresent("email_address")
        isSyncing = try container.decodeIfPresent("is_syncing")
        moneyFormat = try container.decodeIfPresent("money_format")
        name = try container.decodeIfPresent("name")
        phone = try container.decodeIfPresent("phone")
        platform = try container.decodeIfPresent("platform")
        primaryLocale = try container.decodeIfPresent("primary_locale")
        timezone = try container.decodeIfPresent("timezone")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(currencyCode, forKey: "currency_code")
        try container.encodeIfPresent(domain, forKey: "domain")
        try container.encodeIfPresent(emailAddress, forKey: "email_address")
        try container.encodeIfPresent(isSyncing, forKey: "is_syncing")
        try container.encodeIfPresent(moneyFormat, forKey: "money_format")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(phone, forKey: "phone")
        try container.encodeIfPresent(platform, forKey: "platform")
        try container.encodeIfPresent(primaryLocale, forKey: "primary_locale")
        try container.encodeIfPresent(timezone, forKey: "timezone")
    }

}
