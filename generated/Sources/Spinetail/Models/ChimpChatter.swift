//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A Chimp Chatter message */
public struct ChimpChatter: Codable, Equatable, Content {

    /** The type of activity */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case listsnewSubscriber = "lists:new-subscriber"
        case listsunsubscribes = "lists:unsubscribes"
        case listsprofileUpdates = "lists:profile-updates"
        case campaignsfacebookLikes = "campaigns:facebook-likes"
        case campaignsforwardToFriend = "campaigns:forward-to-friend"
        case listsimports = "lists:imports"
    }

    /** If it exists, campaign ID for the associated campaign */
    public var campaignId: String?

    /** If it exists, list ID for the associated list */
    public var listId: String?

    public var message: String?

    public var title: String?

    /** The type of activity */
    public var type: `Type`?

    /** The date and time this activity was updated. */
    public var updateTime: DateTime?

    /** URL to a report that includes this activity */
    public var url: String?

    public init(campaignId: String? = nil, listId: String? = nil, message: String? = nil, title: String? = nil, type: `Type`? = nil, updateTime: DateTime? = nil, url: String? = nil) {
        self.campaignId = campaignId
        self.listId = listId
        self.message = message
        self.title = title
        self.type = type
        self.updateTime = updateTime
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        campaignId = try container.decodeIfPresent("campaign_id")
        listId = try container.decodeIfPresent("list_id")
        message = try container.decodeIfPresent("message")
        title = try container.decodeIfPresent("title")
        type = try container.decodeIfPresent("type")
        updateTime = try container.decodeIfPresent("update_time")
        url = try container.decodeIfPresent("url")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(campaignId, forKey: "campaign_id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(updateTime, forKey: "update_time")
        try container.encodeIfPresent(url, forKey: "url")
    }

}
