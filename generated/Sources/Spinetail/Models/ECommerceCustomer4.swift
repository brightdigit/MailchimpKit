//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific customer. Orders for existing customers should include only the `id` parameter in the `customer` object body. */
public struct ECommerceCustomer4: Codable, Equatable, Content {

    /** The customer's email address. */
    public var emailAddress: String

    /** A unique identifier for the customer. Limited to 50 characters. */
    public var id: String

    /** The customer's opt-in status. This value will never overwrite the opt-in status of a pre-existing Mailchimp list member, but will apply to list members that are added through the e-commerce API endpoints. Customers who don't opt in to your Mailchimp list [will be added as `Transactional` members](https://mailchimp.com/developer/marketing/docs/e-commerce/#customers). */
    public var optInStatus: Bool

    public var address: Address?

    /** The customer's company. */
    public var company: String?

    /** The customer's first name. */
    public var firstName: String?

    /** The customer's last name. */
    public var lastName: String?

    public init(emailAddress: String, id: String, optInStatus: Bool, address: Address? = nil, company: String? = nil, firstName: String? = nil, lastName: String? = nil) {
        self.emailAddress = emailAddress
        self.id = id
        self.optInStatus = optInStatus
        self.address = address
        self.company = company
        self.firstName = firstName
        self.lastName = lastName
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        emailAddress = try container.decode("email_address")
        id = try container.decode("id")
        optInStatus = try container.decode("opt_in_status")
        address = try container.decodeIfPresent("address")
        company = try container.decodeIfPresent("company")
        firstName = try container.decodeIfPresent("first_name")
        lastName = try container.decodeIfPresent("last_name")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(emailAddress, forKey: "email_address")
        try container.encode(id, forKey: "id")
        try container.encode(optInStatus, forKey: "opt_in_status")
        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(company, forKey: "company")
        try container.encodeIfPresent(firstName, forKey: "first_name")
        try container.encodeIfPresent(lastName, forKey: "last_name")
    }

}
