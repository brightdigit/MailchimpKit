//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Stats for the list. Many of these are cached for at least five minutes. */
public struct Statistics: Codable, Equatable, Content {

    /** The average number of subscriptions per month for the list (not returned if we haven't calculated it yet). */
    public var avgSubRate: Double?

    /** The average number of unsubscriptions per month for the list (not returned if we haven't calculated it yet). */
    public var avgUnsubRate: Double?

    /** The number of campaigns in any status that use this list. */
    public var campaignCount: Int?

    /** The date and time the last campaign was sent to this list in ISO 8601 format. This is updated when a campaign is sent to 10 or more recipients. */
    public var campaignLastSent: DateTime?

    /** The number of members cleaned from the list. */
    public var cleanedCount: Int?

    /** The number of members cleaned from the list since the last campaign was sent. */
    public var cleanedCountSinceSend: Int?

    /** The average click rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
    public var clickRate: Double?

    /** The date and time of the last time someone subscribed to this list in ISO 8601 format. */
    public var lastSubDate: DateTime?

    /** The date and time of the last time someone unsubscribed from this list in ISO 8601 format. */
    public var lastUnsubDate: DateTime?

    /** The number of active members in the list. */
    public var memberCount: Int?

    /** The number of active members in the list since the last campaign was sent. */
    public var memberCountSinceSend: Int?

    /** The number of merge fields ([audience field](https://mailchimp.com/help/getting-started-with-merge-tags/)) for this list (doesn't include EMAIL). */
    public var mergeFieldCount: Int?

    /** The average open rate (a percentage represented as a number between 0 and 100) per campaign for the list (not returned if we haven't calculated it yet). */
    public var openRate: Double?

    /** The target number of subscriptions per month for the list to keep it growing (not returned if we haven't calculated it yet). */
    public var targetSubRate: Double?

    /** The number of contacts in the list, including subscribed, unsubscribed, pending, cleaned, deleted, transactional, and those that need to be reconfirmed. Requires include_total_contacts query parameter to be included. */
    public var totalContacts: Int?

    /** The number of members who have unsubscribed from the list. */
    public var unsubscribeCount: Int?

    /** The number of members who have unsubscribed since the last campaign was sent. */
    public var unsubscribeCountSinceSend: Int?

    public init(avgSubRate: Double? = nil, avgUnsubRate: Double? = nil, campaignCount: Int? = nil, campaignLastSent: DateTime? = nil, cleanedCount: Int? = nil, cleanedCountSinceSend: Int? = nil, clickRate: Double? = nil, lastSubDate: DateTime? = nil, lastUnsubDate: DateTime? = nil, memberCount: Int? = nil, memberCountSinceSend: Int? = nil, mergeFieldCount: Int? = nil, openRate: Double? = nil, targetSubRate: Double? = nil, totalContacts: Int? = nil, unsubscribeCount: Int? = nil, unsubscribeCountSinceSend: Int? = nil) {
        self.avgSubRate = avgSubRate
        self.avgUnsubRate = avgUnsubRate
        self.campaignCount = campaignCount
        self.campaignLastSent = campaignLastSent
        self.cleanedCount = cleanedCount
        self.cleanedCountSinceSend = cleanedCountSinceSend
        self.clickRate = clickRate
        self.lastSubDate = lastSubDate
        self.lastUnsubDate = lastUnsubDate
        self.memberCount = memberCount
        self.memberCountSinceSend = memberCountSinceSend
        self.mergeFieldCount = mergeFieldCount
        self.openRate = openRate
        self.targetSubRate = targetSubRate
        self.totalContacts = totalContacts
        self.unsubscribeCount = unsubscribeCount
        self.unsubscribeCountSinceSend = unsubscribeCountSinceSend
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        avgSubRate = try container.decodeIfPresent("avg_sub_rate")
        avgUnsubRate = try container.decodeIfPresent("avg_unsub_rate")
        campaignCount = try container.decodeIfPresent("campaign_count")
        campaignLastSent = try container.decodeIfPresent("campaign_last_sent")
        cleanedCount = try container.decodeIfPresent("cleaned_count")
        cleanedCountSinceSend = try container.decodeIfPresent("cleaned_count_since_send")
        clickRate = try container.decodeIfPresent("click_rate")
        lastSubDate = try container.decodeIfPresent("last_sub_date")
        lastUnsubDate = try container.decodeIfPresent("last_unsub_date")
        memberCount = try container.decodeIfPresent("member_count")
        memberCountSinceSend = try container.decodeIfPresent("member_count_since_send")
        mergeFieldCount = try container.decodeIfPresent("merge_field_count")
        openRate = try container.decodeIfPresent("open_rate")
        targetSubRate = try container.decodeIfPresent("target_sub_rate")
        totalContacts = try container.decodeIfPresent("total_contacts")
        unsubscribeCount = try container.decodeIfPresent("unsubscribe_count")
        unsubscribeCountSinceSend = try container.decodeIfPresent("unsubscribe_count_since_send")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(avgSubRate, forKey: "avg_sub_rate")
        try container.encodeIfPresent(avgUnsubRate, forKey: "avg_unsub_rate")
        try container.encodeIfPresent(campaignCount, forKey: "campaign_count")
        try container.encodeIfPresent(campaignLastSent, forKey: "campaign_last_sent")
        try container.encodeIfPresent(cleanedCount, forKey: "cleaned_count")
        try container.encodeIfPresent(cleanedCountSinceSend, forKey: "cleaned_count_since_send")
        try container.encodeIfPresent(clickRate, forKey: "click_rate")
        try container.encodeIfPresent(lastSubDate, forKey: "last_sub_date")
        try container.encodeIfPresent(lastUnsubDate, forKey: "last_unsub_date")
        try container.encodeIfPresent(memberCount, forKey: "member_count")
        try container.encodeIfPresent(memberCountSinceSend, forKey: "member_count_since_send")
        try container.encodeIfPresent(mergeFieldCount, forKey: "merge_field_count")
        try container.encodeIfPresent(openRate, forKey: "open_rate")
        try container.encodeIfPresent(targetSubRate, forKey: "target_sub_rate")
        try container.encodeIfPresent(totalContacts, forKey: "total_contacts")
        try container.encodeIfPresent(unsubscribeCount, forKey: "unsubscribe_count")
        try container.encodeIfPresent(unsubscribeCountSinceSend, forKey: "unsubscribe_count_since_send")
    }

}
