//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A summary of an individual page's properties. */
public struct LandingPage1: Codable, Equatable, Content {

    /** The type of template the landing page has. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case signup = "signup"
        case product = "product"
    }

    /** The description of this landing page. */
    public var description: String?

    /** The list's ID associated with this landing page. */
    public var listId: String?

    /** The name of this landing page. */
    public var name: String?

    /** The ID of the store associated with this landing page. */
    public var storeId: String?

    /** The template_id of this landing page. */
    public var templateId: Int?

    /** The title of this landing page seen in the browser's title bar. */
    public var title: String?

    public var tracking: TrackingSettings?

    /** The type of template the landing page has. */
    public var type: `Type`?

    public init(description: String? = nil, listId: String? = nil, name: String? = nil, storeId: String? = nil, templateId: Int? = nil, title: String? = nil, tracking: TrackingSettings? = nil, type: `Type`? = nil) {
        self.description = description
        self.listId = listId
        self.name = name
        self.storeId = storeId
        self.templateId = templateId
        self.title = title
        self.tracking = tracking
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        description = try container.decodeIfPresent("description")
        listId = try container.decodeIfPresent("list_id")
        name = try container.decodeIfPresent("name")
        storeId = try container.decodeIfPresent("store_id")
        templateId = try container.decodeIfPresent("template_id")
        title = try container.decodeIfPresent("title")
        tracking = try container.decodeIfPresent("tracking")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(storeId, forKey: "store_id")
        try container.encodeIfPresent(templateId, forKey: "template_id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(tracking, forKey: "tracking")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
