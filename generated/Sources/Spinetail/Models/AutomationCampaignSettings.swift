//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The settings for the Automation workflow. */
public struct AutomationCampaignSettings: Codable, Equatable, Content {

    /** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the Automation. Defaults to `true`. */
    public var authenticate: Bool?

    /** Whether to automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the Automation. */
    public var autoFooter: Bool?

    /** The 'from' name for the Automation (not an email address). */
    public var fromName: String?

    /** Whether to automatically inline the CSS included with the Automation content. */
    public var inlineCss: Bool?

    /** The reply-to email address for the Automation. */
    public var replyTo: String?

    /** The title of the Automation. */
    public var title: String?

    /** The Automation's custom 'To' name, typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
    public var toName: String?

    /** Whether to use Mailchimp Conversation feature to manage replies */
    public var useConversation: Bool?

    public init(authenticate: Bool? = nil, autoFooter: Bool? = nil, fromName: String? = nil, inlineCss: Bool? = nil, replyTo: String? = nil, title: String? = nil, toName: String? = nil, useConversation: Bool? = nil) {
        self.authenticate = authenticate
        self.autoFooter = autoFooter
        self.fromName = fromName
        self.inlineCss = inlineCss
        self.replyTo = replyTo
        self.title = title
        self.toName = toName
        self.useConversation = useConversation
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        authenticate = try container.decodeIfPresent("authenticate")
        autoFooter = try container.decodeIfPresent("auto_footer")
        fromName = try container.decodeIfPresent("from_name")
        inlineCss = try container.decodeIfPresent("inline_css")
        replyTo = try container.decodeIfPresent("reply_to")
        title = try container.decodeIfPresent("title")
        toName = try container.decodeIfPresent("to_name")
        useConversation = try container.decodeIfPresent("use_conversation")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(authenticate, forKey: "authenticate")
        try container.encodeIfPresent(autoFooter, forKey: "auto_footer")
        try container.encodeIfPresent(fromName, forKey: "from_name")
        try container.encodeIfPresent(inlineCss, forKey: "inline_css")
        try container.encodeIfPresent(replyTo, forKey: "reply_to")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(toName, forKey: "to_name")
        try container.encodeIfPresent(useConversation, forKey: "use_conversation")
    }

}
