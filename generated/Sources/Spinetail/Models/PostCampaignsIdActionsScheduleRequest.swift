//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct PostCampaignsIdActionsScheduleRequest: Codable, Equatable, Content {

    /** The UTC date and time to schedule the campaign for delivery in ISO 8601 format. Campaigns may only be scheduled to send on the quarter-hour (:00, :15, :30, :45). */
    public var scheduleTime: DateTime

    public var batchDelivery: BatchDelivery?

    /** Choose whether the campaign should use [Timewarp](https://mailchimp.com/help/use-timewarp/) when sending. Campaigns scheduled with Timewarp are localized based on the recipients' time zones. For example, a Timewarp campaign with a `schedule_time` of 13:00 will be sent to each recipient at 1:00pm in their local time. Cannot be set to `true` for campaigns using [Batch Delivery](https://mailchimp.com/help/schedule-batch-delivery/). */
    public var timewarp: Bool?

    public init(scheduleTime: DateTime, batchDelivery: BatchDelivery? = nil, timewarp: Bool? = nil) {
        self.scheduleTime = scheduleTime
        self.batchDelivery = batchDelivery
        self.timewarp = timewarp
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        scheduleTime = try container.decode("schedule_time")
        batchDelivery = try container.decodeIfPresent("batch_delivery")
        timewarp = try container.decodeIfPresent("timewarp")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(scheduleTime, forKey: "schedule_time")
        try container.encodeIfPresent(batchDelivery, forKey: "batch_delivery")
        try container.encodeIfPresent(timewarp, forKey: "timewarp")
    }

}
