//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Individuals who are currently or have been previously subscribed to this list, including members who have bounced or unsubscribed. */
public struct AddListMembers2: Codable, Equatable, Content {

    /** Subscriber's status. This value is required only if the email address is not already present on the list. */
    public enum StatusIfNew: String, Codable, Equatable, CaseIterable {
        case subscribed = "subscribed"
        case unsubscribed = "unsubscribed"
        case cleaned = "cleaned"
        case pending = "pending"
        case transactional = "transactional"
    }

    /** Subscriber's current status. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case subscribed = "subscribed"
        case unsubscribed = "unsubscribed"
        case cleaned = "cleaned"
        case pending = "pending"
        case transactional = "transactional"
    }

    /** Email address for a subscriber. This value is required only if the email address is not already present on the list. */
    public var emailAddress: String

    /** Subscriber's status. This value is required only if the email address is not already present on the list. */
    public var statusIfNew: StatusIfNew

    /** Type of email this member asked to get ('html' or 'text'). */
    public var emailType: String?

    /** The key of this object's properties is the ID of the interest in question. */
    public var interests: [String: Bool]?

    /** The IP address the subscriber used to confirm their opt-in status. */
    public var ipOpt: String?

    /** IP address the subscriber signed up from. */
    public var ipSignup: String?

    /** If set/detected, the [subscriber's language](https://mailchimp.com/help/view-and-edit-contact-languages/). */
    public var language: String?

    public var location: Location?

    /** The marketing permissions for the subscriber. */
    public var marketingPermissions: [MarketingPermission1]?

    /** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
    public var mergeFields: [String: [String: Any]]?

    /** Subscriber's current status. */
    public var status: Status?

    /** The date and time the subscriber confirmed their opt-in status in ISO 8601 format. */
    public var timestampOpt: DateTime?

    /** The date and time the subscriber signed up for the list in ISO 8601 format. */
    public var timestampSignup: DateTime?

    /** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
    public var vip: Bool?

    public init(emailAddress: String, statusIfNew: StatusIfNew, emailType: String? = nil, interests: [String: Bool]? = nil, ipOpt: String? = nil, ipSignup: String? = nil, language: String? = nil, location: Location? = nil, marketingPermissions: [MarketingPermission1]? = nil, mergeFields: [String: [String: Any]]? = nil, status: Status? = nil, timestampOpt: DateTime? = nil, timestampSignup: DateTime? = nil, vip: Bool? = nil) {
        self.emailAddress = emailAddress
        self.statusIfNew = statusIfNew
        self.emailType = emailType
        self.interests = interests
        self.ipOpt = ipOpt
        self.ipSignup = ipSignup
        self.language = language
        self.location = location
        self.marketingPermissions = marketingPermissions
        self.mergeFields = mergeFields
        self.status = status
        self.timestampOpt = timestampOpt
        self.timestampSignup = timestampSignup
        self.vip = vip
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        emailAddress = try container.decode("email_address")
        statusIfNew = try container.decode("status_if_new")
        emailType = try container.decodeIfPresent("email_type")
        interests = try container.decodeIfPresent("interests")
        ipOpt = try container.decodeIfPresent("ip_opt")
        ipSignup = try container.decodeIfPresent("ip_signup")
        language = try container.decodeIfPresent("language")
        location = try container.decodeIfPresent("location")
        marketingPermissions = try container.decodeArrayIfPresent("marketing_permissions")
        mergeFields = try container.decodeAnyIfPresent("merge_fields")
        status = try container.decodeIfPresent("status")
        timestampOpt = try container.decodeIfPresent("timestamp_opt")
        timestampSignup = try container.decodeIfPresent("timestamp_signup")
        vip = try container.decodeIfPresent("vip")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(emailAddress, forKey: "email_address")
        try container.encode(statusIfNew, forKey: "status_if_new")
        try container.encodeIfPresent(emailType, forKey: "email_type")
        try container.encodeIfPresent(interests, forKey: "interests")
        try container.encodeIfPresent(ipOpt, forKey: "ip_opt")
        try container.encodeIfPresent(ipSignup, forKey: "ip_signup")
        try container.encodeIfPresent(language, forKey: "language")
        try container.encodeIfPresent(location, forKey: "location")
        try container.encodeIfPresent(marketingPermissions, forKey: "marketing_permissions")
        try container.encodeAnyIfPresent(mergeFields, forKey: "merge_fields")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(timestampOpt, forKey: "timestamp_opt")
        try container.encodeIfPresent(timestampSignup, forKey: "timestamp_signup")
        try container.encodeIfPresent(vip, forKey: "vip")
    }

}
