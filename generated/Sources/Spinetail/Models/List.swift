//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** List settings for the Automation. */
public struct List: Codable, Equatable, Content {

    /** The unique list id. */
    public var listId: String?

    /** The status of the list used, namely if it's deleted or disabled. */
    public var listIsActive: Bool?

    /** List Name. */
    public var listName: String?

    public var segmentOpts: SegmentOptions?

    /** The id of the store. */
    public var storeId: String?

    public init(listId: String? = nil, listIsActive: Bool? = nil, listName: String? = nil, segmentOpts: SegmentOptions? = nil, storeId: String? = nil) {
        self.listId = listId
        self.listIsActive = listIsActive
        self.listName = listName
        self.segmentOpts = segmentOpts
        self.storeId = storeId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        listId = try container.decodeIfPresent("list_id")
        listIsActive = try container.decodeIfPresent("list_is_active")
        listName = try container.decodeIfPresent("list_name")
        segmentOpts = try container.decodeIfPresent("segment_opts")
        storeId = try container.decodeIfPresent("store_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(listIsActive, forKey: "list_is_active")
        try container.encodeIfPresent(listName, forKey: "list_name")
        try container.encodeIfPresent(segmentOpts, forKey: "segment_opts")
        try container.encodeIfPresent(storeId, forKey: "store_id")
    }

}
