//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The events that can trigger the webhook and whether they are enabled. */
public struct Events2: Codable, Equatable, Content {

    /** Whether the webhook is triggered when a campaign is sent or cancelled. */
    public var campaign: Bool?

    /** Whether the webhook is triggered when a subscriber's email address is cleaned from the list. */
    public var cleaned: Bool?

    /** Whether the webhook is triggered when a subscriber's profile is updated. */
    public var profile: Bool?

    /** Whether the webhook is triggered when a list subscriber is added. */
    public var subscribe: Bool?

    /** Whether the webhook is triggered when a list member unsubscribes. */
    public var unsubscribe: Bool?

    /** Whether the webhook is triggered when a subscriber's email address is changed. */
    public var upemail: Bool?

    public init(campaign: Bool? = nil, cleaned: Bool? = nil, profile: Bool? = nil, subscribe: Bool? = nil, unsubscribe: Bool? = nil, upemail: Bool? = nil) {
        self.campaign = campaign
        self.cleaned = cleaned
        self.profile = profile
        self.subscribe = subscribe
        self.unsubscribe = unsubscribe
        self.upemail = upemail
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        campaign = try container.decodeIfPresent("campaign")
        cleaned = try container.decodeIfPresent("cleaned")
        profile = try container.decodeIfPresent("profile")
        subscribe = try container.decodeIfPresent("subscribe")
        unsubscribe = try container.decodeIfPresent("unsubscribe")
        upemail = try container.decodeIfPresent("upemail")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(campaign, forKey: "campaign")
        try container.encodeIfPresent(cleaned, forKey: "cleaned")
        try container.encodeIfPresent(profile, forKey: "profile")
        try container.encodeIfPresent(subscribe, forKey: "subscribe")
        try container.encodeIfPresent(unsubscribe, forKey: "unsubscribe")
        try container.encodeIfPresent(upemail, forKey: "upemail")
    }

}
