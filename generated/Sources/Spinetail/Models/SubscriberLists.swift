//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A collection of subscriber lists for this account. Lists contain subscribers who have opted-in to receive correspondence from you or your organization. */
public struct SubscriberLists: Codable, Equatable, Content {

    /** An array of objects, each representing a list. */
    public var lists: [SubscriberList]

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    public var constraints: CollectionAuthorization?

    /** The total number of items matching the query regardless of pagination. */
    public var totalItems: Int?

    public init(lists: [SubscriberList], links: [ResourceLink]? = nil, constraints: CollectionAuthorization? = nil, totalItems: Int? = nil) {
        self.lists = lists
        self.links = links
        self.constraints = constraints
        self.totalItems = totalItems
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        lists = try container.decodeArray("lists")
        links = try container.decodeArrayIfPresent("_links")
        constraints = try container.decodeIfPresent("constraints")
        totalItems = try container.decodeIfPresent("total_items")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(lists, forKey: "lists")
        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(constraints, forKey: "constraints")
        try container.encodeIfPresent(totalItems, forKey: "total_items")
    }

}
