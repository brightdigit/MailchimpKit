//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The HTML and plain-text content for a campaign. */
public struct CampaignContent: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The Archive HTML for the campaign. */
    public var archiveHtml: String?

    /** The raw HTML for the campaign. */
    public var html: String?

    /** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
    public var plainText: String?

    /** Content options for multivariate campaigns. */
    public var variateContents: [VariateContentsInner]?

    public init(links: [ResourceLink]? = nil, archiveHtml: String? = nil, html: String? = nil, plainText: String? = nil, variateContents: [VariateContentsInner]? = nil) {
        self.links = links
        self.archiveHtml = archiveHtml
        self.html = html
        self.plainText = plainText
        self.variateContents = variateContents
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        archiveHtml = try container.decodeIfPresent("archive_html")
        html = try container.decodeIfPresent("html")
        plainText = try container.decodeIfPresent("plain_text")
        variateContents = try container.decodeArrayIfPresent("variate_contents")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(archiveHtml, forKey: "archive_html")
        try container.encodeIfPresent(html, forKey: "html")
        try container.encodeIfPresent(plainText, forKey: "plain_text")
        try container.encodeIfPresent(variateContents, forKey: "variate_contents")
    }

}
