//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A facebook ad. */
public struct GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2: Codable, Equatable, Content {

    public var audience: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Audience?

    public var budget: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Budget?

    public var channel: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Channel?

    public var content: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Content?

    public var feedback: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Feedback?

    /** Check if this ad has audience setup */
    public var hasAudience: Bool?

    /** Check if this ad has content */
    public var hasContent: Bool?

    /** Check if this ad is connected to a facebook page */
    public var isConnected: Bool?

    public var site: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Site?

    public init(audience: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Audience? = nil, budget: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Budget? = nil, channel: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Channel? = nil, content: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Content? = nil, feedback: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Feedback? = nil, hasAudience: Bool? = nil, hasContent: Bool? = nil, isConnected: Bool? = nil, site: GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2Site? = nil) {
        self.audience = audience
        self.budget = budget
        self.channel = channel
        self.content = content
        self.feedback = feedback
        self.hasAudience = hasAudience
        self.hasContent = hasContent
        self.isConnected = isConnected
        self.site = site
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        audience = try container.decodeIfPresent("audience")
        budget = try container.decodeIfPresent("budget")
        channel = try container.decodeIfPresent("channel")
        content = try container.decodeIfPresent("content")
        feedback = try container.decodeIfPresent("feedback")
        hasAudience = try container.decodeIfPresent("has_audience")
        hasContent = try container.decodeIfPresent("has_content")
        isConnected = try container.decodeIfPresent("is_connected")
        site = try container.decodeIfPresent("site")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(audience, forKey: "audience")
        try container.encodeIfPresent(budget, forKey: "budget")
        try container.encodeIfPresent(channel, forKey: "channel")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(feedback, forKey: "feedback")
        try container.encodeIfPresent(hasAudience, forKey: "has_audience")
        try container.encodeIfPresent(hasContent, forKey: "has_content")
        try container.encodeIfPresent(isConnected, forKey: "is_connected")
        try container.encodeIfPresent(site, forKey: "site")
    }

}
