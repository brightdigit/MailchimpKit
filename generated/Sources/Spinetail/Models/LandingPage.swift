//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A summary of an individual landing page's settings and content. */
public struct LandingPage: Codable, Equatable, Content {

    /** The status of this landing page. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case published = "published"
        case unpublished = "unpublished"
        case draft = "draft"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The time this landing page was created. */
    public var createdAt: DateTime?

    /** Created by mobile or web */
    public var createdBySource: String?

    /** The description of this landing page. */
    public var description: String?

    /** A string that uniquely identifies this landing page. */
    public var id: String?

    /** The list's ID associated with this landing page. */
    public var listId: String?

    /** The name of this landing page. */
    public var name: String?

    /** The time this landing page was published. */
    public var publishedAt: DateTime?

    /** The status of this landing page. */
    public var status: Status?

    /** The ID of the store associated with this landing page. */
    public var storeId: String?

    /** The template_id of this landing page. */
    public var templateId: Int?

    /** The title of this landing page seen in the browser's title bar. */
    public var title: String?

    public var tracking: TrackingSettings?

    /** The time this landing page was unpublished. */
    public var unpublishedAt: DateTime?

    /** The time this landing page was updated at. */
    public var updatedAt: DateTime?

    /** The url of the published landing page. */
    public var url: String?

    /** The ID used in the Mailchimp web application. */
    public var webId: Int?

    public init(links: [ResourceLink]? = nil, createdAt: DateTime? = nil, createdBySource: String? = nil, description: String? = nil, id: String? = nil, listId: String? = nil, name: String? = nil, publishedAt: DateTime? = nil, status: Status? = nil, storeId: String? = nil, templateId: Int? = nil, title: String? = nil, tracking: TrackingSettings? = nil, unpublishedAt: DateTime? = nil, updatedAt: DateTime? = nil, url: String? = nil, webId: Int? = nil) {
        self.links = links
        self.createdAt = createdAt
        self.createdBySource = createdBySource
        self.description = description
        self.id = id
        self.listId = listId
        self.name = name
        self.publishedAt = publishedAt
        self.status = status
        self.storeId = storeId
        self.templateId = templateId
        self.title = title
        self.tracking = tracking
        self.unpublishedAt = unpublishedAt
        self.updatedAt = updatedAt
        self.url = url
        self.webId = webId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        createdAt = try container.decodeIfPresent("created_at")
        createdBySource = try container.decodeIfPresent("created_by_source")
        description = try container.decodeIfPresent("description")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        name = try container.decodeIfPresent("name")
        publishedAt = try container.decodeIfPresent("published_at")
        status = try container.decodeIfPresent("status")
        storeId = try container.decodeIfPresent("store_id")
        templateId = try container.decodeIfPresent("template_id")
        title = try container.decodeIfPresent("title")
        tracking = try container.decodeIfPresent("tracking")
        unpublishedAt = try container.decodeIfPresent("unpublished_at")
        updatedAt = try container.decodeIfPresent("updated_at")
        url = try container.decodeIfPresent("url")
        webId = try container.decodeIfPresent("web_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(createdBySource, forKey: "created_by_source")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(publishedAt, forKey: "published_at")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(storeId, forKey: "store_id")
        try container.encodeIfPresent(templateId, forKey: "template_id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(tracking, forKey: "tracking")
        try container.encodeIfPresent(unpublishedAt, forKey: "unpublished_at")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(webId, forKey: "web_id")
    }

}
