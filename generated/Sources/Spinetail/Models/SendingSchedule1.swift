//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The schedule for sending the RSS Campaign. */
public struct SendingSchedule1: Codable, Equatable, Content {

    /** The day of the week to send a weekly RSS Campaign. */
    public enum WeeklySendDay: String, Codable, Equatable, CaseIterable {
        case sunday = "sunday"
        case monday = "monday"
        case tuesday = "tuesday"
        case wednesday = "wednesday"
        case thursday = "thursday"
        case friday = "friday"
        case saturday = "saturday"
    }

    public var dailySend: DailySendingDays?

    /** The hour to send the campaign in local time. Acceptable hours are 0-23. For example, '4' would be 4am in [your account's default time zone](https://mailchimp.com/help/set-account-details/). */
    public var hour: Int?

    /** The day of the month to send a monthly RSS Campaign. Acceptable days are 0-31, where '0' is always the last day of a month. Months with fewer than the selected number of days will not have an RSS campaign sent out that day. For example, RSS Campaigns set to send on the 30th will not go out in February. */
    public var monthlySendDate: Double?

    /** The day of the week to send a weekly RSS Campaign. */
    public var weeklySendDay: WeeklySendDay?

    public init(dailySend: DailySendingDays? = nil, hour: Int? = nil, monthlySendDate: Double? = nil, weeklySendDay: WeeklySendDay? = nil) {
        self.dailySend = dailySend
        self.hour = hour
        self.monthlySendDate = monthlySendDate
        self.weeklySendDay = weeklySendDay
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        dailySend = try container.decodeIfPresent("daily_send")
        hour = try container.decodeIfPresent("hour")
        monthlySendDate = try container.decodeIfPresent("monthly_send_date")
        weeklySendDay = try container.decodeIfPresent("weekly_send_day")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(dailySend, forKey: "daily_send")
        try container.encodeIfPresent(hour, forKey: "hour")
        try container.encodeIfPresent(monthlySendDate, forKey: "monthly_send_date")
        try container.encodeIfPresent(weeklySendDay, forKey: "weekly_send_day")
    }

}
