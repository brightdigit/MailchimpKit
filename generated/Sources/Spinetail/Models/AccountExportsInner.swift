//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** An account export. */
public struct AccountExportsInner: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** If the export is finished, the download URL for an export. URLs are only valid for 90 days after the export completes. */
    public var downloadURL: String?

    /** The ID for the export. */
    public var exportId: Int?

    /** If finished, the finish time for the export. */
    public var finished: DateTime?

    /** The size of the uncompressed export in bytes. */
    public var sizeInBytes: Int?

    /** Start time for the export. */
    public var started: DateTime?

    public init(links: [ResourceLink]? = nil, downloadURL: String? = nil, exportId: Int? = nil, finished: DateTime? = nil, sizeInBytes: Int? = nil, started: DateTime? = nil) {
        self.links = links
        self.downloadURL = downloadURL
        self.exportId = exportId
        self.finished = finished
        self.sizeInBytes = sizeInBytes
        self.started = started
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        downloadURL = try container.decodeIfPresent("download_url")
        exportId = try container.decodeIfPresent("export_id")
        finished = try container.decodeIfPresent("finished")
        sizeInBytes = try container.decodeIfPresent("size_in_bytes")
        started = try container.decodeIfPresent("started")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(downloadURL, forKey: "download_url")
        try container.encodeIfPresent(exportId, forKey: "export_id")
        try container.encodeIfPresent(finished, forKey: "finished")
        try container.encodeIfPresent(sizeInBytes, forKey: "size_in_bytes")
        try container.encodeIfPresent(started, forKey: "started")
    }

}
