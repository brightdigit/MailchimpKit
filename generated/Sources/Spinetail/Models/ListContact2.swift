//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** [Contact information displayed in campaign footers](https://mailchimp.com/help/about-campaign-footers/) to comply with international spam laws. */
public struct ListContact2: Codable, Equatable, Content {

    /** The street address for the list contact. */
    public var address1: String

    /** The city for the list contact. */
    public var city: String

    /** The company name for the list. */
    public var company: String

    /** A two-character ISO3166 country code. Defaults to US if invalid. */
    public var country: String

    /** The state for the list contact. */
    public var state: String

    /** The postal or zip code for the list contact. */
    public var zip: String

    /** The street address for the list contact. */
    public var address2: String?

    /** The phone number for the list contact. */
    public var phone: String?

    public init(address1: String, city: String, company: String, country: String, state: String, zip: String, address2: String? = nil, phone: String? = nil) {
        self.address1 = address1
        self.city = city
        self.company = company
        self.country = country
        self.state = state
        self.zip = zip
        self.address2 = address2
        self.phone = phone
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        address1 = try container.decode("address1")
        city = try container.decode("city")
        company = try container.decode("company")
        country = try container.decode("country")
        state = try container.decode("state")
        zip = try container.decode("zip")
        address2 = try container.decodeIfPresent("address2")
        phone = try container.decodeIfPresent("phone")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(address1, forKey: "address1")
        try container.encode(city, forKey: "city")
        try container.encode(company, forKey: "company")
        try container.encode(country, forKey: "country")
        try container.encode(state, forKey: "state")
        try container.encode(zip, forKey: "zip")
        try container.encodeIfPresent(address2, forKey: "address2")
        try container.encodeIfPresent(phone, forKey: "phone")
    }

}
