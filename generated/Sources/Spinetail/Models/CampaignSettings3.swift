//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The settings for your campaign, including subject, from name, reply-to address, and more. */
public struct CampaignSettings3: Codable, Equatable, Content {

    /** Whether Mailchimp [authenticated](https://mailchimp.com/help/about-email-authentication/) the campaign. Defaults to `true`. */
    public var authenticate: Bool?

    /** An array of [Facebook](https://mailchimp.com/help/connect-or-disconnect-the-facebook-integration/) page ids to auto-post to. */
    public var autoFbPost: [String]?

    /** Automatically append Mailchimp's [default footer](https://mailchimp.com/help/about-campaign-footers/) to the campaign. */
    public var autoFooter: Bool?

    /** Automatically tweet a link to the [campaign archive](https://mailchimp.com/help/about-email-campaign-archives-and-pages/) page when the campaign is sent. */
    public var autoTweet: Bool?

    /** Allows Facebook comments on the campaign (also force-enables the Campaign Archive toolbar). Defaults to `true`. */
    public var fbComments: Bool?

    /** If the campaign is listed in a folder, the id for that folder. */
    public var folderId: String?

    /** The 'from' name on the campaign (not an email address). */
    public var fromName: String?

    /** Automatically inline the CSS included with the campaign content. */
    public var inlineCss: Bool?

    /** The preview text for the campaign. */
    public var previewText: String?

    /** The reply-to email address for the campaign. Note: while this field is not required for campaign creation, it is required for sending. */
    public var replyTo: String?

    /** The subject line for the campaign. */
    public var subjectLine: String?

    /** The id of the template to use. */
    public var templateId: Int?

    /** The title of the campaign. */
    public var title: String?

    /** The campaign's custom 'To' name. Typically the first name [audience field](https://mailchimp.com/help/getting-started-with-merge-tags/). */
    public var toName: String?

    /** Use Mailchimp Conversation feature to manage out-of-office replies. */
    public var useConversation: Bool?

    public init(authenticate: Bool? = nil, autoFbPost: [String]? = nil, autoFooter: Bool? = nil, autoTweet: Bool? = nil, fbComments: Bool? = nil, folderId: String? = nil, fromName: String? = nil, inlineCss: Bool? = nil, previewText: String? = nil, replyTo: String? = nil, subjectLine: String? = nil, templateId: Int? = nil, title: String? = nil, toName: String? = nil, useConversation: Bool? = nil) {
        self.authenticate = authenticate
        self.autoFbPost = autoFbPost
        self.autoFooter = autoFooter
        self.autoTweet = autoTweet
        self.fbComments = fbComments
        self.folderId = folderId
        self.fromName = fromName
        self.inlineCss = inlineCss
        self.previewText = previewText
        self.replyTo = replyTo
        self.subjectLine = subjectLine
        self.templateId = templateId
        self.title = title
        self.toName = toName
        self.useConversation = useConversation
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        authenticate = try container.decodeIfPresent("authenticate")
        autoFbPost = try container.decodeArrayIfPresent("auto_fb_post")
        autoFooter = try container.decodeIfPresent("auto_footer")
        autoTweet = try container.decodeIfPresent("auto_tweet")
        fbComments = try container.decodeIfPresent("fb_comments")
        folderId = try container.decodeIfPresent("folder_id")
        fromName = try container.decodeIfPresent("from_name")
        inlineCss = try container.decodeIfPresent("inline_css")
        previewText = try container.decodeIfPresent("preview_text")
        replyTo = try container.decodeIfPresent("reply_to")
        subjectLine = try container.decodeIfPresent("subject_line")
        templateId = try container.decodeIfPresent("template_id")
        title = try container.decodeIfPresent("title")
        toName = try container.decodeIfPresent("to_name")
        useConversation = try container.decodeIfPresent("use_conversation")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(authenticate, forKey: "authenticate")
        try container.encodeIfPresent(autoFbPost, forKey: "auto_fb_post")
        try container.encodeIfPresent(autoFooter, forKey: "auto_footer")
        try container.encodeIfPresent(autoTweet, forKey: "auto_tweet")
        try container.encodeIfPresent(fbComments, forKey: "fb_comments")
        try container.encodeIfPresent(folderId, forKey: "folder_id")
        try container.encodeIfPresent(fromName, forKey: "from_name")
        try container.encodeIfPresent(inlineCss, forKey: "inline_css")
        try container.encodeIfPresent(previewText, forKey: "preview_text")
        try container.encodeIfPresent(replyTo, forKey: "reply_to")
        try container.encodeIfPresent(subjectLine, forKey: "subject_line")
        try container.encodeIfPresent(templateId, forKey: "template_id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(toName, forKey: "to_name")
        try container.encodeIfPresent(useConversation, forKey: "use_conversation")
    }

}
