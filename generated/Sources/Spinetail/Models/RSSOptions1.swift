//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** [RSS](https://mailchimp.com/help/share-your-blog-posts-with-mailchimp/) options, specific to an RSS campaign. */
public struct RSSOptions1: Codable, Equatable, Content {

    /** The frequency of the RSS Campaign. */
    public enum Frequency: String, Codable, Equatable, CaseIterable {
        case daily = "daily"
        case weekly = "weekly"
        case monthly = "monthly"
    }

    /** The URL for the RSS feed. */
    public var feedURL: URL

    /** The frequency of the RSS Campaign. */
    public var frequency: Frequency

    /** Whether to add CSS to images in the RSS feed to constrain their width in campaigns. */
    public var constrainRssImg: Bool?

    public var schedule: SendingSchedule?

    public init(feedURL: URL, frequency: Frequency, constrainRssImg: Bool? = nil, schedule: SendingSchedule? = nil) {
        self.feedURL = feedURL
        self.frequency = frequency
        self.constrainRssImg = constrainRssImg
        self.schedule = schedule
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        feedURL = try container.decode("feed_url")
        frequency = try container.decode("frequency")
        constrainRssImg = try container.decodeIfPresent("constrain_rss_img")
        schedule = try container.decodeIfPresent("schedule")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(feedURL, forKey: "feed_url")
        try container.encode(frequency, forKey: "frequency")
        try container.encodeIfPresent(constrainRssImg, forKey: "constrain_rss_img")
        try container.encodeIfPresent(schedule, forKey: "schedule")
    }

}
