//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The delay settings for an automation email. */
public struct AutomationDelay1: Codable, Equatable, Content {

    /** The action that triggers the delay of an automation emails. */
    public enum Action: String, Codable, Equatable, CaseIterable {
        case signup = "signup"
        case ecommAbandonedBrowse = "ecomm_abandoned_browse"
        case ecommAbandonedCart = "ecomm_abandoned_cart"
    }

    /** Whether the delay settings describe before or after the delay action of an automation email. */
    public enum Direction: String, Codable, Equatable, CaseIterable {
        case after = "after"
    }

    /** The type of delay for an automation email. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case now = "now"
        case day = "day"
        case hour = "hour"
        case week = "week"
    }

    /** The action that triggers the delay of an automation emails. */
    public var action: Action

    /** The delay amount for an automation email. */
    public var amount: Int?

    /** Whether the delay settings describe before or after the delay action of an automation email. */
    public var direction: Direction?

    /** The type of delay for an automation email. */
    public var type: `Type`?

    public init(action: Action, amount: Int? = nil, direction: Direction? = nil, type: `Type`? = nil) {
        self.action = action
        self.amount = amount
        self.direction = direction
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        action = try container.decode("action")
        amount = try container.decodeIfPresent("amount")
        direction = try container.decodeIfPresent("direction")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(action, forKey: "action")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
