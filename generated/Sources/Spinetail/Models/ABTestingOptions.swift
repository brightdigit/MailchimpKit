//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** [A/B Testing](https://mailchimp.com/help/about-ab-testing-campaigns/) options for a campaign. */
public struct ABTestingOptions: Codable, Equatable, Content {

    /** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
    public enum PickWinner: String, Codable, Equatable, CaseIterable {
        case opens = "opens"
        case clicks = "clicks"
        case manual = "manual"
    }

    /** The type of AB split to run. */
    public enum SplitTest: String, Codable, Equatable, CaseIterable {
        case subject = "subject"
        case fromName = "from_name"
        case schedule = "schedule"
    }

    /** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
    public enum WaitUnits: String, Codable, Equatable, CaseIterable {
        case hours = "hours"
        case days = "days"
    }

    /** For campaigns split on 'From Name', the name for Group A. */
    public var fromNamea: String?

    /** For campaigns split on 'From Name', the name for Group B. */
    public var fromNameb: String?

    /** How we should evaluate a winner. Based on 'opens', 'clicks', or 'manual'. */
    public var pickWinner: PickWinner?

    /** For campaigns split on 'From Name', the reply-to address for Group A. */
    public var replyEmaila: String?

    /** For campaigns split on 'From Name', the reply-to address for Group B. */
    public var replyEmailb: String?

    /** The send time for Group A. */
    public var sendTimea: DateTime?

    /** The send time for Group B. */
    public var sendTimeb: DateTime?

    /** The send time for the winning version. */
    public var sendTimeWinner: String?

    /** The size of the split groups. Campaigns split based on 'schedule' are forced to have a 50/50 split. Valid split integers are between 1-50. */
    public var splitSize: Int?

    /** The type of AB split to run. */
    public var splitTest: SplitTest?

    /** For campaigns split on 'Subject Line', the subject line for Group A. */
    public var subjecta: String?

    /** For campaigns split on 'Subject Line', the subject line for Group B. */
    public var subjectb: String?

    /** The amount of time to wait before picking a winner. This cannot be changed after a campaign is sent. */
    public var waitTime: Int?

    /** How unit of time for measuring the winner ('hours' or 'days'). This cannot be changed after a campaign is sent. */
    public var waitUnits: WaitUnits?

    public init(fromNamea: String? = nil, fromNameb: String? = nil, pickWinner: PickWinner? = nil, replyEmaila: String? = nil, replyEmailb: String? = nil, sendTimea: DateTime? = nil, sendTimeb: DateTime? = nil, sendTimeWinner: String? = nil, splitSize: Int? = nil, splitTest: SplitTest? = nil, subjecta: String? = nil, subjectb: String? = nil, waitTime: Int? = nil, waitUnits: WaitUnits? = nil) {
        self.fromNamea = fromNamea
        self.fromNameb = fromNameb
        self.pickWinner = pickWinner
        self.replyEmaila = replyEmaila
        self.replyEmailb = replyEmailb
        self.sendTimea = sendTimea
        self.sendTimeb = sendTimeb
        self.sendTimeWinner = sendTimeWinner
        self.splitSize = splitSize
        self.splitTest = splitTest
        self.subjecta = subjecta
        self.subjectb = subjectb
        self.waitTime = waitTime
        self.waitUnits = waitUnits
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        fromNamea = try container.decodeIfPresent("from_name_a")
        fromNameb = try container.decodeIfPresent("from_name_b")
        pickWinner = try container.decodeIfPresent("pick_winner")
        replyEmaila = try container.decodeIfPresent("reply_email_a")
        replyEmailb = try container.decodeIfPresent("reply_email_b")
        sendTimea = try container.decodeIfPresent("send_time_a")
        sendTimeb = try container.decodeIfPresent("send_time_b")
        sendTimeWinner = try container.decodeIfPresent("send_time_winner")
        splitSize = try container.decodeIfPresent("split_size")
        splitTest = try container.decodeIfPresent("split_test")
        subjecta = try container.decodeIfPresent("subject_a")
        subjectb = try container.decodeIfPresent("subject_b")
        waitTime = try container.decodeIfPresent("wait_time")
        waitUnits = try container.decodeIfPresent("wait_units")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(fromNamea, forKey: "from_name_a")
        try container.encodeIfPresent(fromNameb, forKey: "from_name_b")
        try container.encodeIfPresent(pickWinner, forKey: "pick_winner")
        try container.encodeIfPresent(replyEmaila, forKey: "reply_email_a")
        try container.encodeIfPresent(replyEmailb, forKey: "reply_email_b")
        try container.encodeIfPresent(sendTimea, forKey: "send_time_a")
        try container.encodeIfPresent(sendTimeb, forKey: "send_time_b")
        try container.encodeIfPresent(sendTimeWinner, forKey: "send_time_winner")
        try container.encodeIfPresent(splitSize, forKey: "split_size")
        try container.encodeIfPresent(splitTest, forKey: "split_test")
        try container.encodeIfPresent(subjecta, forKey: "subject_a")
        try container.encodeIfPresent(subjectb, forKey: "subject_b")
        try container.encodeIfPresent(waitTime, forKey: "wait_time")
        try container.encodeIfPresent(waitUnits, forKey: "wait_units")
    }

}
