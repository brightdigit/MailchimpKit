//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct GetAllFacebookAds200ResponseFacebookAdsInnerAllOf2AudienceEmailSource: Codable, Equatable, Content {

    /** Is the source reference a segment */
    public var isSegment: Bool?

    /** Associated list name to the source */
    public var listName: String?

    /** Email source name */
    public var name: String?

    /** Segment type if this source is tied to a segment */
    public var segmentType: String?

    /** Type of the email source */
    public var type: String?

    public init(isSegment: Bool? = nil, listName: String? = nil, name: String? = nil, segmentType: String? = nil, type: String? = nil) {
        self.isSegment = isSegment
        self.listName = listName
        self.name = name
        self.segmentType = segmentType
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        isSegment = try container.decodeIfPresent("is_segment")
        listName = try container.decodeIfPresent("list_name")
        name = try container.decodeIfPresent("name")
        segmentType = try container.decodeIfPresent("segment_type")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(isSegment, forKey: "is_segment")
        try container.encodeIfPresent(listName, forKey: "list_name")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(segmentType, forKey: "segment_type")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
