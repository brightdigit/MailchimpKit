//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** An individual message in a conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account. */
public struct ConversationMessage: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** A string that identifies this message's conversation */
    public var conversationId: String?

    /** A label representing the email of the sender of this message */
    public var fromEmail: String?

    /** A label representing the sender of this message */
    public var fromLabel: String?

    /** A string that uniquely identifies this message */
    public var id: String?

    /** The list's web ID */
    public var listId: Int?

    /** The plain-text content of the message */
    public var message: String?

    /** Whether this message has been marked as read */
    public var read: Bool?

    /** The subject of this message */
    public var subject: String?

    /** The date and time the message was either sent or received in ISO 8601 format. */
    public var timestamp: DateTime?

    public init(links: [ResourceLink]? = nil, conversationId: String? = nil, fromEmail: String? = nil, fromLabel: String? = nil, id: String? = nil, listId: Int? = nil, message: String? = nil, read: Bool? = nil, subject: String? = nil, timestamp: DateTime? = nil) {
        self.links = links
        self.conversationId = conversationId
        self.fromEmail = fromEmail
        self.fromLabel = fromLabel
        self.id = id
        self.listId = listId
        self.message = message
        self.read = read
        self.subject = subject
        self.timestamp = timestamp
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        conversationId = try container.decodeIfPresent("conversation_id")
        fromEmail = try container.decodeIfPresent("from_email")
        fromLabel = try container.decodeIfPresent("from_label")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        message = try container.decodeIfPresent("message")
        read = try container.decodeIfPresent("read")
        subject = try container.decodeIfPresent("subject")
        timestamp = try container.decodeIfPresent("timestamp")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(conversationId, forKey: "conversation_id")
        try container.encodeIfPresent(fromEmail, forKey: "from_email")
        try container.encodeIfPresent(fromLabel, forKey: "from_label")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(read, forKey: "read")
        try container.encodeIfPresent(subject, forKey: "subject")
        try container.encodeIfPresent(timestamp, forKey: "timestamp")
    }

}
