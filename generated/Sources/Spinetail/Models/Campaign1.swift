//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A summary of an individual campaign's settings and content. */
public struct Campaign1: Codable, Equatable, Content {

    /** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case regular = "regular"
        case plaintext = "plaintext"
        case absplit = "absplit"
        case rss = "rss"
        case variate = "variate"
    }

    /** How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template. */
    public enum ContentType: String, Codable, Equatable, CaseIterable {
        case template = "template"
        case multichannel = "multichannel"
    }

    /** There are four types of [campaigns](https://mailchimp.com/help/getting-started-with-campaigns/) you can create in Mailchimp. A/B Split campaigns have been deprecated and variate campaigns should be used instead. */
    public var type: `Type`

    /** How the campaign's content is put together. The old drag and drop editor uses 'template' while the new editor uses 'multichannel'. Defaults to template. */
    public var contentType: ContentType?

    public var recipients: List4?

    public var rssOpts: RSSOptions1?

    public var settings: CampaignSettings3?

    public var socialCard: CampaignSocialCard?

    public var tracking: CampaignTrackingOptions1?

    public var variateSettings: ABTestOptions1?

    public init(type: `Type`, contentType: ContentType? = nil, recipients: List4? = nil, rssOpts: RSSOptions1? = nil, settings: CampaignSettings3? = nil, socialCard: CampaignSocialCard? = nil, tracking: CampaignTrackingOptions1? = nil, variateSettings: ABTestOptions1? = nil) {
        self.type = type
        self.contentType = contentType
        self.recipients = recipients
        self.rssOpts = rssOpts
        self.settings = settings
        self.socialCard = socialCard
        self.tracking = tracking
        self.variateSettings = variateSettings
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        type = try container.decode("type")
        contentType = try container.decodeIfPresent("content_type")
        recipients = try container.decodeIfPresent("recipients")
        rssOpts = try container.decodeIfPresent("rss_opts")
        settings = try container.decodeIfPresent("settings")
        socialCard = try container.decodeIfPresent("social_card")
        tracking = try container.decodeIfPresent("tracking")
        variateSettings = try container.decodeIfPresent("variate_settings")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(contentType, forKey: "content_type")
        try container.encodeIfPresent(recipients, forKey: "recipients")
        try container.encodeIfPresent(rssOpts, forKey: "rss_opts")
        try container.encodeIfPresent(settings, forKey: "settings")
        try container.encodeIfPresent(socialCard, forKey: "social_card")
        try container.encodeIfPresent(tracking, forKey: "tracking")
        try container.encodeIfPresent(variateSettings, forKey: "variate_settings")
    }

}
