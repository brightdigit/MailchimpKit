//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A single question and the response to that question. */
public struct Response: Codable, Equatable, Content {

    /** The type of question this is. */
    public enum QuestionType: String, Codable, Equatable, CaseIterable {
        case pickOne = "pickOne"
        case pickMany = "pickMany"
        case range = "range"
        case text = "text"
        case email = "email"
    }

    /** The answer to this survey question. */
    public var answer: String?

    /** The survey question. */
    public var query: String?

    /** The unique ID for this question. */
    public var questionId: String?

    /** The type of question this is. */
    public var questionType: QuestionType?

    public init(answer: String? = nil, query: String? = nil, questionId: String? = nil, questionType: QuestionType? = nil) {
        self.answer = answer
        self.query = query
        self.questionId = questionId
        self.questionType = questionType
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        answer = try container.decodeIfPresent("answer")
        query = try container.decodeIfPresent("query")
        questionId = try container.decodeIfPresent("question_id")
        questionType = try container.decodeIfPresent("question_type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(answer, forKey: "answer")
        try container.encodeIfPresent(query, forKey: "query")
        try container.encodeIfPresent(questionId, forKey: "question_id")
        try container.encodeIfPresent(questionType, forKey: "question_type")
    }

}
