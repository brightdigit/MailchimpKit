//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The tracking options for a campaign. */
public struct CampaignTrackingOptions1: Codable, Equatable, Content {

    public var capsule: CapsuleCRMTracking2?

    /** The custom slug for [ClickTale](https://mailchimp.com/help/additional-tracking-options-for-campaigns/) tracking (max of 50 bytes). */
    public var clicktale: String?

    /** Whether to enable e-commerce tracking. */
    public var ecomm360: Bool?

    /** Deprecated */
    public var goalTracking: Bool?

    /** The custom slug for [Google Analytics](https://mailchimp.com/help/integrate-google-analytics-with-mailchimp/) tracking (max of 50 bytes). */
    public var googleAnalytics: String?

    /** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the HTML version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
    public var htmlClicks: Bool?

    /** Whether to [track opens](https://mailchimp.com/help/about-open-tracking/). Defaults to `true`. Cannot be set to false for variate campaigns. */
    public var opens: Bool?

    public var salesforce: SalesforceCRMTracking1?

    /** Whether to [track clicks](https://mailchimp.com/help/enable-and-view-click-tracking/) in the plain-text version of the campaign. Defaults to `true`. Cannot be set to false for variate campaigns. */
    public var textClicks: Bool?

    public init(capsule: CapsuleCRMTracking2? = nil, clicktale: String? = nil, ecomm360: Bool? = nil, goalTracking: Bool? = nil, googleAnalytics: String? = nil, htmlClicks: Bool? = nil, opens: Bool? = nil, salesforce: SalesforceCRMTracking1? = nil, textClicks: Bool? = nil) {
        self.capsule = capsule
        self.clicktale = clicktale
        self.ecomm360 = ecomm360
        self.goalTracking = goalTracking
        self.googleAnalytics = googleAnalytics
        self.htmlClicks = htmlClicks
        self.opens = opens
        self.salesforce = salesforce
        self.textClicks = textClicks
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        capsule = try container.decodeIfPresent("capsule")
        clicktale = try container.decodeIfPresent("clicktale")
        ecomm360 = try container.decodeIfPresent("ecomm360")
        goalTracking = try container.decodeIfPresent("goal_tracking")
        googleAnalytics = try container.decodeIfPresent("google_analytics")
        htmlClicks = try container.decodeIfPresent("html_clicks")
        opens = try container.decodeIfPresent("opens")
        salesforce = try container.decodeIfPresent("salesforce")
        textClicks = try container.decodeIfPresent("text_clicks")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(capsule, forKey: "capsule")
        try container.encodeIfPresent(clicktale, forKey: "clicktale")
        try container.encodeIfPresent(ecomm360, forKey: "ecomm360")
        try container.encodeIfPresent(goalTracking, forKey: "goal_tracking")
        try container.encodeIfPresent(googleAnalytics, forKey: "google_analytics")
        try container.encodeIfPresent(htmlClicks, forKey: "html_clicks")
        try container.encodeIfPresent(opens, forKey: "opens")
        try container.encodeIfPresent(salesforce, forKey: "salesforce")
        try container.encodeIfPresent(textClicks, forKey: "text_clicks")
    }

}
