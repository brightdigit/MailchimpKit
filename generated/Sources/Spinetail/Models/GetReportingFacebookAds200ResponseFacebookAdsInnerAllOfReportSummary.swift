//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Report summary of facebook ad */
public struct GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummary: Codable, Equatable, Content {

    public var averageDailyBudget: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryAverageOrderAmount?

    public var averageOrderAmount: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryAverageOrderAmount?

    public var clickRate: Double?

    public var clicks: Int?

    public var comments: Int?

    public var costPerClick: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryAverageOrderAmount?

    public var ecommerce: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryEcommerce?

    public var extendedAt: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryExtendedAt?

    public var firstTimeBuyers: Int?

    public var hasExtendedAdDuration: Bool?

    public var impressions: Int?

    public var likes: Int?

    public var reach: Int?

    public var returnOnInvestment: Double?

    public var shares: Int?

    public var totalOrders: Int?

    public var totalProductsSold: Int?

    public var uniqueClicks: Int?

    public init(averageDailyBudget: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryAverageOrderAmount? = nil, averageOrderAmount: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryAverageOrderAmount? = nil, clickRate: Double? = nil, clicks: Int? = nil, comments: Int? = nil, costPerClick: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryAverageOrderAmount? = nil, ecommerce: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryEcommerce? = nil, extendedAt: GetReportingFacebookAds200ResponseFacebookAdsInnerAllOfReportSummaryExtendedAt? = nil, firstTimeBuyers: Int? = nil, hasExtendedAdDuration: Bool? = nil, impressions: Int? = nil, likes: Int? = nil, reach: Int? = nil, returnOnInvestment: Double? = nil, shares: Int? = nil, totalOrders: Int? = nil, totalProductsSold: Int? = nil, uniqueClicks: Int? = nil) {
        self.averageDailyBudget = averageDailyBudget
        self.averageOrderAmount = averageOrderAmount
        self.clickRate = clickRate
        self.clicks = clicks
        self.comments = comments
        self.costPerClick = costPerClick
        self.ecommerce = ecommerce
        self.extendedAt = extendedAt
        self.firstTimeBuyers = firstTimeBuyers
        self.hasExtendedAdDuration = hasExtendedAdDuration
        self.impressions = impressions
        self.likes = likes
        self.reach = reach
        self.returnOnInvestment = returnOnInvestment
        self.shares = shares
        self.totalOrders = totalOrders
        self.totalProductsSold = totalProductsSold
        self.uniqueClicks = uniqueClicks
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        averageDailyBudget = try container.decodeIfPresent("average_daily_budget")
        averageOrderAmount = try container.decodeIfPresent("average_order_amount")
        clickRate = try container.decodeIfPresent("click_rate")
        clicks = try container.decodeIfPresent("clicks")
        comments = try container.decodeIfPresent("comments")
        costPerClick = try container.decodeIfPresent("cost_per_click")
        ecommerce = try container.decodeIfPresent("ecommerce")
        extendedAt = try container.decodeIfPresent("extended_at")
        firstTimeBuyers = try container.decodeIfPresent("first_time_buyers")
        hasExtendedAdDuration = try container.decodeIfPresent("has_extended_ad_duration")
        impressions = try container.decodeIfPresent("impressions")
        likes = try container.decodeIfPresent("likes")
        reach = try container.decodeIfPresent("reach")
        returnOnInvestment = try container.decodeIfPresent("return_on_investment")
        shares = try container.decodeIfPresent("shares")
        totalOrders = try container.decodeIfPresent("total_orders")
        totalProductsSold = try container.decodeIfPresent("total_products_sold")
        uniqueClicks = try container.decodeIfPresent("unique_clicks")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(averageDailyBudget, forKey: "average_daily_budget")
        try container.encodeIfPresent(averageOrderAmount, forKey: "average_order_amount")
        try container.encodeIfPresent(clickRate, forKey: "click_rate")
        try container.encodeIfPresent(clicks, forKey: "clicks")
        try container.encodeIfPresent(comments, forKey: "comments")
        try container.encodeIfPresent(costPerClick, forKey: "cost_per_click")
        try container.encodeIfPresent(ecommerce, forKey: "ecommerce")
        try container.encodeIfPresent(extendedAt, forKey: "extended_at")
        try container.encodeIfPresent(firstTimeBuyers, forKey: "first_time_buyers")
        try container.encodeIfPresent(hasExtendedAdDuration, forKey: "has_extended_ad_duration")
        try container.encodeIfPresent(impressions, forKey: "impressions")
        try container.encodeIfPresent(likes, forKey: "likes")
        try container.encodeIfPresent(reach, forKey: "reach")
        try container.encodeIfPresent(returnOnInvestment, forKey: "return_on_investment")
        try container.encodeIfPresent(shares, forKey: "shares")
        try container.encodeIfPresent(totalOrders, forKey: "total_orders")
        try container.encodeIfPresent(totalProductsSold, forKey: "total_products_sold")
        try container.encodeIfPresent(uniqueClicks, forKey: "unique_clicks")
    }

}
