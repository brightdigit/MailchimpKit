//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific cart. */
public struct ECommerceCart1: Codable, Equatable, Content {

    /** The three-letter ISO 4217 code for the currency that the cart uses. */
    public var currencyCode: String

    public var customer: ECommerceCustomer1

    /** A unique identifier for the cart. */
    public var id: String

    /** An array of the cart's line items. */
    public var lines: [ECommerceCartLineItem1]

    /** The order total for the cart. */
    public var orderTotal: Double

    /** A string that uniquely identifies the campaign for a cart. */
    public var campaignId: String?

    /** The URL for the cart. This parameter is required for [Abandoned Cart](https://mailchimp.com/help/create-an-abandoned-cart-email/) automations. */
    public var checkoutURL: String?

    /** The total tax for the cart. */
    public var taxTotal: Double?

    public init(currencyCode: String, customer: ECommerceCustomer1, id: String, lines: [ECommerceCartLineItem1], orderTotal: Double, campaignId: String? = nil, checkoutURL: String? = nil, taxTotal: Double? = nil) {
        self.currencyCode = currencyCode
        self.customer = customer
        self.id = id
        self.lines = lines
        self.orderTotal = orderTotal
        self.campaignId = campaignId
        self.checkoutURL = checkoutURL
        self.taxTotal = taxTotal
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        currencyCode = try container.decode("currency_code")
        customer = try container.decode("customer")
        id = try container.decode("id")
        lines = try container.decodeArray("lines")
        orderTotal = try container.decode("order_total")
        campaignId = try container.decodeIfPresent("campaign_id")
        checkoutURL = try container.decodeIfPresent("checkout_url")
        taxTotal = try container.decodeIfPresent("tax_total")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(currencyCode, forKey: "currency_code")
        try container.encode(customer, forKey: "customer")
        try container.encode(id, forKey: "id")
        try container.encode(lines, forKey: "lines")
        try container.encode(orderTotal, forKey: "order_total")
        try container.encodeIfPresent(campaignId, forKey: "campaign_id")
        try container.encodeIfPresent(checkoutURL, forKey: "checkout_url")
        try container.encodeIfPresent(taxTotal, forKey: "tax_total")
    }

}
