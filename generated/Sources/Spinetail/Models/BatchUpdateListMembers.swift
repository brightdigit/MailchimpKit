//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Batch update list members. */
public struct BatchUpdateListMembers: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The total number of items matching the query, irrespective of pagination. */
    public var errorCount: Int?

    /** An array of objects, each representing an email address that could not be added to the list or updated and an error message providing more details. */
    public var errors: [ErrorsInner]?

    /** An array of objects, each representing a new member that was added to the list. */
    public var newMembers: [ListMembers]?

    /** The total number of items matching the query, irrespective of pagination. */
    public var totalCreated: Int?

    /** The total number of items matching the query, irrespective of pagination. */
    public var totalUpdated: Int?

    /** An array of objects, each representing an existing list member whose subscription status was updated. */
    public var updatedMembers: [ListMembers]?

    public init(links: [ResourceLink]? = nil, errorCount: Int? = nil, errors: [ErrorsInner]? = nil, newMembers: [ListMembers]? = nil, totalCreated: Int? = nil, totalUpdated: Int? = nil, updatedMembers: [ListMembers]? = nil) {
        self.links = links
        self.errorCount = errorCount
        self.errors = errors
        self.newMembers = newMembers
        self.totalCreated = totalCreated
        self.totalUpdated = totalUpdated
        self.updatedMembers = updatedMembers
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        errorCount = try container.decodeIfPresent("error_count")
        errors = try container.decodeArrayIfPresent("errors")
        newMembers = try container.decodeArrayIfPresent("new_members")
        totalCreated = try container.decodeIfPresent("total_created")
        totalUpdated = try container.decodeIfPresent("total_updated")
        updatedMembers = try container.decodeArrayIfPresent("updated_members")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(errorCount, forKey: "error_count")
        try container.encodeIfPresent(errors, forKey: "errors")
        try container.encodeIfPresent(newMembers, forKey: "new_members")
        try container.encodeIfPresent(totalCreated, forKey: "total_created")
        try container.encodeIfPresent(totalUpdated, forKey: "total_updated")
        try container.encodeIfPresent(updatedMembers, forKey: "updated_members")
    }

}
