//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about subscribers in an Automation email queue. */
public struct SubscriberInAutomationQueue: Codable, Equatable, Content {

    /** The list member's email address. */
    public var emailAddress: String

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** A string that uniquely identifies an email in an Automation workflow. */
    public var emailId: String?

    /** The MD5 hash of the lowercase version of the list member's email address. */
    public var id: String?

    /** A string that uniquely identifies a list. */
    public var listId: String?

    /** The date and time of the next send for the workflow email in ISO 8601 format. */
    public var nextSend: DateTime?

    /** A string that uniquely identifies an Automation workflow. */
    public var workflowId: String?

    public init(emailAddress: String, links: [ResourceLink]? = nil, emailId: String? = nil, id: String? = nil, listId: String? = nil, nextSend: DateTime? = nil, workflowId: String? = nil) {
        self.emailAddress = emailAddress
        self.links = links
        self.emailId = emailId
        self.id = id
        self.listId = listId
        self.nextSend = nextSend
        self.workflowId = workflowId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        emailAddress = try container.decode("email_address")
        links = try container.decodeArrayIfPresent("_links")
        emailId = try container.decodeIfPresent("email_id")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        nextSend = try container.decodeIfPresent("next_send")
        workflowId = try container.decodeIfPresent("workflow_id")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(emailAddress, forKey: "email_address")
        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(emailId, forKey: "email_id")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(nextSend, forKey: "next_send")
        try container.encodeIfPresent(workflowId, forKey: "workflow_id")
    }

}
