//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The status of a batch request */
public struct Batch: Codable, Equatable, Content {

    /** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
    public enum Status: String, Codable, Equatable, CaseIterable {
        case pending = "pending"
        case preprocessing = "preprocessing"
        case started = "started"
        case finalizing = "finalizing"
        case finished = "finished"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The date and time when all operations in the batch request completed in ISO 8601 format. */
    public var completedAt: DateTime?

    /** The number of completed operations that returned an error. */
    public var erroredOperations: Int?

    /** The number of completed operations. This includes operations that returned an error. */
    public var finishedOperations: Int?

    /** A string that uniquely identifies this batch request. */
    public var id: String?

    /** The URL of the gzipped archive of the results of all the operations. */
    public var responseBodyURL: String?

    /** The status of the batch call. [Learn more](https://mailchimp.com/developer/marketing/guides/run-async-requests-batch-endpoint/#check-the-status-of-a-batch-operation) about the batch operation status. */
    public var status: Status?

    /** The date and time when the server received the batch request in ISO 8601 format. */
    public var submittedAt: DateTime?

    /** The total number of operations to complete as part of this batch request. For GET requests requiring pagination, each page counts as a separate operation. */
    public var totalOperations: Int?

    public init(links: [ResourceLink]? = nil, completedAt: DateTime? = nil, erroredOperations: Int? = nil, finishedOperations: Int? = nil, id: String? = nil, responseBodyURL: String? = nil, status: Status? = nil, submittedAt: DateTime? = nil, totalOperations: Int? = nil) {
        self.links = links
        self.completedAt = completedAt
        self.erroredOperations = erroredOperations
        self.finishedOperations = finishedOperations
        self.id = id
        self.responseBodyURL = responseBodyURL
        self.status = status
        self.submittedAt = submittedAt
        self.totalOperations = totalOperations
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        completedAt = try container.decodeIfPresent("completed_at")
        erroredOperations = try container.decodeIfPresent("errored_operations")
        finishedOperations = try container.decodeIfPresent("finished_operations")
        id = try container.decodeIfPresent("id")
        responseBodyURL = try container.decodeIfPresent("response_body_url")
        status = try container.decodeIfPresent("status")
        submittedAt = try container.decodeIfPresent("submitted_at")
        totalOperations = try container.decodeIfPresent("total_operations")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(completedAt, forKey: "completed_at")
        try container.encodeIfPresent(erroredOperations, forKey: "errored_operations")
        try container.encodeIfPresent(finishedOperations, forKey: "finished_operations")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(responseBodyURL, forKey: "response_body_url")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(submittedAt, forKey: "submitted_at")
        try container.encodeIfPresent(totalOperations, forKey: "total_operations")
    }

}
