//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about an Ecommerce Store's specific Promo Code. */
public struct ECommercePromoCode1: Codable, Equatable, Content {

    /** The discount code. Restricted to UTF-8 characters with max length 50. */
    public var code: String

    /** A unique identifier for the promo code. Restricted to UTF-8 characters with max length 50. */
    public var id: String

    /** The url that should be used in the promotion campaign restricted to UTF-8 characters with max length 2000. */
    public var redemptionURL: String

    /** The date and time the promotion was created in ISO 8601 format. */
    public var createdAtForeign: DateTime?

    /** Whether the promo code is currently enabled. */
    public var enabled: Bool?

    /** The date and time the promotion was updated in ISO 8601 format. */
    public var updatedAtForeign: DateTime?

    /** Number of times promo code has been used. */
    public var usageCount: Int?

    public init(code: String, id: String, redemptionURL: String, createdAtForeign: DateTime? = nil, enabled: Bool? = nil, updatedAtForeign: DateTime? = nil, usageCount: Int? = nil) {
        self.code = code
        self.id = id
        self.redemptionURL = redemptionURL
        self.createdAtForeign = createdAtForeign
        self.enabled = enabled
        self.updatedAtForeign = updatedAtForeign
        self.usageCount = usageCount
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        code = try container.decode("code")
        id = try container.decode("id")
        redemptionURL = try container.decode("redemption_url")
        createdAtForeign = try container.decodeIfPresent("created_at_foreign")
        enabled = try container.decodeIfPresent("enabled")
        updatedAtForeign = try container.decodeIfPresent("updated_at_foreign")
        usageCount = try container.decodeIfPresent("usage_count")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(code, forKey: "code")
        try container.encode(id, forKey: "id")
        try container.encode(redemptionURL, forKey: "redemption_url")
        try container.encodeIfPresent(createdAtForeign, forKey: "created_at_foreign")
        try container.encodeIfPresent(enabled, forKey: "enabled")
        try container.encodeIfPresent(updatedAtForeign, forKey: "updated_at_foreign")
        try container.encodeIfPresent(usageCount, forKey: "usage_count")
    }

}
