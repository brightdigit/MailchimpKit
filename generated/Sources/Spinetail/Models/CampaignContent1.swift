//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The HTML and plain-text content for a campaign */
public struct CampaignContent1: Codable, Equatable, Content {

    public var archive: UploadArchive?

    /** The raw HTML for the campaign. */
    public var html: String?

    /** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
    public var plainText: String?

    public var template: TemplateContent?

    /** When importing a campaign, the URL where the HTML lives. */
    public var url: String?

    /** Content options for [Multivariate Campaigns](https://mailchimp.com/help/about-multivariate-campaigns/). Each content option must provide HTML content and may optionally provide plain text. For campaigns not testing content, only one object should be provided. */
    public var variateContents: [VariateContentsInner1]?

    public init(archive: UploadArchive? = nil, html: String? = nil, plainText: String? = nil, template: TemplateContent? = nil, url: String? = nil, variateContents: [VariateContentsInner1]? = nil) {
        self.archive = archive
        self.html = html
        self.plainText = plainText
        self.template = template
        self.url = url
        self.variateContents = variateContents
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        archive = try container.decodeIfPresent("archive")
        html = try container.decodeIfPresent("html")
        plainText = try container.decodeIfPresent("plain_text")
        template = try container.decodeIfPresent("template")
        url = try container.decodeIfPresent("url")
        variateContents = try container.decodeArrayIfPresent("variate_contents")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(archive, forKey: "archive")
        try container.encodeIfPresent(html, forKey: "html")
        try container.encodeIfPresent(plainText, forKey: "plain_text")
        try container.encodeIfPresent(template, forKey: "template")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(variateContents, forKey: "variate_contents")
    }

}
