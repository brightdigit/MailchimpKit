//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct VariateContentsInner1: Codable, Equatable, Content {

    /** The label used to identify the content option. */
    public var contentLabel: String

    public var archive: UploadArchive?

    /** The raw HTML for the campaign. */
    public var html: String?

    /** The plain-text portion of the campaign. If left unspecified, we'll generate this automatically. */
    public var plainText: String?

    public var template: TemplateContent1?

    /** When importing a campaign, the URL for the HTML. */
    public var url: String?

    public init(contentLabel: String, archive: UploadArchive? = nil, html: String? = nil, plainText: String? = nil, template: TemplateContent1? = nil, url: String? = nil) {
        self.contentLabel = contentLabel
        self.archive = archive
        self.html = html
        self.plainText = plainText
        self.template = template
        self.url = url
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        contentLabel = try container.decode("content_label")
        archive = try container.decodeIfPresent("archive")
        html = try container.decodeIfPresent("html")
        plainText = try container.decodeIfPresent("plain_text")
        template = try container.decodeIfPresent("template")
        url = try container.decodeIfPresent("url")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(contentLabel, forKey: "content_label")
        try container.encodeIfPresent(archive, forKey: "archive")
        try container.encodeIfPresent(html, forKey: "html")
        try container.encodeIfPresent(plainText, forKey: "plain_text")
        try container.encodeIfPresent(template, forKey: "template")
        try container.encodeIfPresent(url, forKey: "url")
    }

}
