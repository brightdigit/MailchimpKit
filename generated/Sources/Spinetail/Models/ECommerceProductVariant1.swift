//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific product variant. */
public struct ECommerceProductVariant1: Codable, Equatable, Content {

    /** A unique identifier for the product variant. */
    public var id: String

    /** The title of a product variant. */
    public var title: String

    /** The backorders of a product variant. */
    public var backorders: String?

    /** The image URL for a product variant. */
    public var imageURL: String?

    /** The inventory quantity of a product variant. */
    public var inventoryQuantity: Int?

    /** The price of a product variant. */
    public var price: Double?

    /** The stock keeping unit (SKU) of a product variant. */
    public var sku: String?

    /** The URL for a product variant. */
    public var url: String?

    /** The visibility of a product variant. */
    public var visibility: String?

    public init(id: String, title: String, backorders: String? = nil, imageURL: String? = nil, inventoryQuantity: Int? = nil, price: Double? = nil, sku: String? = nil, url: String? = nil, visibility: String? = nil) {
        self.id = id
        self.title = title
        self.backorders = backorders
        self.imageURL = imageURL
        self.inventoryQuantity = inventoryQuantity
        self.price = price
        self.sku = sku
        self.url = url
        self.visibility = visibility
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        title = try container.decode("title")
        backorders = try container.decodeIfPresent("backorders")
        imageURL = try container.decodeIfPresent("image_url")
        inventoryQuantity = try container.decodeIfPresent("inventory_quantity")
        price = try container.decodeIfPresent("price")
        sku = try container.decodeIfPresent("sku")
        url = try container.decodeIfPresent("url")
        visibility = try container.decodeIfPresent("visibility")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(title, forKey: "title")
        try container.encodeIfPresent(backorders, forKey: "backorders")
        try container.encodeIfPresent(imageURL, forKey: "image_url")
        try container.encodeIfPresent(inventoryQuantity, forKey: "inventory_quantity")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(sku, forKey: "sku")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(visibility, forKey: "visibility")
    }

}
