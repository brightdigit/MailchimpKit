//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific segment. */
public struct List7: Codable, Equatable, Content {

    /** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case saved = "saved"
        case `static` = "static"
        case fuzzy = "fuzzy"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The date and time the segment was created in ISO 8601 format. */
    public var createdAt: DateTime?

    /** The unique id for the segment. */
    public var id: Int?

    /** The list id. */
    public var listId: String?

    /** The number of active subscribers currently included in the segment. */
    public var memberCount: Int?

    /** The name of the segment. */
    public var name: String?

    public var options: Conditions?

    /** The type of segment. Static segments are now known as tags. Learn more about [tags](https://mailchimp.com/help/getting-started-tags?utm_source=mc-api&utm_medium=docs&utm_campaign=apidocs). */
    public var type: `Type`?

    /** The date and time the segment was last updated in ISO 8601 format. */
    public var updatedAt: DateTime?

    public init(links: [ResourceLink]? = nil, createdAt: DateTime? = nil, id: Int? = nil, listId: String? = nil, memberCount: Int? = nil, name: String? = nil, options: Conditions? = nil, type: `Type`? = nil, updatedAt: DateTime? = nil) {
        self.links = links
        self.createdAt = createdAt
        self.id = id
        self.listId = listId
        self.memberCount = memberCount
        self.name = name
        self.options = options
        self.type = type
        self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        createdAt = try container.decodeIfPresent("created_at")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        memberCount = try container.decodeIfPresent("member_count")
        name = try container.decodeIfPresent("name")
        options = try container.decodeIfPresent("options")
        type = try container.decodeIfPresent("type")
        updatedAt = try container.decodeIfPresent("updated_at")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(createdAt, forKey: "created_at")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(memberCount, forKey: "member_count")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(options, forKey: "options")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(updatedAt, forKey: "updated_at")
    }

}
