//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Details about an individual conversation. Conversation tracking is a feature available to paid accounts that lets you view replies to your campaigns in your Mailchimp account. */
public struct Conversation: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The unique identifier of the campaign for this conversation. */
    public var campaignId: String?

    /** A label representing the email of the sender of this message. */
    public var fromEmail: String?

    /** A label representing the sender of this message. */
    public var fromLabel: String?

    /** A string that uniquely identifies this conversation. */
    public var id: String?

    public var lastMessage: LastMessage?

    /** The unique identifier of the list for this conversation. */
    public var listId: String?

    /** The total number of messages in this conversation. */
    public var messageCount: Int?

    /** The subject of the message. */
    public var subject: String?

    /** The number of unread messages in this conversation. */
    public var unreadMessages: Int?

    public init(links: [ResourceLink]? = nil, campaignId: String? = nil, fromEmail: String? = nil, fromLabel: String? = nil, id: String? = nil, lastMessage: LastMessage? = nil, listId: String? = nil, messageCount: Int? = nil, subject: String? = nil, unreadMessages: Int? = nil) {
        self.links = links
        self.campaignId = campaignId
        self.fromEmail = fromEmail
        self.fromLabel = fromLabel
        self.id = id
        self.lastMessage = lastMessage
        self.listId = listId
        self.messageCount = messageCount
        self.subject = subject
        self.unreadMessages = unreadMessages
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        campaignId = try container.decodeIfPresent("campaign_id")
        fromEmail = try container.decodeIfPresent("from_email")
        fromLabel = try container.decodeIfPresent("from_label")
        id = try container.decodeIfPresent("id")
        lastMessage = try container.decodeIfPresent("last_message")
        listId = try container.decodeIfPresent("list_id")
        messageCount = try container.decodeIfPresent("message_count")
        subject = try container.decodeIfPresent("subject")
        unreadMessages = try container.decodeIfPresent("unread_messages")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(campaignId, forKey: "campaign_id")
        try container.encodeIfPresent(fromEmail, forKey: "from_email")
        try container.encodeIfPresent(fromLabel, forKey: "from_label")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastMessage, forKey: "last_message")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(messageCount, forKey: "message_count")
        try container.encodeIfPresent(subject, forKey: "subject")
        try container.encodeIfPresent(unreadMessages, forKey: "unread_messages")
    }

}
