//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The verified domains currently on the account. */
public struct VerifiedDomains: Codable, Equatable, Content {

    /** Whether domain authentication is enabled for this domain. */
    public var authenticated: Bool?

    /** The name of this domain. */
    public var domain: String?

    /** The e-mail address receiving the two-factor challenge for this domain. */
    public var verificationEmail: String?

    /** The date/time that the two-factor challenge was sent to the verification email. */
    public var verificationSent: DateTime?

    /** Whether the domain has been verified for sending. */
    public var verified: Bool?

    public init(authenticated: Bool? = nil, domain: String? = nil, verificationEmail: String? = nil, verificationSent: DateTime? = nil, verified: Bool? = nil) {
        self.authenticated = authenticated
        self.domain = domain
        self.verificationEmail = verificationEmail
        self.verificationSent = verificationSent
        self.verified = verified
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        authenticated = try container.decodeIfPresent("authenticated")
        domain = try container.decodeIfPresent("domain")
        verificationEmail = try container.decodeIfPresent("verification_email")
        verificationSent = try container.decodeIfPresent("verification_sent")
        verified = try container.decodeIfPresent("verified")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(authenticated, forKey: "authenticated")
        try container.encodeIfPresent(domain, forKey: "domain")
        try container.encodeIfPresent(verificationEmail, forKey: "verification_email")
        try container.encodeIfPresent(verificationSent, forKey: "verification_sent")
        try container.encodeIfPresent(verified, forKey: "verified")
    }

}
