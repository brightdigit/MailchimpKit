//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct CombinationsInner: Codable, Equatable, Content {

    /** The index of `variate_settings.contents` used. */
    public var contentDescription: Int?

    /** The index of `variate_settings.from_names` used. */
    public var fromName: Int?

    /** Unique ID for the combination. */
    public var id: String?

    /** The number of recipients for this combination. */
    public var recipients: Int?

    /** The index of `variate_settings.reply_to_addresses` used. */
    public var replyTo: Int?

    /** The index of `variate_settings.send_times` used. */
    public var sendTime: Int?

    /** The index of `variate_settings.subject_lines` used. */
    public var subjectLine: Int?

    public init(contentDescription: Int? = nil, fromName: Int? = nil, id: String? = nil, recipients: Int? = nil, replyTo: Int? = nil, sendTime: Int? = nil, subjectLine: Int? = nil) {
        self.contentDescription = contentDescription
        self.fromName = fromName
        self.id = id
        self.recipients = recipients
        self.replyTo = replyTo
        self.sendTime = sendTime
        self.subjectLine = subjectLine
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        contentDescription = try container.decodeIfPresent("content_description")
        fromName = try container.decodeIfPresent("from_name")
        id = try container.decodeIfPresent("id")
        recipients = try container.decodeIfPresent("recipients")
        replyTo = try container.decodeIfPresent("reply_to")
        sendTime = try container.decodeIfPresent("send_time")
        subjectLine = try container.decodeIfPresent("subject_line")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(contentDescription, forKey: "content_description")
        try container.encodeIfPresent(fromName, forKey: "from_name")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(recipients, forKey: "recipients")
        try container.encodeIfPresent(replyTo, forKey: "reply_to")
        try container.encodeIfPresent(sendTime, forKey: "send_time")
        try container.encodeIfPresent(subjectLine, forKey: "subject_line")
    }

}
