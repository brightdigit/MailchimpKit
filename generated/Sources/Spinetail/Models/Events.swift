//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A new event for a specific list member */
public struct Events: Codable, Equatable, Content {

    /** The name for this type of event ('purchased', 'visited', etc). Must be 2-30 characters in length */
    public var name: String

    /** Events created with the is_syncing value set to `true` will not trigger automations. */
    public var isSyncing: Bool?

    /** The date and time the event occurred in ISO 8601 format. */
    public var occurredAt: DateTime?

    /** An optional list of properties */
    public var properties: [String: String]?

    public init(name: String, isSyncing: Bool? = nil, occurredAt: DateTime? = nil, properties: [String: String]? = nil) {
        self.name = name
        self.isSyncing = isSyncing
        self.occurredAt = occurredAt
        self.properties = properties
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        name = try container.decode("name")
        isSyncing = try container.decodeIfPresent("is_syncing")
        occurredAt = try container.decodeIfPresent("occurred_at")
        properties = try container.decodeIfPresent("properties")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(name, forKey: "name")
        try container.encodeIfPresent(isSyncing, forKey: "is_syncing")
        try container.encodeIfPresent(occurredAt, forKey: "occurred_at")
        try container.encodeIfPresent(properties, forKey: "properties")
    }

}
