//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The details of a survey question's report. */
public struct SurveyQuestionReport: Codable, Equatable, Content {

    /** The response type of the survey question. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case pickOne = "pickOne"
        case pickMany = "pickMany"
        case range = "range"
        case text = "text"
        case email = "email"
    }

    /** The average rating for this range question. */
    public var averageRating: Float?

    public var contactCounts: ContactCounts?

    /** Whether this survey question has an 'other' option. */
    public var hasOther: Bool?

    /** The ID of the survey question. */
    public var id: String?

    /** Whether this survey question is required to answer. */
    public var isRequired: Bool?

    public var mergeField: MergeField3?

    /** The answer choices for this question. */
    public var options: [OptionsInner]?

    /** Label used for the 'other' option of this survey question. */
    public var otherLabel: String?

    /** Placeholder text for this survey question's answer box. */
    public var placeholderLabel: String?

    /** The query of the survey question. */
    public var query: String?

    /** Label for the high end of the range. */
    public var rangeHighLabel: String?

    /** Label for the low end of the range. */
    public var rangeLowLabel: String?

    /** Whether the subscribe checkbox is shown for this email question. */
    public var subscribeCheckboxEnabled: Bool?

    /** Label used for the subscribe checkbox for this email question. */
    public var subscribeCheckboxLabel: String?

    /** The unique ID of the survey. */
    public var surveyId: String?

    /** The total number of responses to this question. */
    public var totalResponses: Int?

    /** The response type of the survey question. */
    public var type: `Type`?

    public init(averageRating: Float? = nil, contactCounts: ContactCounts? = nil, hasOther: Bool? = nil, id: String? = nil, isRequired: Bool? = nil, mergeField: MergeField3? = nil, options: [OptionsInner]? = nil, otherLabel: String? = nil, placeholderLabel: String? = nil, query: String? = nil, rangeHighLabel: String? = nil, rangeLowLabel: String? = nil, subscribeCheckboxEnabled: Bool? = nil, subscribeCheckboxLabel: String? = nil, surveyId: String? = nil, totalResponses: Int? = nil, type: `Type`? = nil) {
        self.averageRating = averageRating
        self.contactCounts = contactCounts
        self.hasOther = hasOther
        self.id = id
        self.isRequired = isRequired
        self.mergeField = mergeField
        self.options = options
        self.otherLabel = otherLabel
        self.placeholderLabel = placeholderLabel
        self.query = query
        self.rangeHighLabel = rangeHighLabel
        self.rangeLowLabel = rangeLowLabel
        self.subscribeCheckboxEnabled = subscribeCheckboxEnabled
        self.subscribeCheckboxLabel = subscribeCheckboxLabel
        self.surveyId = surveyId
        self.totalResponses = totalResponses
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        averageRating = try container.decodeIfPresent("average_rating")
        contactCounts = try container.decodeIfPresent("contact_counts")
        hasOther = try container.decodeIfPresent("has_other")
        id = try container.decodeIfPresent("id")
        isRequired = try container.decodeIfPresent("is_required")
        mergeField = try container.decodeIfPresent("merge_field")
        options = try container.decodeArrayIfPresent("options")
        otherLabel = try container.decodeIfPresent("other_label")
        placeholderLabel = try container.decodeIfPresent("placeholder_label")
        query = try container.decodeIfPresent("query")
        rangeHighLabel = try container.decodeIfPresent("range_high_label")
        rangeLowLabel = try container.decodeIfPresent("range_low_label")
        subscribeCheckboxEnabled = try container.decodeIfPresent("subscribe_checkbox_enabled")
        subscribeCheckboxLabel = try container.decodeIfPresent("subscribe_checkbox_label")
        surveyId = try container.decodeIfPresent("survey_id")
        totalResponses = try container.decodeIfPresent("total_responses")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(averageRating, forKey: "average_rating")
        try container.encodeIfPresent(contactCounts, forKey: "contact_counts")
        try container.encodeIfPresent(hasOther, forKey: "has_other")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(isRequired, forKey: "is_required")
        try container.encodeIfPresent(mergeField, forKey: "merge_field")
        try container.encodeIfPresent(options, forKey: "options")
        try container.encodeIfPresent(otherLabel, forKey: "other_label")
        try container.encodeIfPresent(placeholderLabel, forKey: "placeholder_label")
        try container.encodeIfPresent(query, forKey: "query")
        try container.encodeIfPresent(rangeHighLabel, forKey: "range_high_label")
        try container.encodeIfPresent(rangeLowLabel, forKey: "range_low_label")
        try container.encodeIfPresent(subscribeCheckboxEnabled, forKey: "subscribe_checkbox_enabled")
        try container.encodeIfPresent(subscribeCheckboxLabel, forKey: "subscribe_checkbox_label")
        try container.encodeIfPresent(surveyId, forKey: "survey_id")
        try container.encodeIfPresent(totalResponses, forKey: "total_responses")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
