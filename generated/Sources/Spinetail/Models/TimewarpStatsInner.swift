//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct TimewarpStatsInner: Codable, Equatable, Content {

    /** The number of bounces. */
    public var bounces: Int?

    /** The number of clicks. */
    public var clicks: Int?

    /** For campaigns sent with timewarp, the time zone group the member is apart of. */
    public var gmtOffset: Int?

    /** The date and time of the last click in ISO 8601 format. */
    public var lastClick: DateTime?

    /** The date and time of the last open in ISO 8601 format. */
    public var lastOpen: DateTime?

    /** The number of opens. */
    public var opens: Int?

    /** The number of unique clicks. */
    public var uniqueClicks: Int?

    /** The number of unique opens. */
    public var uniqueOpens: Int?

    public init(bounces: Int? = nil, clicks: Int? = nil, gmtOffset: Int? = nil, lastClick: DateTime? = nil, lastOpen: DateTime? = nil, opens: Int? = nil, uniqueClicks: Int? = nil, uniqueOpens: Int? = nil) {
        self.bounces = bounces
        self.clicks = clicks
        self.gmtOffset = gmtOffset
        self.lastClick = lastClick
        self.lastOpen = lastOpen
        self.opens = opens
        self.uniqueClicks = uniqueClicks
        self.uniqueOpens = uniqueOpens
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bounces = try container.decodeIfPresent("bounces")
        clicks = try container.decodeIfPresent("clicks")
        gmtOffset = try container.decodeIfPresent("gmt_offset")
        lastClick = try container.decodeIfPresent("last_click")
        lastOpen = try container.decodeIfPresent("last_open")
        opens = try container.decodeIfPresent("opens")
        uniqueClicks = try container.decodeIfPresent("unique_clicks")
        uniqueOpens = try container.decodeIfPresent("unique_opens")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bounces, forKey: "bounces")
        try container.encodeIfPresent(clicks, forKey: "clicks")
        try container.encodeIfPresent(gmtOffset, forKey: "gmt_offset")
        try container.encodeIfPresent(lastClick, forKey: "last_click")
        try container.encodeIfPresent(lastOpen, forKey: "last_open")
        try container.encodeIfPresent(opens, forKey: "opens")
        try container.encodeIfPresent(uniqueClicks, forKey: "unique_clicks")
        try container.encodeIfPresent(uniqueOpens, forKey: "unique_opens")
    }

}
