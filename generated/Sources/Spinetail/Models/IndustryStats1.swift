//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The average campaign statistics for your industry. */
public struct IndustryStats1: Codable, Equatable, Content {

    /** The industry abuse rate. */
    public var abuseRate: Double?

    /** The industry bounce rate. */
    public var bounceRate: Double?

    /** The industry click rate. */
    public var clickRate: Double?

    /** The industry open rate. */
    public var openRate: Double?

    /** The type of business industry associated with your account. For example: retail, education, etc. */
    public var type: String?

    /** The industry unopened rate. */
    public var unopenRate: Double?

    /** The industry unsubscribe rate. */
    public var unsubRate: Double?

    public init(abuseRate: Double? = nil, bounceRate: Double? = nil, clickRate: Double? = nil, openRate: Double? = nil, type: String? = nil, unopenRate: Double? = nil, unsubRate: Double? = nil) {
        self.abuseRate = abuseRate
        self.bounceRate = bounceRate
        self.clickRate = clickRate
        self.openRate = openRate
        self.type = type
        self.unopenRate = unopenRate
        self.unsubRate = unsubRate
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        abuseRate = try container.decodeIfPresent("abuse_rate")
        bounceRate = try container.decodeIfPresent("bounce_rate")
        clickRate = try container.decodeIfPresent("click_rate")
        openRate = try container.decodeIfPresent("open_rate")
        type = try container.decodeIfPresent("type")
        unopenRate = try container.decodeIfPresent("unopen_rate")
        unsubRate = try container.decodeIfPresent("unsub_rate")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(abuseRate, forKey: "abuse_rate")
        try container.encodeIfPresent(bounceRate, forKey: "bounce_rate")
        try container.encodeIfPresent(clickRate, forKey: "click_rate")
        try container.encodeIfPresent(openRate, forKey: "open_rate")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(unopenRate, forKey: "unopen_rate")
        try container.encodeIfPresent(unsubRate, forKey: "unsub_rate")
    }

}
