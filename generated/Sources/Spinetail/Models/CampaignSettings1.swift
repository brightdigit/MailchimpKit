//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Settings for the campaign including the email subject, from name, and from email address. */
public struct CampaignSettings1: Codable, Equatable, Content {

    /** The 'from' name for the Automation (not an email address). */
    public var fromName: String?

    /** The preview text for the campaign. */
    public var previewText: String?

    /** The reply-to email address for the Automation. */
    public var replyTo: String?

    /** The subject line for the campaign. */
    public var subjectLine: String?

    /** The title of the Automation. */
    public var title: String?

    public init(fromName: String? = nil, previewText: String? = nil, replyTo: String? = nil, subjectLine: String? = nil, title: String? = nil) {
        self.fromName = fromName
        self.previewText = previewText
        self.replyTo = replyTo
        self.subjectLine = subjectLine
        self.title = title
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        fromName = try container.decodeIfPresent("from_name")
        previewText = try container.decodeIfPresent("preview_text")
        replyTo = try container.decodeIfPresent("reply_to")
        subjectLine = try container.decodeIfPresent("subject_line")
        title = try container.decodeIfPresent("title")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(fromName, forKey: "from_name")
        try container.encodeIfPresent(previewText, forKey: "preview_text")
        try container.encodeIfPresent(replyTo, forKey: "reply_to")
        try container.encodeIfPresent(subjectLine, forKey: "subject_line")
        try container.encodeIfPresent(title, forKey: "title")
    }

}
