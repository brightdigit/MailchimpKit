//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Assign subscribers to interests to group them together. Interests are referred to as 'group names' in the Mailchimp application. */
public struct Interest: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The id for the interest category. */
    public var categoryId: String?

    /** The display order for interests. */
    public var displayOrder: Int?

    /** The ID for the interest. */
    public var id: String?

    /** The ID for the list that this interest belongs to. */
    public var listId: String?

    /** The name of the interest. This can be shown publicly on a subscription form. */
    public var name: String?

    /** The number of subscribers associated with this interest. */
    public var subscriberCount: String?

    public init(links: [ResourceLink]? = nil, categoryId: String? = nil, displayOrder: Int? = nil, id: String? = nil, listId: String? = nil, name: String? = nil, subscriberCount: String? = nil) {
        self.links = links
        self.categoryId = categoryId
        self.displayOrder = displayOrder
        self.id = id
        self.listId = listId
        self.name = name
        self.subscriberCount = subscriberCount
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        categoryId = try container.decodeIfPresent("category_id")
        displayOrder = try container.decodeIfPresent("display_order")
        id = try container.decodeIfPresent("id")
        listId = try container.decodeIfPresent("list_id")
        name = try container.decodeIfPresent("name")
        subscriberCount = try container.decodeIfPresent("subscriber_count")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(categoryId, forKey: "category_id")
        try container.encodeIfPresent(displayOrder, forKey: "display_order")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(subscriberCount, forKey: "subscriber_count")
    }

}
