//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Members to subscribe to or unsubscribe from a list. */
public struct MembersToSubscribeUnsubscribeToFromaListInBatch: Codable, Equatable, Content {

    /** An array of objects, each representing an email address and the subscription status for a specific list. Up to 500 members may be added or updated with each API call. */
    public var members: [AddListMembers]

    /** Whether this batch operation will replace all existing tags with tags in request. */
    public var syncTags: Bool?

    /** Whether this batch operation will change existing members' subscription status. */
    public var updateExisting: Bool?

    public init(members: [AddListMembers], syncTags: Bool? = nil, updateExisting: Bool? = nil) {
        self.members = members
        self.syncTags = syncTags
        self.updateExisting = updateExisting
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        members = try container.decodeArray("members")
        syncTags = try container.decodeIfPresent("sync_tags")
        updateExisting = try container.decodeIfPresent("update_existing")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(members, forKey: "members")
        try container.encodeIfPresent(syncTags, forKey: "sync_tags")
        try container.encodeIfPresent(updateExisting, forKey: "update_existing")
    }

}
