//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience. */
public struct MergeField2: Codable, Equatable, Content {

    /** The name of the merge field (audience field). */
    public var name: String

    /** The default value for the merge field if `null`. */
    public var defaultValue: String?

    /** The order that the merge field displays on the list signup form. */
    public var displayOrder: Int?

    /** Extra text to help the subscriber fill out the form. */
    public var helpText: String?

    public var options: MergeFieldOptions2?

    /** Whether the merge field is displayed on the signup form. */
    public var `public`: Bool?

    /** Whether the merge field is required to import a contact. */
    public var required: Bool?

    /** The merge tag used for Mailchimp campaigns and [adding contact information](https://mailchimp.com/developer/marketing/docs/merge-fields/#add-merge-data-to-contacts). */
    public var tag: String?

    public init(name: String, defaultValue: String? = nil, displayOrder: Int? = nil, helpText: String? = nil, options: MergeFieldOptions2? = nil, `public`: Bool? = nil, required: Bool? = nil, tag: String? = nil) {
        self.name = name
        self.defaultValue = defaultValue
        self.displayOrder = displayOrder
        self.helpText = helpText
        self.options = options
        self.`public` = `public`
        self.required = required
        self.tag = tag
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        name = try container.decode("name")
        defaultValue = try container.decodeIfPresent("default_value")
        displayOrder = try container.decodeIfPresent("display_order")
        helpText = try container.decodeIfPresent("help_text")
        options = try container.decodeIfPresent("options")
        `public` = try container.decodeIfPresent("public")
        required = try container.decodeIfPresent("required")
        tag = try container.decodeIfPresent("tag")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(name, forKey: "name")
        try container.encodeIfPresent(defaultValue, forKey: "default_value")
        try container.encodeIfPresent(displayOrder, forKey: "display_order")
        try container.encodeIfPresent(helpText, forKey: "help_text")
        try container.encodeIfPresent(options, forKey: "options")
        try container.encodeIfPresent(`public`, forKey: "public")
        try container.encodeIfPresent(required, forKey: "required")
        try container.encodeIfPresent(tag, forKey: "tag")
    }

}
