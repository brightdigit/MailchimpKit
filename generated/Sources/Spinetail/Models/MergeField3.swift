//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A [merge field](https://mailchimp.com/developer/marketing/docs/merge-fields/) for an audience. */
public struct MergeField3: Codable, Equatable, Content {

    /** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case text = "text"
        case number = "number"
        case address = "address"
        case phone = "phone"
        case date = "date"
        case url = "url"
        case imageurl = "imageurl"
        case radio = "radio"
        case dropdown = "dropdown"
        case birthday = "birthday"
        case zip = "zip"
    }

    /** An unchanging id for the merge field. */
    public var id: Int?

    /** The [label](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
    public var label: String?

    /** The [type](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for the merge field. */
    public var type: `Type`?

    public init(id: Int? = nil, label: String? = nil, type: `Type`? = nil) {
        self.id = id
        self.label = label
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decodeIfPresent("id")
        label = try container.decodeIfPresent("label")
        type = try container.decodeIfPresent("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(label, forKey: "label")
        try container.encodeIfPresent(type, forKey: "type")
    }

}
