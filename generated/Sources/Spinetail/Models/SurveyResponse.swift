//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A single survey response. */
public struct SurveyResponse: Codable, Equatable, Content {

    public var contact: Contact?

    /** If this contact was added to the Mailchimp audience via this survey. */
    public var isNewContact: Bool?

    /** The ID for the survey response. */
    public var responseId: String?

    /** The survey questions and the answers to those questions. */
    public var results: [Response]?

    /** The date and time when the survey response was submitted in ISO 8601 format. */
    public var submittedAt: DateTime?

    public init(contact: Contact? = nil, isNewContact: Bool? = nil, responseId: String? = nil, results: [Response]? = nil, submittedAt: DateTime? = nil) {
        self.contact = contact
        self.isNewContact = isNewContact
        self.responseId = responseId
        self.results = results
        self.submittedAt = submittedAt
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        contact = try container.decodeIfPresent("contact")
        isNewContact = try container.decodeIfPresent("is_new_contact")
        responseId = try container.decodeIfPresent("response_id")
        results = try container.decodeArrayIfPresent("results")
        submittedAt = try container.decodeIfPresent("submitted_at")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(contact, forKey: "contact")
        try container.encodeIfPresent(isNewContact, forKey: "is_new_contact")
        try container.encodeIfPresent(responseId, forKey: "response_id")
        try container.encodeIfPresent(results, forKey: "results")
        try container.encodeIfPresent(submittedAt, forKey: "submitted_at")
    }

}
