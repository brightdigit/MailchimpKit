//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** A subscriber who clicked a specific URL in a specific campaign. */
public struct ClickDetailMember: Codable, Equatable, Content {

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The campaign id. */
    public var campaignId: String?

    /** The total number of times the subscriber clicked on the link. */
    public var clicks: Int?

    /** The status of the member, namely if they are subscribed, unsubscribed, deleted, non-subscribed, transactional, pending, or need reconfirmation. */
    public var contactStatus: String?

    /** Email address for a subscriber. */
    public var emailAddress: String?

    /** The MD5 hash of the lowercase version of the list member's email address. */
    public var emailId: String?

    /** The list id. */
    public var listId: String?

    /** The status of the list used, namely if it's deleted or disabled. */
    public var listIsActive: Bool?

    /** A dictionary of merge fields where the keys are the merge tags. See the [Merge Fields documentation](https://mailchimp.com/developer/marketing/docs/merge-fields/#structure) for more about the structure. */
    public var mergeFields: [String: [String: Any]]?

    /** The id for the tracked URL in the campaign. */
    public var uRLId: String?

    /** [VIP status](https://mailchimp.com/help/designate-and-send-to-vip-contacts/) for subscriber. */
    public var vip: Bool?

    public init(links: [ResourceLink]? = nil, campaignId: String? = nil, clicks: Int? = nil, contactStatus: String? = nil, emailAddress: String? = nil, emailId: String? = nil, listId: String? = nil, listIsActive: Bool? = nil, mergeFields: [String: [String: Any]]? = nil, uRLId: String? = nil, vip: Bool? = nil) {
        self.links = links
        self.campaignId = campaignId
        self.clicks = clicks
        self.contactStatus = contactStatus
        self.emailAddress = emailAddress
        self.emailId = emailId
        self.listId = listId
        self.listIsActive = listIsActive
        self.mergeFields = mergeFields
        self.uRLId = uRLId
        self.vip = vip
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        campaignId = try container.decodeIfPresent("campaign_id")
        clicks = try container.decodeIfPresent("clicks")
        contactStatus = try container.decodeIfPresent("contact_status")
        emailAddress = try container.decodeIfPresent("email_address")
        emailId = try container.decodeIfPresent("email_id")
        listId = try container.decodeIfPresent("list_id")
        listIsActive = try container.decodeIfPresent("list_is_active")
        mergeFields = try container.decodeAnyIfPresent("merge_fields")
        uRLId = try container.decodeIfPresent("url_id")
        vip = try container.decodeIfPresent("vip")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(campaignId, forKey: "campaign_id")
        try container.encodeIfPresent(clicks, forKey: "clicks")
        try container.encodeIfPresent(contactStatus, forKey: "contact_status")
        try container.encodeIfPresent(emailAddress, forKey: "email_address")
        try container.encodeIfPresent(emailId, forKey: "email_id")
        try container.encodeIfPresent(listId, forKey: "list_id")
        try container.encodeIfPresent(listIsActive, forKey: "list_is_active")
        try container.encodeAnyIfPresent(mergeFields, forKey: "merge_fields")
        try container.encodeIfPresent(uRLId, forKey: "url_id")
        try container.encodeIfPresent(vip, forKey: "vip")
    }

}
