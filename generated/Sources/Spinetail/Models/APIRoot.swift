//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** The API root resource links to all other resources available in the API. */
public struct APIRoot: Codable, Equatable, Content {

    /** The type of pricing plan the account is on. */
    public enum PricingPlanType: String, Codable, Equatable, CaseIterable {
        case monthly = "monthly"
        case payAsYouGo = "pay_as_you_go"
        case foreverFree = "forever_free"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    /** The Mailchimp account ID. */
    public var accountId: String?

    /** The user-specified industry associated with the account. */
    public var accountIndustry: String?

    /** The name of the account. */
    public var accountName: String?

    /** The timezone currently set for the account. */
    public var accountTimezone: String?

    /** URL of the avatar for the user. */
    public var avatarURL: String?

    public var contact: AccountContact?

    /** The account email address. */
    public var email: String?

    /** The first name tied to the account. */
    public var firstName: String?

    /** Date of first payment for monthly plans. */
    public var firstPayment: DateTime?

    public var industryStats: IndustryStats?

    /** The date and time of the last login for this account in ISO 8601 format. */
    public var lastLogin: DateTime?

    /** The last name tied to the account. */
    public var lastName: String?

    /** The ID associated with the user who owns this API key. If you can login to multiple accounts, this ID will be the same for each account. */
    public var loginId: String?

    /** The date and time that the account was created in ISO 8601 format. */
    public var memberSince: DateTime?

    /** The type of pricing plan the account is on. */
    public var pricingPlanType: PricingPlanType?

    /** Legacy - whether the account includes [Mailchimp Pro](https://mailchimp.com/help/about-mailchimp-pro/). */
    public var proEnabled: Bool?

    /** The [user role](https://mailchimp.com/help/manage-user-levels-in-your-account/) for the account. */
    public var role: String?

    /** The total number of subscribers across all lists in the account. */
    public var totalSubscribers: Int?

    /** The username tied to the account. */
    public var username: String?

    public init(links: [ResourceLink]? = nil, accountId: String? = nil, accountIndustry: String? = nil, accountName: String? = nil, accountTimezone: String? = nil, avatarURL: String? = nil, contact: AccountContact? = nil, email: String? = nil, firstName: String? = nil, firstPayment: DateTime? = nil, industryStats: IndustryStats? = nil, lastLogin: DateTime? = nil, lastName: String? = nil, loginId: String? = nil, memberSince: DateTime? = nil, pricingPlanType: PricingPlanType? = nil, proEnabled: Bool? = nil, role: String? = nil, totalSubscribers: Int? = nil, username: String? = nil) {
        self.links = links
        self.accountId = accountId
        self.accountIndustry = accountIndustry
        self.accountName = accountName
        self.accountTimezone = accountTimezone
        self.avatarURL = avatarURL
        self.contact = contact
        self.email = email
        self.firstName = firstName
        self.firstPayment = firstPayment
        self.industryStats = industryStats
        self.lastLogin = lastLogin
        self.lastName = lastName
        self.loginId = loginId
        self.memberSince = memberSince
        self.pricingPlanType = pricingPlanType
        self.proEnabled = proEnabled
        self.role = role
        self.totalSubscribers = totalSubscribers
        self.username = username
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        accountId = try container.decodeIfPresent("account_id")
        accountIndustry = try container.decodeIfPresent("account_industry")
        accountName = try container.decodeIfPresent("account_name")
        accountTimezone = try container.decodeIfPresent("account_timezone")
        avatarURL = try container.decodeIfPresent("avatar_url")
        contact = try container.decodeIfPresent("contact")
        email = try container.decodeIfPresent("email")
        firstName = try container.decodeIfPresent("first_name")
        firstPayment = try container.decodeIfPresent("first_payment")
        industryStats = try container.decodeIfPresent("industry_stats")
        lastLogin = try container.decodeIfPresent("last_login")
        lastName = try container.decodeIfPresent("last_name")
        loginId = try container.decodeIfPresent("login_id")
        memberSince = try container.decodeIfPresent("member_since")
        pricingPlanType = try container.decodeIfPresent("pricing_plan_type")
        proEnabled = try container.decodeIfPresent("pro_enabled")
        role = try container.decodeIfPresent("role")
        totalSubscribers = try container.decodeIfPresent("total_subscribers")
        username = try container.decodeIfPresent("username")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(accountId, forKey: "account_id")
        try container.encodeIfPresent(accountIndustry, forKey: "account_industry")
        try container.encodeIfPresent(accountName, forKey: "account_name")
        try container.encodeIfPresent(accountTimezone, forKey: "account_timezone")
        try container.encodeIfPresent(avatarURL, forKey: "avatar_url")
        try container.encodeIfPresent(contact, forKey: "contact")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(firstName, forKey: "first_name")
        try container.encodeIfPresent(firstPayment, forKey: "first_payment")
        try container.encodeIfPresent(industryStats, forKey: "industry_stats")
        try container.encodeIfPresent(lastLogin, forKey: "last_login")
        try container.encodeIfPresent(lastName, forKey: "last_name")
        try container.encodeIfPresent(loginId, forKey: "login_id")
        try container.encodeIfPresent(memberSince, forKey: "member_since")
        try container.encodeIfPresent(pricingPlanType, forKey: "pricing_plan_type")
        try container.encodeIfPresent(proEnabled, forKey: "pro_enabled")
        try container.encodeIfPresent(role, forKey: "role")
        try container.encodeIfPresent(totalSubscribers, forKey: "total_subscribers")
        try container.encodeIfPresent(username, forKey: "username")
    }

}
