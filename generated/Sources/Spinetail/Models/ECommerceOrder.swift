//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific order. */
public struct ECommerceOrder: Codable, Equatable, Content {

    /** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
    public enum TrackingCode: String, Codable, Equatable, CaseIterable {
        case prec = "prec"
    }

    /** A list of link types and descriptions for the API schema documents. */
    public var links: [ResourceLink]?

    public var billingAddress: BillingAddress?

    /** A string that uniquely identifies the campaign associated with an order. */
    public var campaignId: String?

    /** The date and time the order was cancelled in ISO 8601 format. */
    public var cancelledAtForeign: DateTime?

    /** The three-letter ISO 4217 code for the currency that the store accepts. */
    public var currencyCode: String?

    public var customer: ECommerceCustomer?

    /** The total amount of the discounts to be applied to the price of the order. */
    public var discountTotal: Double?

    /** The order status. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
    public var financialStatus: String?

    /** The fulfillment status for the order. Use this parameter to trigger [Order Notifications](https://mailchimp.com/developer/marketing/docs/e-commerce/#order-notifications). */
    public var fulfillmentStatus: String?

    /** A unique identifier for the order. */
    public var id: String?

    /** The URL for the page where the buyer landed when entering the shop. */
    public var landingSite: String?

    /** An array of the order's line items. */
    public var lines: [ECommerceOrderLineItem]?

    /** The order total associated with an order. */
    public var orderTotal: Double?

    /** The URL for the order. */
    public var orderURL: String?

    public var outreach: Outreach?

    /** The date and time the order was processed in ISO 8601 format. */
    public var processedAtForeign: DateTime?

    /** The promo codes applied on the order */
    public var promos: [PromosInner]?

    public var shippingAddress: ShippingAddress?

    /** The shipping total for the order. */
    public var shippingTotal: Double?

    /** The unique identifier for the store. */
    public var storeId: String?

    /** The tax total associated with an order. */
    public var taxTotal: Double?

    /** The tracking carrier associated with the order. */
    public var trackingCarrier: String?

    /** The Mailchimp tracking code for the order. Uses the 'mc_tc' parameter in E-Commerce tracking URLs. */
    public var trackingCode: TrackingCode?

    /** The tracking number associated with the order. */
    public var trackingNumber: String?

    /** The tracking URL associated with the order. */
    public var trackingURL: String?

    /** The date and time the order was updated in ISO 8601 format. */
    public var updatedAtForeign: DateTime?

    public init(links: [ResourceLink]? = nil, billingAddress: BillingAddress? = nil, campaignId: String? = nil, cancelledAtForeign: DateTime? = nil, currencyCode: String? = nil, customer: ECommerceCustomer? = nil, discountTotal: Double? = nil, financialStatus: String? = nil, fulfillmentStatus: String? = nil, id: String? = nil, landingSite: String? = nil, lines: [ECommerceOrderLineItem]? = nil, orderTotal: Double? = nil, orderURL: String? = nil, outreach: Outreach? = nil, processedAtForeign: DateTime? = nil, promos: [PromosInner]? = nil, shippingAddress: ShippingAddress? = nil, shippingTotal: Double? = nil, storeId: String? = nil, taxTotal: Double? = nil, trackingCarrier: String? = nil, trackingCode: TrackingCode? = nil, trackingNumber: String? = nil, trackingURL: String? = nil, updatedAtForeign: DateTime? = nil) {
        self.links = links
        self.billingAddress = billingAddress
        self.campaignId = campaignId
        self.cancelledAtForeign = cancelledAtForeign
        self.currencyCode = currencyCode
        self.customer = customer
        self.discountTotal = discountTotal
        self.financialStatus = financialStatus
        self.fulfillmentStatus = fulfillmentStatus
        self.id = id
        self.landingSite = landingSite
        self.lines = lines
        self.orderTotal = orderTotal
        self.orderURL = orderURL
        self.outreach = outreach
        self.processedAtForeign = processedAtForeign
        self.promos = promos
        self.shippingAddress = shippingAddress
        self.shippingTotal = shippingTotal
        self.storeId = storeId
        self.taxTotal = taxTotal
        self.trackingCarrier = trackingCarrier
        self.trackingCode = trackingCode
        self.trackingNumber = trackingNumber
        self.trackingURL = trackingURL
        self.updatedAtForeign = updatedAtForeign
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decodeArrayIfPresent("_links")
        billingAddress = try container.decodeIfPresent("billing_address")
        campaignId = try container.decodeIfPresent("campaign_id")
        cancelledAtForeign = try container.decodeIfPresent("cancelled_at_foreign")
        currencyCode = try container.decodeIfPresent("currency_code")
        customer = try container.decodeIfPresent("customer")
        discountTotal = try container.decodeIfPresent("discount_total")
        financialStatus = try container.decodeIfPresent("financial_status")
        fulfillmentStatus = try container.decodeIfPresent("fulfillment_status")
        id = try container.decodeIfPresent("id")
        landingSite = try container.decodeIfPresent("landing_site")
        lines = try container.decodeArrayIfPresent("lines")
        orderTotal = try container.decodeIfPresent("order_total")
        orderURL = try container.decodeIfPresent("order_url")
        outreach = try container.decodeIfPresent("outreach")
        processedAtForeign = try container.decodeIfPresent("processed_at_foreign")
        promos = try container.decodeArrayIfPresent("promos")
        shippingAddress = try container.decodeIfPresent("shipping_address")
        shippingTotal = try container.decodeIfPresent("shipping_total")
        storeId = try container.decodeIfPresent("store_id")
        taxTotal = try container.decodeIfPresent("tax_total")
        trackingCarrier = try container.decodeIfPresent("tracking_carrier")
        trackingCode = try container.decodeIfPresent("tracking_code")
        trackingNumber = try container.decodeIfPresent("tracking_number")
        trackingURL = try container.decodeIfPresent("tracking_url")
        updatedAtForeign = try container.decodeIfPresent("updated_at_foreign")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(links, forKey: "_links")
        try container.encodeIfPresent(billingAddress, forKey: "billing_address")
        try container.encodeIfPresent(campaignId, forKey: "campaign_id")
        try container.encodeIfPresent(cancelledAtForeign, forKey: "cancelled_at_foreign")
        try container.encodeIfPresent(currencyCode, forKey: "currency_code")
        try container.encodeIfPresent(customer, forKey: "customer")
        try container.encodeIfPresent(discountTotal, forKey: "discount_total")
        try container.encodeIfPresent(financialStatus, forKey: "financial_status")
        try container.encodeIfPresent(fulfillmentStatus, forKey: "fulfillment_status")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(landingSite, forKey: "landing_site")
        try container.encodeIfPresent(lines, forKey: "lines")
        try container.encodeIfPresent(orderTotal, forKey: "order_total")
        try container.encodeIfPresent(orderURL, forKey: "order_url")
        try container.encodeIfPresent(outreach, forKey: "outreach")
        try container.encodeIfPresent(processedAtForeign, forKey: "processed_at_foreign")
        try container.encodeIfPresent(promos, forKey: "promos")
        try container.encodeIfPresent(shippingAddress, forKey: "shipping_address")
        try container.encodeIfPresent(shippingTotal, forKey: "shipping_total")
        try container.encodeIfPresent(storeId, forKey: "store_id")
        try container.encodeIfPresent(taxTotal, forKey: "tax_total")
        try container.encodeIfPresent(trackingCarrier, forKey: "tracking_carrier")
        try container.encodeIfPresent(trackingCode, forKey: "tracking_code")
        try container.encodeIfPresent(trackingNumber, forKey: "tracking_number")
        try container.encodeIfPresent(trackingURL, forKey: "tracking_url")
        try container.encodeIfPresent(updatedAtForeign, forKey: "updated_at_foreign")
    }

}
