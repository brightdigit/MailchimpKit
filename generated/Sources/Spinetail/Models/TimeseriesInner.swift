//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
public struct TimeseriesInner: Codable, Equatable, Content {

    /** The number of emails sent in the timeseries. */
    public var emailsSent: Int?

    /** The number of clicks in the timeseries. */
    public var recipientsClicks: Int?

    /** The date and time for the series in ISO 8601 format. */
    public var timestamp: DateTime?

    /** The number of unique opens in the timeseries. */
    public var uniqueOpens: Int?

    public init(emailsSent: Int? = nil, recipientsClicks: Int? = nil, timestamp: DateTime? = nil, uniqueOpens: Int? = nil) {
        self.emailsSent = emailsSent
        self.recipientsClicks = recipientsClicks
        self.timestamp = timestamp
        self.uniqueOpens = uniqueOpens
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        emailsSent = try container.decodeIfPresent("emails_sent")
        recipientsClicks = try container.decodeIfPresent("recipients_clicks")
        timestamp = try container.decodeIfPresent("timestamp")
        uniqueOpens = try container.decodeIfPresent("unique_opens")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(emailsSent, forKey: "emails_sent")
        try container.encodeIfPresent(recipientsClicks, forKey: "recipients_clicks")
        try container.encodeIfPresent(timestamp, forKey: "timestamp")
        try container.encodeIfPresent(uniqueOpens, forKey: "unique_opens")
    }

}
