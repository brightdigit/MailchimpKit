//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

import PrchModel
/** Information about a specific product. */
public struct ECommerceProduct1: Codable, Equatable, Content {

    /** A unique identifier for the product. */
    public var id: String

    /** The title of a product. */
    public var title: String

    /** An array of the product's variants. At least one variant is required for each product. A variant can use the same `id` and `title` as the parent product. */
    public var variants: [ECommerceProductVariant1]

    /** The description of a product. */
    public var description: String?

    /** The handle of a product. */
    public var handle: String?

    /** The image URL for a product. */
    public var imageURL: String?

    /** An array of the product's images. */
    public var images: [ECommerceProductImage1]?

    /** The date and time the product was published. */
    public var publishedAtForeign: DateTime?

    /** The type of product. */
    public var type: String?

    /** The URL for a product. */
    public var url: String?

    /** The vendor for a product. */
    public var vendor: String?

    public init(id: String, title: String, variants: [ECommerceProductVariant1], description: String? = nil, handle: String? = nil, imageURL: String? = nil, images: [ECommerceProductImage1]? = nil, publishedAtForeign: DateTime? = nil, type: String? = nil, url: String? = nil, vendor: String? = nil) {
        self.id = id
        self.title = title
        self.variants = variants
        self.description = description
        self.handle = handle
        self.imageURL = imageURL
        self.images = images
        self.publishedAtForeign = publishedAtForeign
        self.type = type
        self.url = url
        self.vendor = vendor
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        title = try container.decode("title")
        variants = try container.decodeArray("variants")
        description = try container.decodeIfPresent("description")
        handle = try container.decodeIfPresent("handle")
        imageURL = try container.decodeIfPresent("image_url")
        images = try container.decodeArrayIfPresent("images")
        publishedAtForeign = try container.decodeIfPresent("published_at_foreign")
        type = try container.decodeIfPresent("type")
        url = try container.decodeIfPresent("url")
        vendor = try container.decodeIfPresent("vendor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(title, forKey: "title")
        try container.encode(variants, forKey: "variants")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(handle, forKey: "handle")
        try container.encodeIfPresent(imageURL, forKey: "image_url")
        try container.encodeIfPresent(images, forKey: "images")
        try container.encodeIfPresent(publishedAtForeign, forKey: "published_at_foreign")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(vendor, forKey: "vendor")
    }

}
