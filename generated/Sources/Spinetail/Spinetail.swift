//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import PrchModel


public typealias DateTime = Date
public typealias File = Data
public typealias ID = UUID

public enum STSurveys {}
public enum STAccountExport {}
public enum STAccountExports {}
public enum STActivityFeed {}
public enum STAuthorizedApps {}
public enum STAutomations {}
public enum STBatchWebhooks {}
public enum STBatches {}
public enum STCampaignFolders {}
public enum STCampaigns {}
public enum STConnectedSites {}
public enum STConversations {}
public enum STCustomerJourneys {}
public enum STEcommerce {}
public enum STFacebookAds {}
public enum STFileManager {}
public enum STLandingPages {}
public enum STLists {}
public enum STPing {}
public enum STReporting {}
public enum STReports {}
public enum STRoot {}
public enum STSearchCampaigns {}
public enum STSearchMembers {}
public enum STTemplateFolders {}
public enum STTemplates {}
public enum STVerifiedDomains {}

public protocol BaseURLProvider {
  var baseURLComponents: URLComponents? { get }
}


public class SpinetailAPI: API {
  public init(baseURLProvider: BaseURLProvider) {
	self.baseURLProvider = baseURLProvider
  }

  public var isReady: Bool {
	baseURLProvider.baseURLComponents != nil
  }

  public let baseURLProvider: BaseURLProvider
  public var baseURLComponents: URLComponents {
	guard let baseURLComponents = baseURLProvider.baseURLComponents else {
	  assertionFailure("BaseURLProvider is not ready")
	  return URLComponents()
	}

	return baseURLComponents
  }

  public var headers: [String: String] {
	Defaults.headers
  }

  public var encoder: any Encoder<Data> {
	Defaults.encoder
  }

  public var decoder: any Decoder<Data> {
	Defaults.decoder
  }

  public typealias RequestDataType = Data

  public typealias ResponseDataType = Data
}

extension JSONDecoder {
  convenience init(dateFormatter: DateFormatter) {
	self.init()
	self.dateDecodingStrategy = .formatted(dateFormatter)
  }
}

extension JSONEncoder {
  convenience init(dateFormatter: DateFormatter) {
	self.init()
	self.dateEncodingStrategy = .formatted(dateFormatter)
  }
}

extension SpinetailAPI {
  enum Defaults {
	public static let dateEncodingFormatter = {
	  let formatter = DateFormatter()
	  formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
	  formatter.locale = Locale(identifier: "en_US_POSIX")
	  formatter.calendar = Calendar(identifier: .gregorian)
	  return formatter
	}()

	public static let encoder: any Encoder<Data> = JSONEncoder(dateFormatter: Self.dateEncodingFormatter)

	public static let decoder: any Decoder<Data> = JSONDecoder(dateFormatter: Self.dateEncodingFormatter)

	public static let headers: [String: String] =
	  ["Content-Type": "application/json; charset=utf-8"]
  }
}
