//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import PrchModel


public typealias DateTime = Date
public typealias File = Data
public typealias ID = UUID

public enum Surveys {}
public enum AccountExport {}
public enum AccountExports {}
public enum ActivityFeed {}
public enum AuthorizedApps {}
public enum Automations {}
public enum BatchWebhooks {}
public enum Batches {}
public enum CampaignFolders {}
public enum Campaigns {}
public enum ConnectedSites {}
public enum Conversations {}
public enum CustomerJourneys {}
public enum Ecommerce {}
public enum FacebookAds {}
public enum FileManager {}
public enum LandingPages {}
public enum Lists {}
public enum Ping {}
public enum Reporting {}
public enum Reports {}
public enum Root {}
public enum SearchCampaigns {}
public enum SearchMembers {}
public enum TemplateFolders {}
public enum Templates {}
public enum VerifiedDomains {}



public class SpinetailAPI: API {
  private let apiKey : String
  private let dc: String
  
  public init?(apiKey: String) {
    self.apiKey = apiKey
    let apiKeyComponents = apiKey.components(separatedBy: "-")

    guard let dc = apiKeyComponents.last, apiKeyComponents.count == 2 else {
      return nil
    }

    self.dc = dc
    
    

    guard let baseURLComponents = URLComponents(string:  "https://\(dc).api.mailchimp.com/3.0") else {
      return nil
    }
    self.baseURLComponents = baseURLComponents

  }
  
  public let baseURLComponents: URLComponents


  public var headers: [String: String] {
    [
      "Authorization": "anystring \(self.apiKey)",
      "Content-type": "application/json; charset=utf-8"
    ]
  }

  public var encoder: any Encoder<Data> {
	Defaults.encoder
  }

  public var decoder: any Decoder<Data> {
	Defaults.decoder
  }

  public typealias RequestDataType = Data

  public typealias ResponseDataType = Data
}

extension JSONDecoder {
  convenience init(dateFormatter: DateFormatter) {
	self.init()
	self.dateDecodingStrategy = .formatted(dateFormatter)
  }
}

extension JSONEncoder {
  convenience init(dateFormatter: DateFormatter) {
	self.init()
	self.dateEncodingStrategy = .formatted(dateFormatter)
  }
}

extension SpinetailAPI {
  enum Defaults {
    public static let dateEncodingFormatter = {
      let formatter = DateFormatter()
      formatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZZZZZ"
      formatter.locale = Locale(identifier: "en_US_POSIX")
      formatter.calendar = Calendar(identifier: .gregorian)
      return formatter
    }()
    
    public static let encoder: any Encoder<Data> = JSONEncoder(dateFormatter: Self.dateEncodingFormatter)
    
    public static let decoder: any Decoder<Data> = JSONDecoder(dateFormatter: Self.dateEncodingFormatter)
  }

}
